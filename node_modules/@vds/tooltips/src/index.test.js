import React from 'react';
import { render, fireEvent } from '@testing-library/react';
import { Tooltip, TooltipDialog } from '.';

// mock cuid
jest.mock('cuid', () => () => 'asdf2134');

// set up to useFakeTimers because of 200ms delay on actions
beforeEach(() => jest.useFakeTimers());

describe('<Tooltip>', () => {
  const header = 'Lorem Header';
  const content = 'Lorem Ipsum';

  test('should render anchor correctly', () => {
    const { container } = render(<Tooltip header={header}>{content}</Tooltip>);

    expect(container.firstChild).toMatchSnapshot();
  });

  test('should render inverted anchor correctly', () => {
    const { container } = render(
      <Tooltip header={header} inverted>
        {content}
      </Tooltip>
    );

    expect(container.firstChild).toMatchSnapshot();
  });

  test('should render secondary small anchor correctly', () => {
    const { container } = render(
      <Tooltip header={header} secondary size="small">
        {content}
      </Tooltip>
    );

    expect(container.firstChild).toMatchSnapshot();
  });

  test('should render inverted secondary anchor correctly', () => {
    const { container } = render(
      <Tooltip header={header} inverted secondary>
        {content}
      </Tooltip>
    );

    expect(container.firstChild).toMatchSnapshot();
  });

  test('should render custom anchor element', () => {
    const { container } = render(
      <Tooltip
        anchorElement={({ ariaDescribedBy, ariaExpanded }) => (
          <button>native hyperlink tooltip</button>
        )}
      >
        {content}
      </Tooltip>
    );

    expect(container.firstChild).toMatchSnapshot();
  });

  test('should render large dialog correctly', () => {
    const { container, getByTestId } = render(
      <Tooltip header={header}>
        Lorem ipsum dolor sit amet consectetur adipisicing elit. Ea, error quis!
        Quasi esse vitae dolore accusamus quam tenetur natus odio non sapiente
        adipisci debitis nisi aliquid facilis, minima quia distinctio. Lorem
        ipsum dolor sit amet consectetur adipisicing elit. Ea, error quis! Lorem
        ipsum dolor sit amet consectetur adipisicing elit. Ea, error quis! Quasi
        esse vitae dolore accusamus quam tenetur natus odio non sapiente
        adipisci debitis nisi aliquid facilis, minima quia distinctio. Quasi
        esse vitae dolore accusamus quam tenetur natus odio non sapiente
        adipisci debitis nisi aliquid facilis, minima quia distinctio. Lorem
        ipsum dolor sit amet consectetur adipisicing elit. Ea, error quis! Quasi
        esse vitae dolore accusamus quam tenetur natus odio non sapiente
        adipisci debitis nisi aliquid facilis, minima quia distinctio. Lorem
        ipsum dolor sit amet consectetur adipisicing elit. Ea, error quis! Lorem
        ipsum dolor sit amet consectetur adipisicing elit. Ea, error quis! Quasi
        esse vitae dolore accusamus quam tenetur natus odio non sapiente
        adipisci debitis nisi aliquid facilis, minima quia distinctio. Quasi
        esse vitae dolore accusamus quam tenetur natus odio non sapiente
        adipisci debitis nisi aliquid facilis, minima quia distinctio.
      </Tooltip>
    );

    const hitArea = getByTestId('hit-area');
    const button = getByTestId('tooltip');
    // tooltip dialog should be closed
    expect(button.getAttribute('aria-expanded')).toBe('false');

    // fire event on hitArea
    fireEvent.mouseEnter(hitArea);

    // run all fake timers
    jest.runAllTimers();

    expect(container.firstChild).toMatchSnapshot();
  });
});

describe('<Tooltip> Mouse Functionality', () => {
  const header = 'Lorem header';
  const content = 'Lorem content';

  test('should open dialog onMouseEnter HitArea', () => {
    const { container, getByTestId, getByText } = render(
      <Tooltip header={header}>{content}</Tooltip>
    );

    const hitArea = getByTestId('hit-area');
    const button = getByTestId('tooltip');
    // tooltip dialog should be closed
    expect(button.getAttribute('aria-expanded')).toBe('false');

    // fire event on hitArea
    fireEvent.mouseEnter(hitArea);

    // run all fake timers
    jest.runAllTimers();

    expect(button.getAttribute('aria-expanded')).toBe('true');

    const dialogContainer = container.querySelector('span[aria-hidden]');

    // check that the dialog is no longer hidden
    // expect(dialogContainer.getAttribute('aria-hidden')).toBe('false');
    // check that text of tooltip dialog is being rendered
    expect(getByText(header).textContent).toBe(header);
    expect(getByText(content).textContent).toBe(content);
    expect(getByText(header)).toBeInTheDocument();
    expect(getByText(content)).toBeInTheDocument();
  });

  test('should keep dialog active when onMouseEnter HoverArea', () => {
    const { container, getByTestId, getByText } = render(
      <Tooltip header={header}>{content}</Tooltip>
    );

    const hitArea = getByTestId('hit-area');
    const button = getByTestId('tooltip');
    // tooltip dialog should be closed
    expect(button.getAttribute('aria-expanded')).toBe('false');

    // fire event on hitArea
    fireEvent.mouseEnter(hitArea);

    // run all fake timers
    jest.runAllTimers();

    // expect aria-expanded to be true after event
    expect(button.getAttribute('aria-expanded')).toBe('true');

    const dialogContainer = container.querySelector('span[aria-hidden]');

    // check that the dialog is no longer hidden
    // expect(dialogContainer.getAttribute('aria-hidden')).toBe('false');

    // check that text of tooltip dialog is being rendered
    expect(getByText(header).textContent).toBe(header);
    expect(getByText(content).textContent).toBe(content);
    expect(getByText(header)).toBeInTheDocument();
    expect(getByText(content)).toBeInTheDocument();
  });

  test('should keep dialog active when onMouseEnter Dialog', () => {
    const { container, getByTestId, getByText } = render(
      <Tooltip header={header}>{content}</Tooltip>
    );

    const hitArea = getByTestId('hit-area');
    const button = getByTestId('tooltip');
    // tooltip dialog should be closed
    expect(button.getAttribute('aria-expanded')).toBe('false');

    // fire event on hitArea
    fireEvent.mouseEnter(hitArea);

    // run all fake timers
    jest.runAllTimers();

    const dialog = getByTestId('dialog');
    // move mouse into dialog area
    fireEvent.mouseEnter(dialog);

    // expect aria-expanded to be true after event
    expect(button.getAttribute('aria-expanded')).toBe('true');

    const dialogContainer = container.querySelector('span[aria-hidden]');

    // check that the dialog is no longer hidden
    // expect(dialogContainer.getAttribute('aria-hidden')).toBe('false');

    // check that text of tooltip dialog is being rendered
    expect(getByText(header).textContent).toBe(header);
    expect(getByText(content).textContent).toBe(content);
    expect(getByText(header)).toBeInTheDocument();
    expect(getByText(content)).toBeInTheDocument();
  });

  test('should close dialog onMouseLeave HitArea', () => {
    const { container, getByTestId, getByText } = render(
      <Tooltip header={header}>{content}</Tooltip>
    );

    const hitArea = getByTestId('hit-area');
    const button = getByTestId('tooltip');
    // tooltip dialog should be closed
    expect(button.getAttribute('aria-expanded')).toBe('false');

    // fire event on hitArea
    fireEvent.mouseEnter(hitArea);

    // run all fake timers
    jest.runAllTimers();

    // expect aria-expanded to be true after event
    expect(button.getAttribute('aria-expanded')).toBe('true');

    const dialogContainer = container.querySelector('span[aria-hidden]');

    // check that the dialog is no longer hidden
    // expect(dialogContainer.getAttribute('aria-hidden')).toBe('false');

    // check that text of tooltip dialog is being rendered
    expect(getByText(header).textContent).toBe(header);
    expect(getByText(content).textContent).toBe(content);
    expect(getByText(header)).toBeInTheDocument();
    expect(getByText(content)).toBeInTheDocument();

    // mouse leave hit area
    fireEvent.mouseLeave(hitArea);

    expect(button.getAttribute('aria-expanded')).toBe('false');
    // expect(dialogContainer).not.toBeInTheDocument();
  });

  test('should close dialog when mouseExit HoverArea', () => {
    const { container, getByTestId, getByText } = render(
      <Tooltip header={header}>{content}</Tooltip>
    );

    const hitArea = getByTestId('hit-area');
    const button = getByTestId('tooltip');

    // tooltip dialog should be closed
    expect(button.getAttribute('aria-expanded')).toBe('false');

    // fire event on hitArea
    fireEvent.mouseEnter(hitArea);

    // run all fake timers
    jest.runAllTimers();

    // expect aria-expanded to be true after event
    expect(button.getAttribute('aria-expanded')).toBe('true');

    const dialogContainer = container.querySelector('span[aria-hidden]');

    // check that the dialog is no longer hidden
    // expect(dialogContainer.getAttribute('aria-hidden')).toBe('false');

    // check that text of tooltip dialog is being rendered
    expect(getByText(header).textContent).toBe(header);
    expect(getByText(content).textContent).toBe(content);
    expect(getByText(header)).toBeInTheDocument();
    expect(getByText(content)).toBeInTheDocument();

    expect(button.getAttribute('aria-expanded')).toBe('true');
  });

  test('should close dialog onMouseLeave Dialog', () => {
    const { container, getByTestId, getByText } = render(
      <Tooltip header={header}>{content}</Tooltip>
    );

    const hitArea = getByTestId('hit-area');
    const button = getByTestId('tooltip');
    // tooltip dialog should be closed
    expect(button.getAttribute('aria-expanded')).toBe('false');

    // fire event on hitArea
    fireEvent.mouseEnter(hitArea);

    // run all fake timers
    jest.runAllTimers();

    const dialog = getByTestId('dialog');
    // move mouse into dialog area
    fireEvent.mouseEnter(dialog);

    // expect aria-expanded to be true after event
    expect(button.getAttribute('aria-expanded')).toBe('true');

    const dialogContainer = container.querySelector('span[aria-hidden]');

    // check that the dialog is no longer hidden
    // expect(dialogContainer.getAttribute('aria-hidden')).toBe('false');

    // check that text of tooltip dialog is being rendered
    expect(getByText(header).textContent).toBe(header);
    expect(getByText(content).textContent).toBe(content);
    expect(getByText(header)).toBeInTheDocument();
    expect(getByText(content)).toBeInTheDocument();

    // mouse leave dialog area
    fireEvent.mouseLeave(dialog);

    expect(button.getAttribute('aria-expanded')).toBe('false');
    // expect(dialogContainer).not.toBeInTheDocument();
  });

  test('should close dialog onClick outside Dialog', () => {
    const { container, getByTestId, getByText } = render(
      <Tooltip header={header}>{content}</Tooltip>
    );

    const hitArea = getByTestId('hit-area');
    const button = getByTestId('tooltip');
    // tooltip dialog should be closed
    expect(button.getAttribute('aria-expanded')).toBe('false');

    // fire event on hitArea
    fireEvent.mouseEnter(hitArea);

    // run all fake timers
    jest.runAllTimers();

    const dialog = getByTestId('dialog');
    // move mouse into dialog area
    fireEvent.mouseEnter(dialog);

    // expect aria-expanded to be true after event
    expect(button.getAttribute('aria-expanded')).toBe('true');

    const dialogContainer = container.querySelector('span[aria-hidden]');

    // check that the dialog is no longer hidden
    // expect(dialogContainer.getAttribute('aria-hidden')).toBe('false');

    // check that text of tooltip dialog is being rendered
    expect(getByText(header).textContent).toBe(header);
    expect(getByText(content).textContent).toBe(content);
    expect(getByText(header)).toBeInTheDocument();
    expect(getByText(content)).toBeInTheDocument();

    // mouse leave dialog area
    fireEvent.click(hitArea);
    fireEvent.click(container);

    expect(button.getAttribute('aria-expanded')).toBe('false');
    // expect(dialogContainer).not.toBeInTheDocument();
  });

  test('should not close dialog onClick inside Dialog and anchor elem clicked', () => {
    const { container, getByTestId, getByText } = render(
      <Tooltip header={header}>{content}</Tooltip>
    );

    const hitArea = getByTestId('hit-area');
    const button = getByTestId('tooltip');
    // tooltip dialog should be closed
    expect(button.getAttribute('aria-expanded')).toBe('false');

    // fire event on hitArea
    fireEvent.mouseEnter(hitArea);

    // run all fake timers
    jest.runAllTimers();

    const dialog = getByTestId('dialog');
    // move mouse into dialog area
    fireEvent.mouseEnter(dialog);

    // expect aria-expanded to be true after event
    expect(button.getAttribute('aria-expanded')).toBe('true');

    const dialogContainer = container.querySelector('span[aria-hidden]');

    // check that the dialog is no longer hidden
    // expect(dialogContainer.getAttribute('aria-hidden')).toBe('false');

    // check that text of tooltip dialog is being rendered
    expect(getByText(header).textContent).toBe(header);
    expect(getByText(content).textContent).toBe(content);
    expect(getByText(header)).toBeInTheDocument();
    expect(getByText(content)).toBeInTheDocument();

    // mouse remain in dialog area
    fireEvent.click(dialog);

    expect(button.getAttribute('aria-expanded')).toBe('true');
    // expect(dialogContainer).toBeInTheDocument();
  });
});

describe('<Tooltip> Keyboard Functionality', () => {
  const header = 'Lorem header';
  const content = 'Lorem content';

  test('should open and close dialog when Enter Keypress', () => {
    const { container, getByText, getByTestId } = render(
      <Tooltip header={header}>{content}</Tooltip>
    );

    const button = getByTestId('tooltip');
    // tooltip dialog should be closed
    expect(button.getAttribute('aria-expanded')).toBe('false');

    // focus button and fire keyDown to open dialog
    fireEvent.focus(button);
    fireEvent.keyDown(button, { keyCode: 13 });

    expect(button.getAttribute('aria-expanded')).toBe('true');

    const dialogContainer = container.querySelector('span[aria-hidden]');

    // check that the dialog is no longer hidden
    // expect(dialogContainer.getAttribute('aria-hidden')).toBe('false');

    // check that text of tooltip dialog is being rendered
    expect(getByText(header).textContent).toBe(header);
    expect(getByText(content).textContent).toBe(content);
    expect(getByText(header)).toBeInTheDocument();
    expect(getByText(content)).toBeInTheDocument();

    // fire event to toggle dialog with enter key
    fireEvent.keyDown(button, { keyCode: 13 });

    expect(button.getAttribute('aria-expanded')).toBe('false');
    // expect(dialogContainer).not.toBeInTheDocument();
  });

  // test('should open and close dialog when SpaceBar Keypress', () => {
  //   const { container, getByText } = render(
  //     <Tooltip header={header}>{content}</Tooltip>
  //   );

  //   const button = container.querySelector('button[aria-expanded]');

  //   // tooltip dialog should be closed
  //   expect(button.getAttribute('aria-expanded')).toBe('false');

  //   // focus button and fire keyDown to open dialog
  //   fireEvent.focus(button);
  //   fireEvent.keyDown(button, { keyCode: 32 });

  //   expect(button.getAttribute('aria-expanded')).toBe('true');

  //   const dialogContainer = container.querySelector('span[aria-hidden]');

  //   // check that the dialog is no longer hidden
  //   expect(dialogContainer.getAttribute('aria-hidden')).toBe('false');

  //   // check that text of tooltip dialog is being rendered
  //   expect(getByText(header).textContent).toBe(header);
  //   expect(getByText(content).textContent).toBe(content);
  //   expect(getByText(header)).toBeInTheDocument();
  //   expect(getByText(content)).toBeInTheDocument();

  //   // fire event to toggle dialog with space bar
  //   fireEvent.keyDown(button, { keyCode: 32 });

  //   expect(button.getAttribute('aria-expanded')).toBe('false');
  //   expect(dialogContainer).not.toBeInTheDocument();
  // });

  test('should close dialog when Escape Keypress && dialog open', () => {
    const { container, getByText, getByTestId } = render(
      <Tooltip header={header}>{content}</Tooltip>
    );

    const button = getByTestId('tooltip');
    // tooltip dialog should be closed
    expect(button.getAttribute('aria-expanded')).toBe('false');

    // focus button and fire keyDown to open dialog
    fireEvent.focus(button);
    fireEvent.keyDown(button, { keyCode: 32 });

    // expect(button.getAttribute('aria-expanded')).toBe('true');

    const dialogContainer = container.querySelector('span[aria-hidden]');

    // check that the dialog is no longer hidden
    // expect(dialogContainer.getAttribute('aria-hidden')).toBe('false');

    // check that text of tooltip dialog is being rendered
    // expect(getByText(header).textContent).toBe(header);
    // expect(getByText(content).textContent).toBe(content);
    // expect(getByText(header)).toBeInTheDocument();
    // expect(getByText(content)).toBeInTheDocument();

    // fire event to toggle dialog with escape key
    fireEvent.keyDown(button, { keyCode: 27 });

    expect(button.getAttribute('aria-expanded')).toBe('false');
    // expect(dialogContainer).not.toBeInTheDocument();
  });

  test('should close dialog when Shift Keypress && Tab && dialog open', () => {
    const { container, getByText, getByTestId } = render(
      <Tooltip header={header}>{content}</Tooltip>
    );

    const button = getByTestId('tooltip');
    // tooltip dialog should be closed
    expect(button.getAttribute('aria-expanded')).toBe('false');

    // focus button and fire keyDown to open dialog
    fireEvent.focus(button);
    fireEvent.keyDown(button, { keyCode: 32 });

    // expect(button.getAttribute('aria-expanded')).toBe('true');

    const dialogContainer = container.querySelector('span[aria-hidden]');

    // check that the dialog is no longer hidden
    // expect(dialogContainer.getAttribute('aria-hidden')).toBe('false');

    // check that text of tooltip dialog is being rendered
    // expect(getByText(header).textContent).toBe(header);
    // expect(getByText(content).textContent).toBe(content);
    // expect(getByText(header)).toBeInTheDocument();
    // expect(getByText(content)).toBeInTheDocument();

    // fire event to toggle dialog with  shift tab keyDown
    fireEvent.keyDown(button, { shiftKey: true, keyCode: 9 });

    expect(button.getAttribute('aria-expanded')).toBe('false');
    // expect(dialogContainer).not.toBeInTheDocument();
  });

  test('should close dialog when Tab && dialog open', () => {
    const { container, getByText, getByTestId } = render(
      <Tooltip header={header} inverted>
        {content}
      </Tooltip>
    );

    const button = getByTestId('tooltip');
    // tooltip dialog should be closed
    expect(button.getAttribute('aria-expanded')).toBe('false');

    // focus button and fire keyDown to open dialog
    fireEvent.focus(button);
    fireEvent.keyDown(button, { keyCode: 32 });

    // expect(button.getAttribute('aria-expanded')).toBe('true');

    const dialogContainer = container.querySelector('span[aria-hidden]');

    // check that the dialog is no longer hidden
    // expect(dialogContainer.getAttribute('aria-hidden')).toBe('false');

    // check that text of tooltip dialog is being rendered
    // expect(getByText(header).textContent).toBe(header);
    // expect(getByText(content).textContent).toBe(content);
    // expect(getByText(header)).toBeInTheDocument();
    // expect(getByText(content)).toBeInTheDocument();

    // fire event to toggle dialog with tab keyDown
    fireEvent.keyDown(button, { keyCode: 9 });

    expect(button.getAttribute('aria-expanded')).toBe('true');
    //expect(dialogContainer).not.toBeInTheDocument();
  });
});

//   describe('<Tooltip> Add functionality to custom anchor element', () => {
//     const header = 'Lorem Header';
//     const content = 'Lorem Ipsum';

//     test('should open dialog onMouseEnter custom anchor element', () => {
//       const { container, getByText } = render(
//         <Tooltip
//           header={header}
//           anchorElement={({ ariaDescribedBy, ariaExpanded }) => (
//             <button>
//               native hyperlink tooltip
//             </button>
//         )}
//       >
//         {content}
//       </Tooltip>
//     );

//     const button = container.querySelector('button[aria-expanded]');
//     // tooltip dialog should be closed

//     // fire event on button
//     fireEvent.mouseEnter(button);
//     // callback custom mouse events from user
//     fireEvent.mouseDown(button);
//     fireEvent.mouseUp(button);
//     fireEvent.mouseLeave(button);

//     // run all fake timers
//     jest.runAllTimers();

//     const dialogContainer = container.querySelector('span[aria-hidden]');

//     // check that the dialog is no longer hidden
//     expect(dialogContainer.getAttribute('aria-hidden')).toBe('false');
//     // check that text of tooltip dialog is being rendered
//     // expect(getByText(header).textContent).toBe(header);
//     // expect(getByText(content).textContent).toBe(content);
//     // expect(getByText(header)).toBeInTheDocument();
//     // expect(getByText(content)).toBeInTheDocument();
//   });

//   test('should close dialog onMouseExit custom anchor element', () => {
//     const { container, getByText } = render(
//       <Tooltip
//         header={header}
//         anchorElement={({ ariaDescribedBy, ariaExpanded }) => (
//           <button
//           >
//             native hyperlink tooltip
//           </button>
//         )}
//       >
//         {content}
//       </Tooltip>
//     );

//     const button = container.querySelector('button[aria-expanded]');

//     // tooltip dialog should be closed
//     expect(button.getAttribute('aria-expanded')).toBe('false');

//     // fire event on hitArea
//     fireEvent.mouseEnter(button);

//     // run all fake timers
//     jest.runAllTimers();

//     // expect aria-expanded to be true after event
//     expect(button.getAttribute('aria-expanded')).toBe('true');

//     const dialogContainer = container.querySelector('span[aria-hidden]');

//     // check that the dialog is no longer hidden
//     expect(dialogContainer.getAttribute('aria-hidden')).toBe('false');

//     // check that text of tooltip dialog is being rendered
//     expect(getByText(header).textContent).toBe(header);
//     expect(getByText(content).textContent).toBe(content);
//     expect(getByText(header)).toBeInTheDocument();
//     expect(getByText(content)).toBeInTheDocument();

//     // mouse leave hit area
//     fireEvent.mouseLeave(button);

//     expect(button.getAttribute('aria-expanded')).toBe('false');
//     expect(dialogContainer).not.toBeInTheDocument();
//   });

//   test('should open and close when custom element focused with enter key', () => {
//     const { container, getByText } = render(
//       <Tooltip
//         header={header}
//         anchorElement={({ ariaDescribedBy, ariaExpanded }) => (
//           <button>
//             native hyperlink tooltip
//           </button>
//         )}
//       >
//         {content}
//       </Tooltip>
//     );

//     const button = container.querySelector('button[aria-expanded]');

//     // tooltip dialog should be closed
//     expect(button.getAttribute('aria-expanded')).toBe('false');

//     // focus button and fire keyDown to open dialog
//     fireEvent.focus(button);
//     fireEvent.keyDown(button, { keyCode: 13 });

//     expect(button.getAttribute('aria-expanded')).toBe('true');

//     const dialogContainer = container.querySelector('span[aria-hidden]');

//     // check that the dialog is no longer hidden
//     expect(dialogContainer.getAttribute('aria-hidden')).toBe('false');

//     // check that text of tooltip dialog is being rendered
//     expect(getByText(header).textContent).toBe(header);
//     expect(getByText(content).textContent).toBe(content);
//     expect(getByText(header)).toBeInTheDocument();
//     expect(getByText(content)).toBeInTheDocument();

//     // fire event to toggle dialog with enter key
//     fireEvent.keyDown(button, { keyCode: 13 });

//     expect(button.getAttribute('aria-expanded')).toBe('false');
//     expect(dialogContainer).not.toBeInTheDocument();
//   });

//   // test('should open and close dialog when SpaceBar Keypress and focus on element', () => {
//   //   const { container, getByText } = render(
//   //     <Tooltip
//   //       header={header}
//   //       anchorElement={({ ariaDescribedBy, ariaExpanded }) => (
//   //         <button
//   //           href="#"
//   //           aria-describedby={ariaDescribedBy}
//   //           aria-expanded={ariaExpanded}
//   //           aria-haspopup="true"
//   //           onClick={e => e.preventDefault()}
//   //         >
//   //           native hyperlink tooltip
//   //         </button>
//   //       )}
//   //     >
//   //       {content}
//   //     </Tooltip>
//   //   );

//   //   const button = container.querySelector('button[aria-expanded]');

//   //   // tooltip dialog should be closed
//   //   expect(button.getAttribute('aria-expanded')).toBe('false');

//   //   // focus button and fire keyDown to open dialog
//   //   fireEvent.focus(button);
//   //   fireEvent.keyDown(button, { keyCode: 32 });

//   //   expect(button.getAttribute('aria-expanded')).toBe('true');

//   //   const dialogContainer = container.querySelector('span[aria-hidden]');

//   //   // check that the dialog is no longer hidden
//   //   expect(dialogContainer.getAttribute('aria-hidden')).toBe('false');

//   //   // check that text of tooltip dialog is being rendered
//   //   expect(getByText(header).textContent).toBe(header);
//   //   expect(getByText(content).textContent).toBe(content);
//   //   expect(getByText(header)).toBeInTheDocument();
//   //   expect(getByText(content)).toBeInTheDocument();

//   //   // fire event to toggle dialog with space bar
//   //   fireEvent.keyDown(button, { keyCode: 32 });

//   //   expect(button.getAttribute('aria-expanded')).toBe('false');
//   //   expect(dialogContainer).not.toBeInTheDocument();
//   // });

//   test('should close dialog when escape key pressed && dialog open', () => {
//     const { container, getByText } = render(
//       <Tooltip
//         header={header}
//         anchorElement={({ ariaDescribedBy, ariaExpanded }) => (
//           <button
//             href="#"
//             aria-describedby={ariaDescribedBy}
//             aria-expanded={ariaExpanded}
//             aria-haspopup="true"
//             onClick={e => e.preventDefault()}
//           >
//             native hyperlink tooltip
//           </button>
//         )}
//       >
//         {content}
//       </Tooltip>
//     );

//     const button = container.querySelector('button[aria-expanded]');

//     // tooltip dialog should be closed
//     expect(button.getAttribute('aria-expanded')).toBe('false');

//     // focus button and fire keyDown to open dialog
//     fireEvent.focus(button);
//     // fireEvent.keyDown(button, { keyCode: 32 });

//     // expect(button.getAttribute('aria-expanded')).toBe('true');

//     const dialogContainer = container.querySelector('span[aria-hidden]');

//     // check that the dialog is no longer hidden
//     //expect(dialogContainer.getAttribute('aria-hidden')).toBe('false');

//     // check that text of tooltip dialog is being rendered
//     // expect(getByText(header).textContent).toBe(header);
//     // expect(getByText(content).textContent).toBe(content);
//     // expect(getByText(header)).toBeInTheDocument();
//     // expect(getByText(content)).toBeInTheDocument();

//     // fire event to toggle dialog with escape key
//     fireEvent.keyDown(button, { keyCode: 27 });

//     expect(button.getAttribute('aria-expanded')).toBe('false');
//     expect(dialogContainer).not.toBeInTheDocument();
//   });

//   test('should close dialog when shift tab on custom element && dialog open', () => {
//     const { container, getByText } = render(
//       <Tooltip
//         header={header}
//         anchorElement={({ ariaDescribedBy, ariaExpanded }) => (
//           <button
//             href="#"
//             aria-describedby={ariaDescribedBy}
//             aria-expanded={ariaExpanded}
//             aria-haspopup="true"
//             onClick={e => e.preventDefault()}
//           >
//             native hyperlink tooltip
//           </button>
//         )}
//       >
//         {content}
//       </Tooltip>
//     );

//     const button = container.querySelector('button[aria-expanded]');

//     // tooltip dialog should be closed
//     expect(button.getAttribute('aria-expanded')).toBe('false');

//     // focus button and fire keyDown to open dialog
//     fireEvent.focus(button);
//     fireEvent.keyDown(button, { keyCode: 32 });

//     //expect(button.getAttribute('aria-expanded')).toBe('true');

//     const dialogContainer = container.querySelector('span[aria-hidden]');

//     // check that the dialog is no longer hidden
//     // expect(dialogContainer.getAttribute('aria-hidden')).toBe('false');

//     // check that text of tooltip dialog is being rendered
//     // expect(getByText(header).textContent).toBe(header);
//     // expect(getByText(content).textContent).toBe(content);
//     // expect(getByText(header)).toBeInTheDocument();
//     // expect(getByText(content)).toBeInTheDocument();

//     // fire event to toggle dialog with  shift tab keyDown
//     fireEvent.keyDown(button, { shiftKey: true, keyCode: 9 });

//     expect(button.getAttribute('aria-expanded')).toBe('false');
//     expect(dialogContainer).not.toBeInTheDocument();
//   });

//   test('should close dialog when Tab && dialog open', () => {
//     const { container, getByText } = render(
//       <Tooltip
//         header={header}
//         anchorElement={({ ariaDescribedBy, ariaExpanded }) => (
//           <button
//             href="#"
//             aria-describedby={ariaDescribedBy}
//             aria-expanded={ariaExpanded}
//             aria-haspopup="true"
//             onClick={e => e.preventDefault()}
//           >
//             native hyperlink tooltip
//           </button>
//         )}
//       >
//         {content}
//       </Tooltip>
//     );

//     const button = container.querySelector('button[aria-expanded]');

//     // tooltip dialog should be closed
//     expect(button.getAttribute('aria-expanded')).toBe('false');

//     // focus button and fire keyDown to open dialog
//     fireEvent.focus(button);
//     fireEvent.keyDown(button, { keyCode: 32 });

//     // expect(button.getAttribute('aria-expanded')).toBe('true');

//     const dialogContainer = container.querySelector('span[aria-hidden]');

//     // check that the dialog is no longer hidden
//     // expect(dialogContainer.getAttribute('aria-hidden')).toBe('false');

//     // check that text of tooltip dialog is being rendered
//     // expect(getByText(header).textContent).toBe(header);
//     // expect(getByText(content).textContent).toBe(content);
//     // expect(getByText(header)).toBeInTheDocument();
//     // expect(getByText(content)).toBeInTheDocument();

//     // fire event to toggle dialog with tab keyDown
//     fireEvent.keyDown(button, { keyCode: 9 });

//     expect(button.getAttribute('aria-expanded')).toBe('false');
//     expect(dialogContainer).not.toBeInTheDocument();
//   });
// });
