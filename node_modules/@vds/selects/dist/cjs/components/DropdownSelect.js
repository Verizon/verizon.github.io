"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _javascriptStyleHelpers = require("@uie/javascript-style-helpers");

var _theme = require("@vds/theme");

var _icons = require("@vds/icons");

var _selects = require("@vds-core/selects");

var _typography = require("@vds/typography");

var _tooltips = require("@vds/tooltips");

var propTypes = {
  required: _propTypes["default"].bool,

  /**
   * Boolean determining if label is inline or outside container
   */
  inlineLabel: _propTypes["default"].bool,

  /**
   * String containing the header of the TooltipDialog
   */
  tooltipTitle: _propTypes["default"].string,

  /**
   * String containing the body content of the TooltipDialog
   */
  tooltipContent: _propTypes["default"].string,

  /**
   * If provided, will contain the string for the helper text
   */
  helperText: _propTypes["default"].string,

  /**
   * Determines the placement of the helper text (right or bottom)
   */
  helperTextPlacement: _propTypes["default"].oneOf(['right', 'bottom'])
};
var defaultProps = {
  required: true,
  helperTextPlacement: 'bottom',
  inlineLabel: false
};

var DropdownSelect = function DropdownSelect(props) {
  var required = props.required,
      inlineLabel = props.inlineLabel,
      helperText = props.helperText,
      helperTextPlacement = props.helperTextPlacement,
      tooltipTitle = props.tooltipTitle,
      tooltipContent = props.tooltipContent;

  function determinePadding(error) {
    if (error) {
      return (0, _javascriptStyleHelpers.calculateRem)(12, 44, 9, 12);
    } else {
      return (0, _javascriptStyleHelpers.calculateRem)(12, 44, 12, 12);
    }
  }

  return /*#__PURE__*/_react["default"].createElement(_selects.DropdownSelect, (0, _extends2["default"])({}, props, {
    readOnlyBorders: true,
    hoverState: true,
    focusState: true,
    inputFontSize: true,
    overflowEllipsis: true,
    typescale: _typography.TypographyConfig.getTypescale(),
    minWidth: inlineLabel ? '103px' : '66px',
    maxWidth: "596px",
    height: (0, _javascriptStyleHelpers.calculateRem)(44),
    selectPadding: determinePadding(props.error),
    labelMarginBottom: (0, _theme.calculateSpacing)('1X'),
    errorLabelSpacing: (0, _theme.calculateSpacing)('2X'),
    iconConfig: _icons.IconData,
    color: _theme.colors,
    required: required,
    bodyConfig: _typography.BodyConfig,
    helperText: helperText,
    helperTextPlacement: helperTextPlacement,
    Tooltip: _tooltips.Tooltip,
    tooltipTitle: tooltipTitle,
    tooltipContent: tooltipContent,
    Body: _typography.Body,
    Micro: _typography.Micro
  }));
};

DropdownSelect.propTypes = propTypes;
DropdownSelect.defaultProps = defaultProps;
var _default = DropdownSelect;
exports["default"] = _default;