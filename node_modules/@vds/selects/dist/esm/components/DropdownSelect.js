import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { calculateRem } from '@uie/javascript-style-helpers';
import { colors, calculateSpacing } from '@vds/theme';
import { IconData } from '@vds/icons';
import { DropdownSelect as CoreDropdownSelect } from '@vds-core/selects';
import { BodyConfig, Body, Micro, TypographyConfig } from '@vds/typography';
import { Tooltip } from '@vds/tooltips';
var propTypes = {
  required: PropTypes.bool,

  /**
   * Boolean determining if label is inline or outside container
   */
  inlineLabel: PropTypes.bool,

  /**
   * String containing the header of the TooltipDialog
   */
  tooltipTitle: PropTypes.string,

  /**
   * String containing the body content of the TooltipDialog
   */
  tooltipContent: PropTypes.string,

  /**
   * If provided, will contain the string for the helper text
   */
  helperText: PropTypes.string,

  /**
   * Determines the placement of the helper text (right or bottom)
   */
  helperTextPlacement: PropTypes.oneOf(['right', 'bottom'])
};
var defaultProps = {
  required: true,
  helperTextPlacement: 'bottom',
  inlineLabel: false
};

var DropdownSelect = function DropdownSelect(props) {
  var required = props.required,
      inlineLabel = props.inlineLabel,
      helperText = props.helperText,
      helperTextPlacement = props.helperTextPlacement,
      tooltipTitle = props.tooltipTitle,
      tooltipContent = props.tooltipContent;

  function determinePadding(error) {
    if (error) {
      return calculateRem(12, 44, 9, 12);
    } else {
      return calculateRem(12, 44, 12, 12);
    }
  }

  return /*#__PURE__*/React.createElement(CoreDropdownSelect, _extends({}, props, {
    readOnlyBorders: true,
    hoverState: true,
    focusState: true,
    inputFontSize: true,
    overflowEllipsis: true,
    typescale: TypographyConfig.getTypescale(),
    minWidth: inlineLabel ? '103px' : '66px',
    maxWidth: "596px",
    height: calculateRem(44),
    selectPadding: determinePadding(props.error),
    labelMarginBottom: calculateSpacing('1X'),
    errorLabelSpacing: calculateSpacing('2X'),
    iconConfig: IconData,
    color: colors,
    required: required,
    bodyConfig: BodyConfig,
    helperText: helperText,
    helperTextPlacement: helperTextPlacement,
    Tooltip: Tooltip,
    tooltipTitle: tooltipTitle,
    tooltipContent: tooltipContent,
    Body: Body,
    Micro: Micro
  }));
};

DropdownSelect.propTypes = propTypes;
DropdownSelect.defaultProps = defaultProps;
export default DropdownSelect;