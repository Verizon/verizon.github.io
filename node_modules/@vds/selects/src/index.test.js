import React from 'react';
import { fireEvent, render } from '@testing-library/react';
import {
  DropdownSelectMarketing,
  DropdownMarketingOption,
  DropdownSelect,
} from '.';

const sizes = ['small', 'medium', 'normal', 'large'];
jest.mock('cuid', () => () => 'asdf2134');
/********************************
// DROPDOWNSELECTMARKETING TESTS
*********************************/

test('<DropdownSelectMarketing>', async () => {
  const mockOnSelect = jest.fn();

  const { getByText, queryByText } = render(
    <DropdownSelectMarketing label="TEST DROPDOWN">
      <DropdownMarketingOption onSelect={mockOnSelect}>
        {'Item 1'}
      </DropdownMarketingOption>
      <DropdownMarketingOption onSelect={() => alert('Item 2 Clicked')}>
        {'Item 2'}
      </DropdownMarketingOption>
      <DropdownMarketingOption onSelect={() => alert('Item 3 Clicked')}>
        {'Item 3'}
      </DropdownMarketingOption>
    </DropdownSelectMarketing>
  );
  const dropdownTrigger = getByText('TEST DROPDOWN');

  // DropdownTrigger should be rendered and DropdownItems should not be
  expect(dropdownTrigger).not.toBe(null);
  expect(queryByText('Item 1')).toBe(null);

  // first DropdownMarketingOption should exists after trigger is clicked
  fireEvent.click(dropdownTrigger);
  expect(getByText('Item 1')).not.toBe(null);

  // onSelect handler should be called when DropdownMarketingOption clicked
  // and then DropdownMenu should be closed
  fireEvent.click(getByText('Item 1'));
  expect(mockOnSelect).toHaveBeenCalledTimes(1);
  expect(queryByText('Item 1')).toBe(null);

  // DropdownItems should toggle between "open" and "closed" when
  // DropdownTrigger is clicked
  fireEvent.click(dropdownTrigger);
  expect(getByText('Item 1')).not.toBe(null);
  fireEvent.click(dropdownTrigger);
  expect(queryByText('Item 1')).toBe(null);
});

test('<DropdownSelectMarketing - error>', async () => {
  const mockOnSelect = jest.fn();

  const { getByText, queryByText } = render(
    <DropdownSelectMarketing
      error
      errorMsg="Hello World"
      size="large"
      width="136px"
      errorText="Hello World"
      label="TEST DROPDOWN"
    >
      <DropdownMarketingOption onSelect={mockOnSelect}>
        {'Item 1'}
      </DropdownMarketingOption>
      <DropdownMarketingOption onSelect={() => alert('Item 2 Clicked')}>
        {'Item 2'}
      </DropdownMarketingOption>
      <DropdownMarketingOption onSelect={() => alert('Item 3 Clicked')}>
        {'Item 3'}
      </DropdownMarketingOption>
    </DropdownSelectMarketing>
  );
  const dropdownTrigger = getByText('TEST DROPDOWN');

  // DropdownTrigger should be rendered and DropdownItems should not be
  expect(dropdownTrigger).not.toBe(null);
  expect(queryByText('Item 1')).toBe(null);

  // first DropdownMarketingOption should exists after trigger is clicked
  fireEvent.click(dropdownTrigger);
  expect(getByText('Item 1')).not.toBe(null);

  // onSelect handler should be called when DropdownMarketingOption clicked
  // and then DropdownMenu should be closed
  fireEvent.click(getByText('Item 1'));
  expect(mockOnSelect).toHaveBeenCalledTimes(1);
  expect(queryByText('Item 1')).toBe(null);

  // DropdownItems should toggle between "open" and "closed" when
  // DropdownTrigger is clicked
  fireEvent.click(dropdownTrigger);
  expect(getByText('Item 1')).not.toBe(null);
  fireEvent.click(dropdownTrigger);
  expect(queryByText('Item 1')).toBe(null);
});

test('<DropdownSelectMarketing size errors', () => {
  sizes.forEach(size => {
    const { queryByText } = render(
      <DropdownSelectMarketing
        error
        label={`Test ${size} Error DropdownSelectMarketing`}
        size={size}
      >
        <DropdownMarketingOption
          onSelect={() => alert(`${size} Error 1 Clicked`)}
        >
          {size + 'Error Item 1'}
        </DropdownMarketingOption>
        <DropdownMarketingOption
          onSelect={() => alert(`${size} Error 2 Clicked`)}
        >
          {size + 'Error Item 2'}
        </DropdownMarketingOption>
        <DropdownMarketingOption
          onSelect={() => alert(`${size} Error 3 Clicked`)}
        >
          {size + 'Error Item 3'}
        </DropdownMarketingOption>
      </DropdownSelectMarketing>
    );

    // DropdownSelectMarketing should be rendered and DropdownItems should be
    const dropdown = queryByText(`Test ${size} Error DropdownSelectMarketing`);
    expect(dropdown).not.toBe(null);

    // All DropdownMarketingOption's should exists after dropdown is clicked
    fireEvent.click(dropdown);
  });
});

/***************************
// DROPDOWNSELECT TESTS
***************************/

describe('<DropdownSelect />', () => {
  test('should render default DropdownSelect', () => {
    const { container } = render(
      <DropdownSelect>
        <option>Choose an animal</option>
        <option>Kitten</option>
        <option>Puppy</option>
        <option>Piglet</option>
        <option>Fawn</option>
        <option>Spider Hatchling</option>
      </DropdownSelect>
    );

    expect(container.firstChild).toMatchSnapshot();
  });

  test('should render disabled state DropdownSelect', () => {
    const { container } = render(
      <DropdownSelect>
        <option>Choose an animal</option>
        <option>Kitten</option>
        <option>Puppy</option>
        <option>Piglet</option>
        <option>Fawn</option>
        <option>Spider Hatchling</option>
      </DropdownSelect>
    );

    expect(container.firstChild).toMatchSnapshot();
  });
});

// test('<DropdownSelect />', () => {
//   const { getByTestId, queryAllByText } = render(
//     <DropdownSelect data-testid="select">
//       <option>Option</option>
//       <option>Option</option>
//     </DropdownSelect>
//   );

//   let selectItem = getByTestId('select');
//   expect(selectItem.getAttribute('role')).toBe('combobox');

//   // expect number of options to be 2
//   const options = queryAllByText('Option');
//   expect(options).toHaveLength(2);
// });

// test('<DropdownSelect disabled /> ', () => {
//   const { getByTestId } = render(
//     <DropdownSelect disabled data-testid="select">
//       <option>Option</option>
//       <option>Option</option>
//     </DropdownSelect>
//   );

//   const selectItem = getByTestId('select');

//   expect(selectItem.getAttribute('role')).toBe('combobox');
//   // Expect DropdownSelect to have attribute disabled=""
//   expect(selectItem.getAttribute('disabled')).toBe('');
// });
