import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { calculateRem } from '@uie/javascript-style-helpers';
import { colors, calculateSpacing } from '@vds/theme';
import { IconData } from '@vds/icons';
import { DropdownSelectMarketing as CoreDropdownSelectMarketing } from '@vds-core/selects';
import { BodyConfig, TitleConfig, TypographyConfig } from '@vds/typography';

const propTypes = {
  /**
   * @ignore
   */
  color: PropTypes.object,
  /**
   * @ignore
   */
  typescale: PropTypes.string, // string that sets the typescale for the typography (example: typescale === 'VDS')
  /**
   * @ignore
   */
  bodyConfig: PropTypes.object, // config for body typography
  /**
   * @ignore
   */
  titleConfig: PropTypes.object, // config for title typography
  /**
   * @ignore
   */
  iconActiveState: PropTypes.bool, // if true, the caret-down icon changes to caret-up if this.state.open is also true
  /**
   * @ignore
   */
  calculateErrorLabelSpacing: PropTypes.func, // calculates the margin on top of the error text
  /**
   * @ignore
   */
  calculateIconSpacing: PropTypes.func, // calculates the padding next to the icon
  /**
   * @ignore
   */
  hitArea: PropTypes.bool, // adds additional hit area to the trigger
  /**
   * @ignore
   */
  triggerPaddingBottom: PropTypes.string, // used to set padding underneath the trigger
  /**
   * @ignore
   */
  calculateListItemHeight: PropTypes.func, // function that calculates the height of the drop down list item
  /**
   * @ignore
   */
  calculateListItemPadding: PropTypes.func, // function that calculates the padding inside of each list item
  /**
   * @ignore
   */
  hoverState: PropTypes.bool, // boolean that, if true, changes the hover states
  /**
   * @ignore
   */
  focusState: PropTypes.bool, // boolean that, if true, changes the focus states
  /**
   * @ignore
   */
  iconConfig: PropTypes.object, // passes through data for icons
};

const defaultProps = {};

const DropdownSelectMarketing = props => {
  function _calculateListItemHeight(size) {
    if (size === 'small') {
      return calculateRem(44);
    } else return calculateRem(56);
  }

  function _calculateIconSpacing() {
    return calculateSpacing('4X');
  }

  function _calculateListItemPadding(size, viewport) {
    if (viewport === 'mobile') {
      if (size === 'small') {
        return calculateRem(14, 12);
      } else return calculateRem(16, 12);
    } else return calculateRem(11, 12);
  }

  function _calculateErrorLabelSpacing() {
    return calculateRem(4);
  }

  return (
    <CoreDropdownSelectMarketing
      {...props}
      hitArea
      hoverState
      focusState
      iconActiveState
      typescale={TypographyConfig.getTypescale()}
      iconConfig={IconData}
      color={colors}
      bodyConfig={BodyConfig}
      titleConfig={TitleConfig}
      triggerPaddingBottom={calculateSpacing('1X')}
      calculateErrorLabelSpacing={_calculateErrorLabelSpacing}
      calculateIconSpacing={_calculateIconSpacing}
      calculateListItemHeight={_calculateListItemHeight}
      calculateListItemPadding={_calculateListItemPadding}
    />
  );
};

DropdownSelectMarketing.propTypes = propTypes;
DropdownSelectMarketing.defaultProps = defaultProps;

export default DropdownSelectMarketing;
