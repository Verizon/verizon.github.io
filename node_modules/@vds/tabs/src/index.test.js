import React, { Fragment } from 'react';
import { render, fireEvent } from '@testing-library/react';
import { Tabs, Tab, TabButton } from '.';

global.uniqueId = 100000;

jest.mock('cuid', () => () => `${++global.uniqueId}`);

describe('<Tabs>', () => {
  // TESTS

  test('should render and match snapshot', () => {
    // Set the global uniqueId for cuid() to prevent Snapshot failures
    global.uniqueId = 100000;

    const { container } = render(
      <Tabs>
        <Tab label="Hello">
          <h3 className="Hello">Hello</h3>
        </Tab>
        <Tab label="Goodbye">
          <h3 className="Goodbye">Goodbye</h3>
        </Tab>
      </Tabs>
    );

    expect(container.firstChild).toMatchSnapshot();
  });

  test('should render no accent fill/top border', () => {
    // Set the global uniqueId for cuid() to prevent Snapshot failures
    global.uniqueId = 100000;

    const { container } = render(
      <Tabs borderPosition="top">
        <Tab label="Hello" accentFill={false}>
          <h3 className="Hello">Hello</h3>
        </Tab>
        <Tab label="Goodbye">
          <h3 className="Goodbye">Goodbye</h3>
        </Tab>
      </Tabs>
    );

    expect(container.firstChild).toMatchSnapshot();
  });

  test('should render TabButton', () => {
    const { container } = render(<TabButton accentFill label="hello world" />);

    fireEvent.click(container.firstChild);
    expect(container.firstChild).toMatchSnapshot();
  });

  // test('should render with first tab active and content displayed', () => {
  //   const mountedDom = mount(
  //     <Tabs>
  //       <Tab label="Hello">
  //         <h3 className="Hello">Hello</h3>
  //       </Tab>
  //       <Tab label="Goodbye">
  //         <h3 className="Goodbye">Goodbye</h3>
  //       </Tab>
  //     </Tabs>
  //   );

  //   expectOnlyActivePanelIsVisible(mountedDom, 0);
  //   expectOnlyActiveTabSelected(mountedDom, 0);
  // });

  // test('should render with specified tab active and content displayed', () => {
  //   const mountedDom = mount(
  //     <Tabs activeTabIndex={1}>
  //       <Tab label="Hello">
  //         <h3 className="Hello">Hello</h3>
  //       </Tab>
  //       <Tab label="Goodbye">
  //         <h3 className="Goodbye">Goodbye</h3>
  //       </Tab>
  //     </Tabs>
  //   );

  //   expectOnlyActivePanelIsVisible(mountedDom, 1);
  //   expectOnlyActiveTabSelected(mountedDom, 1);
  // });

  // test('should change active tab and display content on click–without specified tab', () => {
  //   const mountedDom = mount(
  //     <Tabs>
  //       <Tab label="Hello">
  //         <h3 className="Hello">Hello</h3>
  //       </Tab>
  //       <Tab label="Goodbye">
  //         <h3 className="Goodbye">Goodbye</h3>
  //       </Tab>
  //     </Tabs>
  //   );

  //   // First Tab should be selected and first panel should be shown
  //   expectOnlyActivePanelIsVisible(mountedDom, 0);
  //   expectOnlyActiveTabSelected(mountedDom, 0);

  //   mountedDom
  //     .find('Tab')
  //     .last()
  //     .simulate('click');

  //   // Second Tab should be selected and second panel should be shown
  //   // After the previous click
  //   expectOnlyActivePanelIsVisible(mountedDom, 1);
  //   expectOnlyActiveTabSelected(mountedDom, 1);
  // });

  // test('should change active tab and display content on click–with specified tab', () => {
  //   const mountedDom = mount(
  //     <Tabs activeTabIndex={1}>
  //       <Tab label="Hello">
  //         <h3 className="Hello">Hello</h3>
  //       </Tab>
  //       <Tab label="Goodbye">
  //         <h3 className="Goodbye">Goodbye</h3>
  //       </Tab>
  //     </Tabs>
  //   );

  //   // Second Tab should be selected and second panel should be shown
  //   expectOnlyActivePanelIsVisible(mountedDom, 1);
  //   expectOnlyActiveTabSelected(mountedDom, 1);

  //   mountedDom
  //     .find('Tab')
  //     .first()
  //     .simulate('click');

  //   // first Tab should be selected and first panel should be shown
  //   // After the previous click
  //   expectOnlyActivePanelIsVisible(mountedDom, 0);
  //   expectOnlyActiveTabSelected(mountedDom, 0);
  // });
});

// const isPanelHidden = (wrapper, panel) => {
//   const searchFor = `${panel}`;
//   expect(
//     wrapper
//       .find(searchFor)
//       .filter('div')
//       .html()
//       .replace(/\s*/g, '')
//   ).toMatch(/aria-hidden="true"/);
//   expect(
//     wrapper
//       .find(searchFor)
//       .filter('div')
//       .html()
//       .replace(/\s*/g, '')
//   ).toMatch(/display:none/);
// };

// const isPanelVisible = (wrapper, panel) => {
//   const searchFor = `${panel}`;
//   expect(
//     wrapper
//       .find(searchFor)
//       .filter('div')
//       .html()
//       .replace(/\s*/g, '')
//   ).toMatch(/aria-hidden="false"/);
//   expect(
//     wrapper
//       .find(searchFor)
//       .filter('div')
//       .html()
//       .replace(/\s*/g, '')
//   ).not.toMatch(/display:none/);
// };

// // Accepts an Enzyme shallow wrapper, and an index equal to 0 or 1
// const expectOnlyActivePanelIsVisible = (wrapper, index) => {
//   const panels = ['#panelHello', '#panelGoodbye'];

//   if (index >= panels.length) {
//     throw Error(
//       `expectContentVisibleInPanel expected an index < ${panels.length}`
//     );
//   }

//   // Tested that the provided panel is visible
//   panels.forEach((panelName, i) => {
//     if (i === index) {
//       isPanelVisible(wrapper, panels[index]);
//     } else {
//       isPanelHidden(wrapper, panels[i]);
//     }
//   });
// };

// // Tabs
// const hasTabActiveProps = (wrapper, index) => {
//   // Can't inspect the element itself it's too deep in the Virtual DOM Tree
//   const ii = index;
//   const elements = wrapper
//     .find('ul')
//     .children()
//     .getElements();

//   return elements[index].props.isActive;
// };

// // Accepts an Enzyme shallow wrapper, and an index equal to 0 or 1
// const expectOnlyActiveTabSelected = (wrapper, index) => {
//   const tabs = [0, 1];

//   if (index >= tabs.length) {
//     throw Error(
//       `expectContentVisibleIntab expected an index < ${tabs.length}`
//     );
//   }

//   // Tested that the provided tab is visible
//   tabs.forEach((tabName, i) => {
//     if (i === index) {
//       expect(hasTabActiveProps(wrapper, i)).toBe(true);
//     } else {
//       expect(hasTabActiveProps(wrapper, i)).toBe(false);
//     }
//   });
// };

test('<Tabs/>', () => {
  const { getByText } = render(
    <Tabs>
      <Tab label="Tab1">
        <h2>Tab 1 content</h2>
      </Tab>
      <Tab label="Tab2">
        <h2>Tab 2 content</h2>
      </Tab>
      <Tab label="Tab3">
        <h2>Tab 3 content</h2>
      </Tab>
    </Tabs>
  );

  // Expect 3 tabs, each tab is li and content for each
  expect(document.querySelectorAll('li').length).toBe(3);

  // Expect the first tab to be the selected tab.
  expect(
    document.querySelector('li').firstChild.getAttribute('aria-selected')
  ).toBe('true');

  // Expect 3 labelled content divs, one not hidden
  expect(getByText('Tab 1 content')).toBeTruthy();
  // expect(
  //   getByText('Tab 1 content').parentElement.getAttribute('aria-labelledby')
  // ).toBe('Tab1');
  // expect(
  //   getByText('Tab 1 content').parentElement.getAttribute('aria-hidden')
  // ).toBe('false');
  // expect(getByText('Tab 2 content')).toBeTruthy();
  // expect(
  //   getByText('Tab 2 content').parentElement.getAttribute('aria-labelledby')
  // ).toBe('Tab2');
  // expect(
  //   getByText('Tab 2 content').parentElement.getAttribute('aria-hidden')
  // ).toBe('true');
  // expect(getByText('Tab 3 content')).toBeTruthy();
  // expect(
  //   getByText('Tab 3 content').parentElement.getAttribute('aria-labelledby')
  // ).toBe('Tab3');
  // expect(
  //   getByText('Tab 3 content').parentElement.getAttribute('aria-hidden')
  // ).toBe('true');

  // Click on the second tab
  fireEvent.click(document.querySelectorAll('li')[1]);
  expect(
    getByText('Tab 1 content').parentElement.getAttribute('aria-hidden')
  ).toBe('true');
  expect(
    getByText('Tab 2 content').parentElement.getAttribute('aria-hidden')
  ).toBe('false');
});

test('<Tabs /> activeTabIndex', () => {
  const { getByText } = render(
    <Tabs activeTabIndex={1}>
      <Tab label="Tab1">
        <h2>Tab 1 content</h2>
      </Tab>
      <Tab label="Tab2">
        <h2>Tab 2 content</h2>
      </Tab>
      <Tab label="Tab3">
        <h2>Tab 3 content</h2>
      </Tab>
    </Tabs>
  );

  // Expect second tab to be 'selected'
  expect(
    document.querySelectorAll('li')[1].firstChild.getAttribute('aria-selected')
  ).toBe('true');

  // Expect only the second tab to show content
  expect(
    getByText('Tab 1 content').parentElement.getAttribute('aria-hidden')
  ).toBe('true');
  expect(
    getByText('Tab 2 content').parentElement.getAttribute('aria-hidden')
  ).toBe('false');
  expect(
    getByText('Tab 3 content').parentElement.getAttribute('aria-hidden')
  ).toBe('true');
});

test('<Tab /> isActive override activeTabIndex', () => {
  const { getByText } = render(
    <Tabs activeTabIndex={0}>
      <Tab label="Tab1">
        <h2>Tab 1 content</h2>
      </Tab>
      <Tab label="Tab2" isActive>
        <h2>Tab 2 content</h2>
      </Tab>
      <Tab label="Tab3">
        <h2>Tab 3 content</h2>
      </Tab>
    </Tabs>
  );

  // Expect first tab NOT to be 'selected'
  expect(
    document.querySelectorAll('li')[0].firstChild.getAttribute('aria-selected')
  ).toBe('false');
  // Expect second tab to be 'selected'
  expect(
    document.querySelectorAll('li')[1].firstChild.getAttribute('aria-selected')
  ).toBe('true');

  // Expect only the second tab to show content
  expect(
    getByText('Tab 1 content').parentElement.getAttribute('aria-hidden')
  ).toBe('true');
  expect(
    getByText('Tab 2 content').parentElement.getAttribute('aria-hidden')
  ).toBe('false');
  expect(
    getByText('Tab 3 content').parentElement.getAttribute('aria-hidden')
  ).toBe('true');
});

test('<Tab /> isActive change updates Active Tab', () => {
  const { getByText, rerender } = render(
    <Tabs activeTabIndex={0}>
      <Tab label="Tab1">
        <h2>Tab 1 content</h2>
      </Tab>
      <Tab label="Tab2">
        <h2>Tab 2 content</h2>
      </Tab>
      <Tab label="Tab3">
        <h2>Tab 3 content</h2>
      </Tab>
    </Tabs>
  );

  // Expect first tab is 'selected'
  expect(
    document.querySelectorAll('li')[0].firstChild.getAttribute('aria-selected')
  ).toBe('true');

  // Set isActive on 2nd Tab
  rerender(
    <Tabs activeTabIndex={1}>
      <Tab label="Tab1">
        <h2>Tab 1 content</h2>
      </Tab>
      <Tab label="Tab2" isActive>
        <h2>Tab 2 content</h2>
      </Tab>
      <Tab label="Tab3">
        <h2>Tab 3 content</h2>
      </Tab>
    </Tabs>
  );

  // Expect first tab NOT to be 'selected'
  expect(
    document.querySelectorAll('li')[0].firstChild.getAttribute('aria-selected')
  ).toBe('false');
  // Expect second tab to be 'selected'
  expect(
    document.querySelectorAll('li')[1].firstChild.getAttribute('aria-selected')
  ).toBe('true');

  // Expect only the second tab to show content
  expect(
    getByText('Tab 1 content').parentElement.getAttribute('aria-hidden')
  ).toBe('true');
  expect(
    getByText('Tab 2 content').parentElement.getAttribute('aria-hidden')
  ).toBe('false');
  expect(
    getByText('Tab 3 content').parentElement.getAttribute('aria-hidden')
  ).toBe('true');
});

test('<Tab /> hide a Tab', () => {
  const { getByText, rerender } = render(
    <Tabs activeTabIndex={1}>
      <Tab label="Tab1">
        <h2>Tab 1 content</h2>
      </Tab>
      <Tab label="Tab2" hide={0}>
        <h2>Tab 2 content</h2>
      </Tab>
      <Tab label="Tab3">
        <h2>Tab 3 content</h2>
      </Tab>
    </Tabs>
  );

  // Set hide = 2 on 2nd Tab
  rerender(
    <Tabs activeTabIndex={1}>
      <Tab label="Tab1">
        <h2>Tab 1 content</h2>
      </Tab>
      <Tab label="Tab2" hide={2}>
        <h2>Tab 2 content</h2>
      </Tab>
      <Tab label="Tab3">
        <h2>Tab 3 content</h2>
      </Tab>
    </Tabs>
  );

  // Expect 2 tabs, each tab is li and content for each
  expect(document.querySelectorAll('li').length).toBe(2);

  // Expect first tab NOT to be 'selected'
  expect(
    document.querySelectorAll('li')[0].firstChild.getAttribute('aria-selected')
  ).toBe('false');
  // Expect third tab to be 'selected'.  Note: Checking Tab[1] because Tab 1 was hidden, which means it won't be rendered by React
  expect(
    document.querySelectorAll('li')[1].firstChild.getAttribute('aria-selected')
  ).toBe('true');

  // Expect only the second tab to show content
  expect(
    getByText('Tab 1 content').parentElement.getAttribute('aria-hidden')
  ).toBe('true');
  expect(
    getByText('Tab 2 content').parentElement.getAttribute('aria-hidden')
  ).toBe('true');
  expect(
    getByText('Tab 3 content').parentElement.getAttribute('aria-hidden')
  ).toBe('false');
});

test('<Tab/> should handle <Fragments/> when present in Render Tree', () => {
  // Set the global uniqueId for cuid() to prevent Snapshot failures
  global.uniqueId = 100000;

  const { container, getByText, rerender } = render(
    <Tabs>
      <Fragment>
        <Tab label="Tab1">
          <h2>Tab 1 content</h2>
        </Tab>
      </Fragment>
      <Fragment>
        <Tab label="Tab2">
          <h2>Tab 2 content</h2>
        </Tab>
      </Fragment>
      <Fragment>
        <Tab label="Tab3">
          <h2>Tab 3 content</h2>
        </Tab>
      </Fragment>
    </Tabs>
  );

  expect(container.firstChild).toMatchSnapshot();

  // Set hide = 2 on 2nd Tab
  rerender(
    <Tabs activeTabIndex={1}>
      <Fragment>
        <Tab label="Tab1">
          <h2>Tab 1 content</h2>
        </Tab>
      </Fragment>
      <Fragment>
        <Tab label="Tab2" hide={2}>
          <h2>Tab 2 content</h2>
        </Tab>
      </Fragment>
      <Fragment>
        <Tab label="Tab3">
          <h2>Tab 3 content</h2>
        </Tab>
      </Fragment>
    </Tabs>
  );

  // Expect 2 tabs, each tab is li and content for each
  expect(document.querySelectorAll('li').length).toBe(2);

  // Expect first tab NOT to be 'selected'
  expect(
    document.querySelectorAll('li')[0].firstChild.getAttribute('aria-selected')
  ).toBe('false');
  // Expect third tab to be 'selected'.  Note: Checking Tab[1] because Tab 1 was hidden, which means it won't be rendered by React
  expect(
    document.querySelectorAll('li')[1].firstChild.getAttribute('aria-selected')
  ).toBe('true');

  // Expect only the second tab to show content
  expect(
    getByText('Tab 1 content').parentElement.getAttribute('aria-hidden')
  ).toBe('true');
  expect(
    getByText('Tab 2 content').parentElement.getAttribute('aria-hidden')
  ).toBe('true');
  expect(
    getByText('Tab 3 content').parentElement.getAttribute('aria-hidden')
  ).toBe('false');
});

test('<Tabs/> should update tab label content when passed new props', () => {
  // Set the global uniqueId for cuid() to prevent Snapshot failures
  global.uniqueId = 100000;

  const { container, rerender } = render(
    <Tabs>
      <Fragment>
        <Tab label="Tab1">
          <h2>Tab 1 content</h2>
        </Tab>
      </Fragment>
      <Fragment>
        <Tab label="Tab2">
          <h2>Tab 2 content</h2>
        </Tab>
      </Fragment>
      <Fragment>
        <Tab label="Tab3">
          <h2>Tab 3 content</h2>
        </Tab>
      </Fragment>
    </Tabs>
  );

  expect(container.querySelectorAll('button').length).toBe(3);
  const buttonOne = container.querySelectorAll('button')[0];
  expect(buttonOne).toHaveTextContent('Tab1');

  expect(container.querySelectorAll('h2').length).toBe(3);
  const headingTwo = container.querySelectorAll('h2')[1];
  expect(headingTwo).toHaveTextContent('Tab 2 content');

  rerender(
    <Tabs activeTabIndex={1} tabChange={() => {}}>
      <Fragment>
        <Tab label="New Tab1">
          <h2>Tab 1 content</h2>
        </Tab>
      </Fragment>
      <Fragment>
        <Tab label="Tab2">
          <h2>New Tab 2 content</h2>
        </Tab>
      </Fragment>
      <Fragment>
        <Tab label="Tab3">
          <h2>Tab 3 content</h2>
        </Tab>
      </Fragment>
    </Tabs>
  );
  fireEvent.click(container.firstChild.firstChild.firstChild);
  expect(buttonOne).toHaveTextContent('New Tab1');
  expect(headingTwo).toHaveTextContent('New Tab 2 content');
});

test('<Tab/> - componentDidUpdate', () => {
  let testFn = jest.fn();
  const { container, rerender } = render(
    <Tab label="testTab" handleVisibilityChange={testFn} />
  );

  rerender(<Tab label="testTab" />);
});
