import React from 'react';
import { render, fireEvent } from '@testing-library/react';
import TextLink from './components/TextLink';
import TextLinkCaret from './components/TextLinkCaret';
import Button from './components/Button';
//import ButtonGroup from './components/ButtonGroup';

jest.mock('cuid', () => () => 1);

const onClick = jest.fn();

/************************
TextLink
/***********************/

test('<TextLink snapshot>', () => {
  const { container } = render(
    <TextLink href="www.verizon.com" onClick={onClick}>
      Call to action
    </TextLink>
  );

  fireEvent.click(container.firstChild);
  fireEvent.keyPress(container.firstChild, {
    key: 'Enter',
    code: 13,
    charCode: 13,
  });
  expect(container.firstChild).toMatchSnapshot();
});

/************************
Button / Primary / Secondary
/***********************/

// test('<Button> snapshot', () => {
//   const { container } = render(<Button onClick={onClick}>Click Me!</Button>);

//   expect(container.firstChild).toMatchSnapshot();
// });

// // test('<ButtonSecondary> snapshot', () => {
// //   const { container } = render(
// //     <ButtonSecondary size="small" width="100%" onClick={onClick}>
// //       Click Me!
// //     </ButtonSecondary>
// //   );

// //   expect(container.firstChild).toMatchSnapshot();
// // });

// test('<Button type="secondary"> snapshot', () => {
//   const { container } = render(
//     <Button type="secondary" onClick={onClick}>
//       Click Me!
//     </Button>
//   );

//   expect(container.firstChild).toMatchSnapshot();
// });

// // test('<ButtonPrimary> snapshot', () => {
// //   const { container } = render(
// //     <ButtonPrimary size="small" width={55} onClick={onClick}>
// //       Click Me!
// //     </ButtonPrimary>
// //   );

// //   expect(container.firstChild).toMatchSnapshot();
// // });

// test('<Button size="tiny"> snapshot', () => {
//   const { container } = render(
//     <Button size="tiny" onClick={onClick}>
//       Click Me!
//     </Button>
//   );

//   expect(container.firstChild).toMatchSnapshot();
// });

// test('<Button size="small"> snapshot', () => {
//   const { container } = render(
//     <Button size="small" onClick={onClick}>
//       Click Me!
//     </Button>
//   );

//   expect(container.firstChild).toMatchSnapshot();
// });

// test('<Button size="large"> snapshot', () => {
//   const { container } = render(
//     <Button size="large" onClick={onClick}>
//       Click Me!
//     </Button>
//   );

//   expect(container.firstChild).toMatchSnapshot();
// });

// test('<Button size="block"> snapshot', () => {
//   const { container } = render(
//     <Button size="block" onClick={onClick}>
//       Click Me!
//     </Button>
//   );
//   expect(container.firstChild).toMatchSnapshot();
// });

// test('<Button disabled> snapshot', () => {
//   const { container } = render(
//     <Button onClick={onClick} disabled>
//       Click Me!
//     </Button>
//   );

//   expect(container.firstChild).toMatchSnapshot();
// });

// test('<ButtonGroup> snapshot', () => {
//   const { container } = render(
//     <ButtonGroup
//       childWidth={'100%'}
//       viewport={'desktop'}
//       data={[
//         {
//           children: 'Submit',
//           type: 'primary',
//         },
//         {
//           children: 'Cancel',
//           type: 'secondary',
//         },
//       ]}
//     />
//   );

//   expect(container.firstChild).toMatchSnapshot();
// });

/************************
TextLinkCaret
/***********************/

test('<TextLinkCaret snapshot>', () => {
  const { container } = render(
    <TextLinkCaret onClick={onClick}>Call to action</TextLinkCaret>
  );

  expect(container.child).toMatchSnapshot();
});

test('<TextLinkCaret snapshot>', () => {
  const { container } = render(
    <TextLinkCaret onClick={onClick}>Call to action</TextLinkCaret>
  );
  fireEvent.click(container.firstChild);
  fireEvent.keyPress(container.firstChild, {
    key: 'Enter',
    code: 13,
    charCode: 13,
  });
  expect(container.child).toMatchSnapshot();
});

test('<TextLinkCaret inverse> snapshot', () => {
  const { container } = render(
    <TextLinkCaret inverted onClick={onClick}>
      Call to action
    </TextLinkCaret>
  );

  expect(container.child).toMatchSnapshot();
});

test('<TextLinkCaret inverse/disabled> snapshot', () => {
  const { container } = render(
    <TextLinkCaret inverted disabled onClick={onClick}>
      Call to action
    </TextLinkCaret>
  );

  expect(container.child).toMatchSnapshot();
});

test('<TextLinkCaret disabled> snapshot', () => {
  const { container } = render(
    <TextLinkCaret disabled onClick={onClick}>
      Call to action
    </TextLinkCaret>
  );

  expect(container.child).toMatchSnapshot();
});
