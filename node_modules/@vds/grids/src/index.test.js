import React from 'react';
import { render } from '@testing-library/react';
import { Grid, Row, Col } from '.';

const gutterTests = [undefined, 10, '{ "xs": 7, "md": 15 }'];

const maxWidthTests = [
  undefined,
  'xs',
  'sm',
  'md',
  'lg',
  'xl',
  1024,
  '768px',
  '38rem',
  '100%',
  '50%',
  null,
];

// -------------------------
// Test Basic Grid Props
// -------------------------
test('<Grid>', () => {
  const { container, getAllByText } = render(
    <Grid>
      <Col span="12">
        <div>12</div>
      </Col>
      <Col span="1">
        <div>1</div>
      </Col>
      <Col span="11">
        <div>11</div>
      </Col>
      <Col span="2">
        <div>2</div>
      </Col>
      <Col span="10">
        <div>10</div>
      </Col>
      <Col span="3">
        <div>3</div>
      </Col>
      <Col span="9">
        <div>9</div>
      </Col>
      <Col span="4">
        <div>4</div>
      </Col>
      <Col span="8">
        <div>8</div>
      </Col>
      <Col span="5">
        <div>5</div>
      </Col>
      <Col span="7">
        <div>7</div>
      </Col>
      <Col span="6">
        <div>6</div>
      </Col>
      <Col span="6">
        <div>6</div>
      </Col>
    </Grid>
  );

  expect(container.firstChild).toMatchSnapshot();
  // Expect 13 columns with corresponding text to be in right column
  expect(container.firstChild.childNodes.length).toBe(1);

  // Expect text content to be in appropriate col
  for (let text = 1; text < 13; text++) {
    expect(
      getAllByText(text.toString())[0].parentNode.getAttribute('span')
    ).toBe(text.toString());
  }
});

test('<Grid> vertical', () => {
  const { container } = render(
    <Grid vertical>
      <Row span="2">
        <Col span="1">
          <div>1</div>
        </Col>
        <Col span="2">
          <div>2</div>
        </Col>
      </Row>
      <Row align="center" span="2">
        <Col span="1">
          <div>1</div>
        </Col>
        <Col span="2">
          <div>2</div>
        </Col>
      </Row>
      <Row align="end" span="2">
        <Col span="1">
          <div>1</div>
        </Col>
        <Col span="2">
          <div>2</div>
        </Col>
      </Row>
    </Grid>
  );

  expect(container.firstChild).toMatchSnapshot();

  // Expect Grid to have 3 rows
  expect(container.firstChild.childNodes.length).toBe(1);

  // Expect each row to have 2 children aka 2 Col
  expect(container.firstChild.childNodes[0].childNodes.length).toBe(3);
});

test(`<Grid> test fixed size gutter`, () => {
  const gutter = '10px';

  const { container } = render(
    <div>
      <Grid gapless={false} gutter={gutter}>
        <Row gapless={false} gutter={gutter}>
          <Col gapless={false} gutter={gutter}>
            <div>{`Test fixed size gutter = "${gutter}"`}</div>
          </Col>
        </Row>
      </Grid>
    </div>
  );

  expect(container.firstChild).toMatchSnapshot();
});

test(`<Grid> rowGutter and colGutter`, () => {
  const rowGutter = '10px';
  const colGutter = '10px';

  const { container } = render(
    <div>
      <Grid colGutter={colGutter} gapless={false} rowGutter={rowGutter}>
        <Row>
          <Col>
            <div>{`Test rowGutter = "${rowGutter}" and colGutter ="${colGutter}"`}</div>
          </Col>
        </Row>
      </Grid>
    </div>
  );

  expect(container.firstChild).toMatchSnapshot();
});

test(`<Grid> rowGutter and colGutter override gutter`, () => {
  const gutter = '20px';
  const rowGutter = '10px';
  const colGutter = '15px';

  const { container } = render(
    <div>
      <Grid
        colGutter={colGutter}
        gapless={false}
        gutter={gutter}
        rowGutter={rowGutter}
      >
        <Row>
          <Col>
            <div>{`Test rowGutter = "${rowGutter}" and colGutter = "${colGutter}" override gutter = "${gutter}`}</div>
          </Col>
        </Row>
      </Grid>
    </div>
  );

  expect(container.firstChild).toMatchSnapshot();
});

test(`<Grid> rowGutter and colGutter cascade override`, () => {
  const { container } = render(
    <div>
      <Grid colGutter="35" gapless={false} rowGutter="30">
        <Row rowGutter="20">
          <Col colGutter="15" rowGutter="10">
            <div>{`Test rowGutter and colGutter cascade override`}</div>
          </Col>
        </Row>
      </Grid>
    </div>
  );

  expect(container.firstChild).toMatchSnapshot();
});

test(`<Grid> test maxWidth`, () => {
  maxWidthTests.forEach(maxWidth => {
    const { container } = render(
      <div>
        <Grid maxWidth={maxWidth}>
          <Row>
            <Col>
              <div>{`Test maxWidth = "${maxWidth}"`}</div>
            </Col>
          </Row>
        </Grid>
      </div>
    );

    expect(container.firstChild).toMatchSnapshot();
  });
});

// -------------------------
// Test Responsive Grid features
// -------------------------
test('<Grid> with responsive Cols', () => {
  const { container } = render(
    <div>
      <Grid>
        <Row>
          <Col
            span={{
              xs: 12,
              sm: 10,
              md: 8,
              lg: 6,
              xl: 4,
            }}
          >
            <div>Responsive 12/10/8/6/4</div>
          </Col>
        </Row>
        <Row>
          <Col
            span={{
              xs: 12,
              sm: 6,
              md: 8,
              lg: 10,
            }}
          >
            <div>Responsive 12/6/8/10</div>
          </Col>
          <Col
            span={{
              xs: 12,
              sm: 6,
              md: 4,
              lg: 2,
            }}
          >
            <div>Responsive 12/6/4/2</div>
          </Col>
        </Row>
        <Row>
          <Col span={{ sm: 12, md: 6 }}>
            <div>Responsive 12/6</div>
          </Col>
          <Col span={{ sm: 12, md: 6 }}>
            <div>Responsive 12/6</div>
          </Col>
        </Row>
        <Row>
          <Col span="3">
            <div>Fixed 3</div>
          </Col>
        </Row>
        <Col>
          <div>Default 12</div>
        </Col>
      </Grid>
    </div>
  );

  expect(container.firstChild).toMatchSnapshot();
});

test('<Grid> vertical with responsive rows', () => {
  const { container } = render(
    <Grid vertical>
      <Row span={{ sm: 2, md: 1 }}>
        <Col span="1">
          <div>1</div>
        </Col>
        <Col span="2">
          <div>2</div>
        </Col>
      </Row>
      <Row align="center" span={{ sm: 2, md: 1 }}>
        <Col span="1">
          <div>1</div>
        </Col>
        <Col span="2">
          <div>2</div>
        </Col>
      </Row>
      <Row align="end" span={{ sm: 2, md: 1 }}>
        <Col span="1">
          <div>1</div>
        </Col>
        <Col span="2">
          <div>2</div>
        </Col>
      </Row>
    </Grid>
  );

  expect(container.firstChild).toMatchSnapshot();
});

// -------------------------
// Test Legacy Mode with Responsive Grid features
// -------------------------
test('<Grid> legacyMode with responsive Cols', () => {
  const { container } = render(
    <div>
      <Grid legacyMode>
        <Row>
          <Col
            span={{
              xs: 12,
              sm: 10,
              md: 8,
              lg: 6,
              xl: 4,
            }}
          >
            <div>Responsive 12/10/8/6/4</div>
          </Col>
        </Row>
        <Row>
          <Col
            span={{
              xs: 12,
              sm: 6,
              md: 8,
              lg: 10,
            }}
          >
            <div>Responsive 12/6/8/10</div>
          </Col>
          <Col
            span={{
              xs: 12,
              sm: 6,
              md: 4,
              lg: 2,
            }}
          >
            <div>Responsive 12/6/4/2</div>
          </Col>
        </Row>
        <Row>
          <Col span={{ sm: 12, md: 6 }}>
            <div>Responsive 12/6</div>
          </Col>
          <Col span={{ sm: 12, md: 6 }}>
            <div>Responsive 12/6</div>
          </Col>
        </Row>
        <Row>
          <Col span="3">
            <div>Fixed 3</div>
          </Col>
        </Row>
        <Col>
          <div>Default 12</div>
        </Col>
      </Grid>
    </div>
  );

  expect(container.firstChild).toMatchSnapshot();
});

test(`<Grid> test gutter`, () => {
  gutterTests.forEach(gutter => {
    const { container } = render(
      <div>
        <Grid gutter={gutter}>
          <Row gutter={gutter}>
            <Col gutter={gutter}>
              <div>{`Test gutter = "${gutter}"`}</div>
            </Col>
          </Row>
        </Grid>
      </div>
    );

    expect(container.firstChild).toMatchSnapshot();
  });
});

// -------------------------------
// Test Props Validations
// -------------------------------
test(`<Grid> test span as number Col < 1 or > 12`, () => {
  global.console = { log: jest.fn(), warn: jest.fn(), error: jest.fn() };
  const consoleSpy = jest.spyOn(global.console, 'error');

  render(
    <Grid>
      <Row>
        <Col span={20}>
          <div>Test invalid Col span as number</div>
        </Col>
      </Row>
    </Grid>
  );
});

test(`<Grid> test invalid Col span, unknown type`, () => {
  global.console = { error: jest.fn() };
  const consoleSpy = jest.spyOn(global.console, 'error');

  render(
    <Grid>
      <Row>
        <Col span="blah">
          <div>Test invalid Col span, unknown type</div>
        </Col>
      </Row>
    </Grid>
  );
});

test(`<Grid> test invalid Col span, bad object`, () => {
  global.console = { error: jest.fn() };
  const consoleSpy = jest.spyOn(global.console, 'error');

  render(
    <Grid>
      <Row>
        <Col span={{ sm: 'blah' }}>
          <div>Test invalid Col span, bad object</div>
        </Col>
      </Row>
    </Grid>
  );
});

test(`<Grid> test vertical missing height`, () => {
  global.console = { error: jest.fn() };
  const consoleSpy = jest.spyOn(global.console, 'error');

  render(
    <Grid height="" vertical>
      <Row>
        <Col>
          <div>Test vertical missing height</div>
        </Col>
      </Row>
    </Grid>
  );
});
