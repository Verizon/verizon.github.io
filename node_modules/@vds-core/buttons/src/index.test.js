import React from 'react';
import { render, fireEvent, getByTestId } from '@testing-library/react';
import TextLink from './components/TextLink';
import TextLinkCaret from './components/TextLinkCaret';
import Button from './components/Button';
import ButtonGroup from './components/ButtonGroup';

jest.mock('cuid', () => () => 1);

const onClick = jest.fn();

/************************
TextLink
/***********************/

test('<TextLink snapshot>', () => {
  const { container } = render(
    <TextLink
      href="www.verizon.com"
      onClick={onClick}
      type="inline"
      focusState={true}
      size="small"
    >
      Call to action
    </TextLink>
  );

  fireEvent.click(container.firstChild);
  fireEvent.keyPress(container.firstChild, {
    key: 'Enter',
    code: 13,
    charCode: 13,
  });
  fireEvent.keyPress(container.firstChild, {
    key: 'Spacebar',
    code: 33,
    charCode: 33,
  });
  fireEvent.keyPress(container.firstChild, {
    key: 'Space',
    code: 32,
    charCode: 32,
  });
  fireEvent.mouseDown(container.firstChild);

  // expect(container.firstChild).toMatchSnapshot();
});

test('<TextLink snapshot>', () => {
  const { container } = render(
    <TextLink
      href="www.verizon.com"
      onClick={onClick}
      type="standAlone"
      focusState={false}
      size="large"
    >
      Call to action
    </TextLink>
  );
});

/************************
Button / Primary / Secondary
/***********************/

test('<Button> snapshot', () => {
  const { container, getByTestId } = render(
    <Button data-testid="button" onClick={onClick}>
      Click Me!
    </Button>
  );

  const button = getByTestId('button');
  fireEvent.click(button);

  // expect(container.firstChild).toMatchSnapshot();
});

test('<ButtonSecondary> snapshot', () => {
  const { container } = render(
    <Button secondary size="small" width="100%" onClick={onClick}>
      Click Me!
    </Button>
  );

  // expect(container.firstChild).toMatchSnapshot();
});

test('<Button type="secondary"> snapshot', () => {
  const { container } = render(
    <Button secondary onClick={onClick}>
      Click Me!
    </Button>
  );

  // expect(container.firstChild).toMatchSnapshot();
});

test('<ButtonPrimary> snapshot', () => {
  const { container } = render(
    <Button size="small" width={55} onClick={onClick}>
      Click Me!
    </Button>
  );

  // expect(container.firstChild).toMatchSnapshot();
});

test('<Button size="small"> snapshot', () => {
  const { container } = render(
    <Button primary size="small" onClick={onClick}>
      Click Me!
    </Button>
  );

  // expect(container.firstChild).toMatchSnapshot();
});

test('<Button size="large"> snapshot', () => {
  const { container } = render(
    <Button primary size="large" onClick={onClick} width="autoTight">
      Click Me!
    </Button>
  );

  // expect(container.firstChild).toMatchSnapshot();
});

test('<Button disabled> snapshot', () => {
  const { container } = render(
    <Button primary onClick={onClick} disabled>
      Click Me!
    </Button>
  );

  // expect(container.firstChild).toMatchSnapshot();
});

test('<Button width> snapshot', () => {
  const { container } = render(
    <Button primary onClick={onClick} size="small" width="autoTight">
      Click Me!
    </Button>
  );
});

test('<Button block> snapshot', () => {
  const { container } = render(
    <Button primary onClick={onClick} size="block">
      Click Me!
    </Button>
  );
});

test('<Button tiny> snapshot', () => {
  const { container } = render(
    <Button primary onClick={onClick} size="tiny">
      Click Me!
    </Button>
  );
});

/************************
ButtonGroup
/***********************/

test('<ButtonGroup> snapshot', () => {
  const { container, getByText } = render(
    <ButtonGroup
      childWidth={'100%'}
      viewport={'desktop'}
      data={[
        {
          children: 'Submit',
          size: 'large',
          type: 'primary',
        },
        {
          children: 'Cancel',
          size: 'small',
          type: 'secondary',
        },
      ]}
    />
  );

  // expect(container.firstChild).toMatchSnapshot();
});

// childWidth prop in px
test('<ButtonGroup> snapshot', () => {
  const { container } = render(
    <ButtonGroup
      childWidth={'300px'}
      viewport={'desktop'}
      data={[
        {
          children: 'Submit',
          size: '',
          type: 'primary',
        },
        {
          children: 'Cancel',
          type: 'secondary',
        },
      ]}
    />
  );
});

test('<ButtonGroup> snapshot', () => {
  const { container } = render(
    <ButtonGroup
      childWidth={'300px'}
      viewport={'desktop'}
      data={[
        {
          children: 'Submit',
          size: 'large',
          type: '',
        },
        {
          children: 'Cancel',
          size: 'small',
          type: '',
        },
      ]}
    />
  );
});

/************************
TextLinkCaret
/***********************/

test('<TextLinkCaret snapshot>', () => {
  const { container } = render(
    <TextLinkCaret onClick={onClick}>Call to action</TextLinkCaret>
  );

  // expect(container.child).toMatchSnapshot();
});

test('<TextLinkCaret snapshot>', () => {
  const { container } = render(
    <TextLinkCaret onClick={onClick}>Call to action</TextLinkCaret>
  );
  fireEvent.click(container.firstChild);
  fireEvent.keyPress(container.firstChild, {
    key: 'Enter',
    code: 13,
    charCode: 13,
  });
  fireEvent.keyPress(container.firstChild, {
    key: 'Spacebar',
    code: 33,
    charCode: 33,
  });
  fireEvent.keyPress(container.firstChild, {
    key: 'Space',
    code: 32,
    charCode: 32,
  });
  // expect(container.child).toMatchSnapshot();
});

test('<TextLinkCaret inverse> snapshot', () => {
  const { container } = render(
    <TextLinkCaret inverted onClick={onClick}>
      Call to action
    </TextLinkCaret>
  );

  // expect(container.child).toMatchSnapshot();
});

test('<TextLinkCaret inverse/disabled> snapshot', () => {
  const { container } = render(
    <TextLinkCaret
      inverted
      disabled
      onClick={onClick}
      ariaLabel="Call to Action"
    >
      Call to action
    </TextLinkCaret>
  );

  // expect(container.child).toMatchSnapshot();
});

test('<TextLinkCaret disabled> snapshot', () => {
  const { container } = render(
    <TextLinkCaret disabled onClick={onClick}>
      Call to action
    </TextLinkCaret>
  );

  fireEvent.click(container.firstChild);
  fireEvent.keyPress(container.firstChild, {
    key: 'Enter',
    code: 13,
    charCode: 13,
  });
  // expect(container.child).toMatchSnapshot();
});

test('<TextLinkCaret typescale> snapshot', () => {
  const { container } = render(
    <TextLinkCaret typescale="VDS" onClick={onClick}>
      Call to action
    </TextLinkCaret>
  );
});

test('<TextLinkCaret iconPosition> snapshot', () => {
  const { container } = render(
    <TextLinkCaret iconPosition="" onClick={onClick}>
      Call to action
    </TextLinkCaret>
  );
});

test('<TextLinkCaret iconPosition> snapshot', () => {
  const { container } = render(
    <TextLinkCaret
      iconPosition="left"
      padding="6px"
      useIcon={true}
      onClick={onClick}
    >
      Call to action
    </TextLinkCaret>
  );
});

test('<TextLinkCaret iconPosition> snapshot', () => {
  const { container } = render(
    <TextLinkCaret
      iconPosition="right"
      padding="6px"
      useIcon={true}
      onClick={onClick}
    >
      Call to action
    </TextLinkCaret>
  );
});

test('VDS Button', () => {
  const { container } = render(
    <Button
      hitArea
      hoverState
      focusState
      activeState
      overflowEllipsis
      calculateFontWeight={700}
      smallButtonPadding={false}
    >
      test
    </Button>
  );
});

// test('VDS ButtonGroup', () => {
//   const { container } = render(
//     <ButtonGroup
//       renderButton='primary'
//       maxWidth="596px"
//       smallButtonSpacing="4X"
//     />
//   );
// });

test('<VDS TextLinkCaret', () => {
  const { container } = render(
    <TextLinkCaret
      useIcon
      calculateFontWeight={700}
      padding={0}
      hitArea
      hoverState
      focusState
      activeState
    >
      Call to action
    </TextLinkCaret>
  );
});

test('<VDS TextLink', () => {
  const { container } = render(
    <TextLink focusState hitArea>
      Call to action
    </TextLink>
  );
});
