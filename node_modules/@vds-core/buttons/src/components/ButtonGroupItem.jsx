import React from 'react';
import styled from 'styled-components';
import PropTypes from 'prop-types';
import { calculateRem } from '@uie/javascript-style-helpers';
import { calculateSpacing } from '@vds-core/theme';
import Button from './Button';
import TextLink from './TextLink';
import TextLinkCaret from './TextLinkCaret';

function _onClick(e, onClick) {
  if (e.detail !== 0) {
    onClick && onClick(e);
    e.target.blur();
  } else if (e.type === 'click') {
    onClick && onClick(e);
  }
}

function _renderButton(props) {
  const { type, children, size, width, onClick, dataLoc } = props;
  if (type === 'primary') {
    return (
      <Button
        {...props}
        primary
        style={{ maxWidth: '100%' }}
        ariaLabel={children}
        children={children}
        size={size}
        width={size !== 'small' && '100%'}
        onClick={e => _onClick(e, onClick)}
        dataLoc={dataLoc}
      />
    );
  } else if (type === 'secondary') {
    return (
      <Button
        {...props}
        secondary
        style={{ maxWidth: '100%' }}
        ariaLabel={children}
        children={children}
        size={size}
        width={size !== 'small' && '100%'}
        onClick={e => _onClick(e, onClick)}
        dataLoc={dataLoc}
      />
    );
  }
}

const propTypes = {
  children: PropTypes.string,
  rowQuantity: PropTypes.number,
  size: PropTypes.oneOf(['large', 'small']),
  type: PropTypes.oneOf(['primary', 'secondary', 'textlink', 'textlinkcaret']),
  width: PropTypes.string,
  index: PropTypes.number,
  noVerticalPadding: PropTypes.bool,
  smallButtonSpacing: PropTypes.string,
  renderButton: PropTypes.func,
};

const defaultProps = {
  rowQuantity: 3,
  size: 'large',
  type: 'primary',
  noVerticalPadding: false,
  renderButton: _renderButton,
};

const BUTTON_GAP_LG = '3X';
const BUTTON_GAP_SM = '2X';
const TEXTLINK_HORIZONTAL_GAP_LG = 24;
const TEXTLINK_HORIZONTAL_GAP_SM = 16;

function _calculateSpacing(size, type, rowQuantity, index) {
  if (rowQuantity === 1) {
    return 0;
  }

  if (size === 'large' && (type === 'primary' || type === 'secondary')) {
    return calculateSpacing(BUTTON_GAP_LG, 'px');
  } else if (size === 'large') {
    return calculateRem(TEXTLINK_HORIZONTAL_GAP_LG);
  }

  if (size === 'small' && (type === 'primary' || type === 'secondary')) {
    return calculateSpacing(BUTTON_GAP_SM, 'px');
  } else if (size === 'large') {
    return calculateRem(TEXTLINK_HORIZONTAL_GAP_SM);
  }
}

const createPaddingStyles = props => {
  const { size, type, firstChild, rowQuantity, index } = props;
  let paddingBottom;
  let paddingRight;

  switch (size) {
    case 'large':
      paddingBottom = calculateSpacing(BUTTON_GAP_LG, 'px');
      paddingRight = _calculateSpacing('large', type, rowQuantity, index);
      break;
    case 'small':
      paddingBottom = calculateSpacing(props.smallButtonSpacing, 'px');
      paddingRight = _calculateSpacing('small', type, rowQuantity, index);
      break;
    default:
      paddingBottom = 0;
      paddingRight = 0;
      break;
  }

  let paddingStyles = `
    padding-bottom: ${paddingBottom};
    padding-right: ${paddingRight};
  `;
  return paddingStyles;
};

const ButtonWrapper = styled.div`
  ${props => createPaddingStyles(props)}
  box-sizing: border-box;
  width: ${props => (props.size === 'small' ? 'auto' : props.flexBasis)};
  flex-shrink: 1;
  outline: none;
  ${({ noVerticalPadding }) =>
    noVerticalPadding &&
    `
    padding-bottom: 0px;
  `}
  &:last-child {
    padding-bottom: ${({ rowQuantity }) => rowQuantity === 1 && 0}px;
  }
`;

const ButtonGroupItem = props => {
  const {
    children,
    rowQuantity: rowQuantityProp,
    size,
    type,
    width,
    onClick,
    index,
    noVerticalPadding,
    smallButtonSpacing,
    renderButton,
  } = props;
  var buttonsPerRow = rowQuantityProp;
  var flexBasis = buttonsPerRow ? 100 / buttonsPerRow + '%' : '100%';

  return (
    <ButtonWrapper
      index={index}
      rowQuantity={buttonsPerRow}
      flexBasis={flexBasis}
      size={size}
      type={type}
      width={width}
      noVerticalPadding={noVerticalPadding}
      smallButtonSpacing={smallButtonSpacing}
    >
      {renderButton(props)}
      {type === 'textlink' && (
        <TextLink
          {...props}
          style={{ maxWidth: '100%' }}
          ariaLabel={children}
          children={children}
          size={size}
          type="standAlone"
          width={width}
          onClick={_onClick}
        />
      )}
      {type === 'textlinkcaret' && (
        <TextLinkCaret
          {...props}
          style={{ maxWidth: '100%' }}
          ariaLabel={children}
          children={children}
          iconPosition="right"
          size={size}
          width={width}
          onClick={_onClick}
        />
      )}
    </ButtonWrapper>
  );
};

ButtonGroupItem.propTypes = propTypes;
ButtonGroupItem.defaultProps = defaultProps;

export default ButtonGroupItem;
