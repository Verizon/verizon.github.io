"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _javascriptStyleHelpers = require("@uie/javascript-style-helpers");

var _typography = require("@vds-core/typography");

var _theme = require("@vds-core/theme");

function _templateObject3() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  padding: 0;\n  border-radius: ", ";\n  border-width: ", ";\n  box-sizing: border-box;\n  cursor: pointer;\n  display: ", ";\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  font-family: ", ";\n  font-size: ", ";\n  font-weight: ", ";\n  line-height: ", ";\n  letter-spacing: ", ";\n  height: ", ";\n  position: relative;\n  text-align: center;\n  text-decoration: none;\n  touch-action: manipulation;\n  vertical-align: middle;\n  width: auto;\n  overflow: visible;\n  &:active,\n  &:visited {\n    outline: none;\n  }\n  * {\n    pointer-events: none;\n  }\n\n  &:hover,\n  &:active,\n  &.is-active,\n  &.link.active,\n  &.link.hover,\n  &.link:active,\n  &.link:hover {\n    text-decoration: none;\n  }\n\n  ", ";\n"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  position: relative;\n  border: none;\n  overflow: hidden;\n  box-sizing: border-box;\n  display: block;\n  align-items: center;\n  background: transparent;\n  justify-content: ", ";\n  text-overflow: ", ";\n  ", ";\n  &:hover {\n    outline: none;\n    border: none;\n  }\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  height: ", ";\n  width: 100%;\n  left: 50%;\n  position: absolute;\n  transform: translate(-50%, -50%);\n  text-align: center;\n  top: 50%;\n  content: '';\n  display: inline-block;\n  &:hover {\n    cursor: pointer;\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _calculateButtonHeight(size) {
  var height;

  if (size === 'small') {
    height = (0, _javascriptStyleHelpers.calculateRem)(24);
  } else {
    height = (0, _javascriptStyleHelpers.calculateRem)(42);
  }

  return height;
}

function _calculateSideMargin(size, width) {
  var sideMargin;

  if (size === 'small') {
    sideMargin = width === 'autoTight' ? 12 : 24;
  } else {
    sideMargin = width === 'autoTight' ? 21 : 42;
  }

  return (0, _javascriptStyleHelpers.calculateRem)(sideMargin);
}

var fontWeightStrong = 750;
var propTypes = {
  /** String value for inner button text. */
  children: _propTypes["default"].oneOfType([_propTypes["default"].node, _propTypes["default"].string]),

  /** Button will be disabled if disabled prop is passed. */
  disabled: _propTypes["default"].bool,

  /** Function for handling click events */
  onClick: _propTypes["default"].func,

  /** The size of the button. */
  size: _propTypes["default"].oneOf(['normal', 'tiny', 'small', 'large', 'block']),

  /** does the button have a fixed or variable width */
  width: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]),

  /** DEPRECATED SIZES: normal, tiny, block **/
  display: _propTypes["default"].oneOf(['flex', 'inline-block', 'block']),
  ariaLabel: _propTypes["default"].string,

  /**
   * @ignore
  Object containg font styles, including font-size, line-height, and font-family */
  bodyConfig: _propTypes["default"].object,

  /**
   * @ignore
  Typescale of button text */
  typescale: _propTypes["default"].string,

  /**
   * @ignore
  Object containing colors in hex */
  colorConfig: _propTypes["default"].object,

  /**
   * @ignore
  Boolean that turns on new focus state */
  focusState: _propTypes["default"].bool,

  /**
   * @ignore
  Boolean that turns on new hover state */
  hoverState: _propTypes["default"].bool,

  /**
   * @ignore
  Boolean that turns on new active state */
  activeState: _propTypes["default"].bool,

  /**
   * @ignore
  Boolean that activates hit area */
  hitArea: _propTypes["default"].bool,

  /**
   * @ignore
  Prop that determines Button height */
  calculateButtonHeight: _propTypes["default"].func,

  /**
   * @ignore
  Prop that determines the margin size on each side of text */
  calculateSideMargin: _propTypes["default"].func,

  /**
   * @ignore
  Boolean that turns on/off vertical padding on small button text */
  smallButtonPadding: _propTypes["default"].bool,

  /**
   * @ignore
  If provided, text will overflow with ellipsis */
  overflowEllipsis: _propTypes["default"].bool,

  /**
   * @ignore
  If provided, the number given will determine the font weight */
  calculateFontWeight: _propTypes["default"].number,

  /**
   * @ignore
   */
  dataLoc: _propTypes["default"].string
};
var defaultProps = {
  children: null,
  disabled: false,
  size: 'large',
  display: 'flex',
  width: 'auto',
  onClick: undefined,
  bodyConfig: _typography.TitleConfig,
  colorConfig: _theme.colors,
  hitArea: false,
  calculateButtonHeight: _calculateButtonHeight,
  calculateSideMargin: _calculateSideMargin,
  hoverState: false,
  smallButtonPadding: true,
  overflowEllipsis: false,
  calculateFontWeight: fontWeightStrong,
  typescale: _typography.TypographyConfig.getTypescale()
};
/**
 * @component
 * */

/*
fontWeightStrong represents the font weight found in 
typography used when the component is bolded. Font weight is
not exported by typography configs due to the fact that 
typography components may have multiple font weight options
*/

var HitArea = /*#__PURE__*/_styledComponents["default"].span.withConfig({
  displayName: "HitArea",
  componentId: "sc-1dtxg2w-0"
})(_templateObject(), (0, _javascriptStyleHelpers.calculateRem)(44));

var StyledChildWrapper = /*#__PURE__*/_styledComponents["default"].span.withConfig({
  displayName: "StyledChildWrapper",
  componentId: "sc-1dtxg2w-1"
})(_templateObject2(), function (_ref) {
  var width = _ref.width;
  return width ? 'flex-start' : 'center';
}, function (_ref2) {
  var overflowEllipsis = _ref2.overflowEllipsis;
  return overflowEllipsis && 'ellipsis';
}, function (_ref3) {
  var size = _ref3.size,
      width = _ref3.width,
      calculateSideMargin = _ref3.calculateSideMargin,
      smallButtonPadding = _ref3.smallButtonPadding;
  if (size === 'block') return "margin: auto";

  switch (size) {
    case 'tiny':
      return "\n          margin: ".concat((0, _javascriptStyleHelpers.calculateRem)(0, 13), ";\n        ");

    case 'small':
      return "\n          margin-right: ".concat(calculateSideMargin(size, width), ";\n          margin-left: ").concat(calculateSideMargin(size, width), ";\n          padding: ").concat(function (_ref4) {
        var smallButtonPadding = _ref4.smallButtonPadding;
        return smallButtonPadding ? (0, _javascriptStyleHelpers.calculateRem)(6.5, 0) : 0;
      }, ";\n        ");

    case 'block':
      return "\n          display: block;\n          width: 100%;\n          margin-right: ".concat((0, _javascriptStyleHelpers.calculateRem)(width === 'autoTight' ? 21 : 42), ";\n          margin-left: ").concat((0, _javascriptStyleHelpers.calculateRem)(width === 'autoTight' ? 21 : 42), ";\n        ");

    default:
      return "\n          margin-right: ".concat(calculateSideMargin(size, width), ";\n          margin-left: ").concat(calculateSideMargin(size, width), ";");
  }
});

var findWidth = function findWidth(width) {
  if (typeof width === 'string') return width;
  return (0, _javascriptStyleHelpers.calculateRem)(width);
};

var StyledButtonBase = /*#__PURE__*/_styledComponents["default"].button.withConfig({
  displayName: "StyledButtonBase",
  componentId: "sc-1dtxg2w-2"
})(_templateObject3(), (0, _javascriptStyleHelpers.calculateRem)(100), (0, _javascriptStyleHelpers.calculateRem)(1), function (_ref5) {
  var display = _ref5.display;
  return display;
}, function (_ref6) {
  var largeButtonText = _ref6.largeButtonText;
  return largeButtonText.fontFamily;
}, function (_ref7) {
  var largeButtonText = _ref7.largeButtonText;
  return (0, _javascriptStyleHelpers.calculateRem)(largeButtonText.fontSize);
}, function (_ref8) {
  var calculateFontWeight = _ref8.calculateFontWeight;
  return calculateFontWeight;
}, function (_ref9) {
  var largeButtonText = _ref9.largeButtonText;
  return (0, _javascriptStyleHelpers.calculateRem)(largeButtonText.lineHeight);
}, function (_ref10) {
  var largeButtonText = _ref10.largeButtonText,
      size = _ref10.size;
  return size === 'large' && (0, _javascriptStyleHelpers.calculateRem)(largeButtonText.letterSpacing);
}, function (_ref11) {
  var calculateButtonHeight = _ref11.calculateButtonHeight,
      size = _ref11.size;
  return calculateButtonHeight(size);
}, function (_ref12) {
  var size = _ref12.size,
      width = _ref12.width,
      smallButtonText = _ref12.smallButtonText;

  if (size === 'tiny') {
    return "\n        font-size: ".concat((0, _javascriptStyleHelpers.calculateRem)(smallButtonText.fontSize), ";\n        line-height: ").concat((0, _javascriptStyleHelpers.calculateRem)(smallButtonText.lineHeight), ";\n        font-family: ").concat(smallButtonText.fontFamily, ";\n      ");
  }

  if (size === 'small') {
    return "\n        font-size: ".concat((0, _javascriptStyleHelpers.calculateRem)(smallButtonText.fontSize), ";\n        line-height: ").concat((0, _javascriptStyleHelpers.calculateRem)(smallButtonText.lineHeight), ";\n        font-family: ").concat(smallButtonText.fontFamily, ";\n        width: ").concat(width ? findWidth(width) : 'auto', ";\n        white-space: nowrap;\n      ");
  }

  if (size === 'large') {
    return "\n        width: ".concat(width ? findWidth(width) : 'auto', ";\n        white-space: nowrap;\n      ");
  }

  if (size === 'block') {
    return "\n        display: block;\n        width: 100%;\n      ";
  }
});
/**
 * @ignore
 */


var ButtonBase = function ButtonBase(props) {
  var children = props.children,
      size = props.size,
      width = props.width,
      disabled = props.disabled,
      ariaLabel = props.ariaLabel,
      onClick = props.onClick,
      display = props.display,
      colorConfig = props.colorConfig,
      bodyConfig = props.bodyConfig,
      hitArea = props.hitArea,
      typescale = props.typescale,
      calculateButtonHeight = props.calculateButtonHeight,
      calculateSideMargin = props.calculateSideMargin,
      smallButtonPadding = props.smallButtonPadding,
      calculateFontWeight = props.calculateFontWeight,
      overflowEllipsis = props.overflowEllipsis,
      dataLoc = props.dataLoc;
  var largeButtonText, smallButtonText;
  largeButtonText = bodyConfig.getStyles(typescale, 'desktop', typescale === 'VDS' ? 'large' : 'extraSmall');
  smallButtonText = bodyConfig.getStyles(typescale, 'mobile', typescale === 'VDS' ? 'small' : 'extraSmall');
  var newAriaLabel = ariaLabel ? ariaLabel : typeof children === 'string' ? children : 'Button';

  function _onClick(e) {
    if (e.type !== 'click' && e.detail !== 0) {
      onClick(e);
      e.currentTarget.blur();
    } else if (e.type === 'click' && e.detail === 1 && !e.key && !e.keyCode) {
      onClick(e);
      e.currentTarget.blur();
    } else if (e.type === 'click') {
      onClick(e);
    }
  }

  return /*#__PURE__*/_react["default"].createElement(StyledButtonBase, (0, _extends2["default"])({}, props, {
    size: size,
    width: width,
    "aria-label": newAriaLabel,
    role: "button",
    "aria-disabled": props.disabled,
    tabIndex: 0,
    onClick: _onClick,
    display: display,
    largeButtonText: largeButtonText,
    smallButtonText: smallButtonText,
    colorConfig: colorConfig,
    disabled: disabled,
    calculateButtonHeight: calculateButtonHeight,
    calculateSideMargin: calculateSideMargin,
    calculateFontWeight: calculateFontWeight,
    "data-loc": dataLoc
  }), hitArea && !disabled && /*#__PURE__*/_react["default"].createElement(HitArea, {
    onClick: _onClick
  }), /*#__PURE__*/_react["default"].createElement(StyledChildWrapper, {
    display: display,
    size: size,
    width: width,
    overflowEllipsis: overflowEllipsis,
    calculateSideMargin: calculateSideMargin,
    smallButtonPadding: smallButtonPadding
  }, children));
};

ButtonBase.defaultProps = defaultProps;
ButtonBase.propTypes = propTypes;
/** @component */

var _default = ButtonBase;
exports["default"] = _default;