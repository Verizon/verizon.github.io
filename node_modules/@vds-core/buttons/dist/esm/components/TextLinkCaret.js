import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _extends from "@babel/runtime/helpers/extends";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

function _templateObject7() {
  var data = _taggedTemplateLiteral(["\n  pointer-events: none;\n  display: inline-flex;\n  position: relative;\n  height: ", ";\n  min-width: ", ";\n  padding-left: ", ";\n  padding-right: ", ";\n  svg {\n    position: relative;\n    top: ", ";\n  }\n"]);

  _templateObject7 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6() {
  var data = _taggedTemplateLiteral(["\n  display: inline-flex;\n  pointer-events: none;\n"]);

  _templateObject6 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5() {
  var data = _taggedTemplateLiteral(["\n  display: inline-block;\n  pointer-events: none;\n"]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteral(["\n  cursor: pointer;\n  display: inline-block;\n  height: ", ";\n  left: 50%;\n  position: absolute;\n  text-align: center;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  width: 100%;\n"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["\n  display: flex;\n  align-items: center;\n  pointer-events: none;\n"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n  position: relative;\n  width: fit-content;\n  display: flex;\n  align-items: ", ";\n  padding-left: ", ";\n  padding-right: ", ";\n  border: 0;\n  cursor: pointer;\n  background-image: none;\n  background-color: transparent;\n  text-decoration: none;\n  transition: opacity 0.15s ease-in;\n  touch-action: manipulation;\n  background-color: transparent;\n  align-content: center;\n  * {\n    mouse-events: none;\n    outline: none;\n  }\n  font-size: ", ";\n  font-family: ", ";\n  font-weight: ", ";\n  line-height: ", ";\n  letter-spacing: ", ";\n  font-style: normal;\n  color: ", ";\n\n  ", "\n\n  ", "\n\n  ", ";\n\n  ", ";\n\n  ", ";\n\n  ", ";\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  width: 100%;\n  height: 100%;\n  position: relative;\n  display: inline-flex;\n  &:focus {\n    outline: none;\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import React, { Fragment } from 'react';
import styled, { css } from 'styled-components';
import PropTypes from 'prop-types';
import { calculateRem } from '@uie/javascript-style-helpers';
import { TitleConfig, TypographyConfig } from '@vds-core/typography';
import { colors, calculateSpacing } from '@vds-core/theme';
import Icon, { IconData } from '@vds-core/icons';
var propTypes = {
  /**
   * Determines <strong>icon position</strong> of Caret.
   */
  iconPosition: PropTypes.oneOf(['left', 'right']),

  /**
   * Determines size of the text and icon.
   */
  size: PropTypes.oneOf(['large', 'small']),

  /**
   *  This function will be called when the Button is clicked. It will return an event.
   */
  onClick: PropTypes.func,

  /**
   *  This string will be applied to the href attribute.
   */
  href: PropTypes.string,

  /**
   *  Button will be <strong>disabled</strong> if disabled prop is passed.
   */
  disabled: PropTypes.bool,

  /**
   *  Button will be displayed in <strong>inverted</strong> colors if inverted prop is passed.
   */
  inverted: PropTypes.bool,

  /**
   * Item to render as text link.
   */
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),

  /**
   * If provided, used as string that labels the element for accessibility.
   */
  ariaLabel: PropTypes.string,

  /**
   * @ignore
  Font styles object of text containing font-size, line-height, font-family, and font-weight */
  fontConfig: PropTypes.object,

  /**
   * @ignore
  If passed, Icon component with new icon data will render */
  iconConfig: PropTypes.object,

  /**
   * @ignore
  Color object containing hex colors */
  colorConfig: PropTypes.object,

  /**
   * @ignore
  Boolean that turns on/off new hover styles */
  hoverState: PropTypes.bool,

  /**
   * @ignore
  Boolean that turns on/off new focus styles */
  focusState: PropTypes.bool,

  /**
   * @ignore
  Boolean that turns on/off new active styles */
  activeState: PropTypes.bool,

  /**
   * @ignore
  Boolean that turns on/off a hit area */
  hitArea: PropTypes.bool,

  /**
   * @ignore
  If passed, a new font weight will be passed to the text link text*/
  calculateFontWeight: PropTypes.number,

  /**
   * @ignore
  String that determines the typescale of the text link text */
  typescale: PropTypes.string,

  /**
   * @ignore
  Number that determines left or right padding on TextLinkCaret */
  padding: PropTypes.string,

  /**
   * Allows a string to be provided for analytics.
   */
  'data-analyticstrack': PropTypes.string,

  /**
   * Allows a string to be provided for analytics.
   */
  'data-track': PropTypes.string,

  /**
   * Allows a string to be provided for click stream.
   */
  'data-clickstream': PropTypes.string,

  /**
   * @ignore
   */
  dataLoc: PropTypes.string,

  /**
   * Allows a unique ID to be passed to the component.
   */
  id: PropTypes.string
};
var defaultProps = {
  iconPosition: 'right',
  size: 'large',
  disabled: false,
  inverted: false,
  onClick: function onClick() {},
  href: '',
  hoverState: false,
  focusState: false,
  activeState: false,
  fontConfig: TitleConfig,
  iconConfig: IconData,
  colorConfig: colors,
  hitArea: false,
  calculateFontWeight: undefined,
  typescale: TypographyConfig.getTypescale(),
  padding: '1X'
};
var Wrapper = /*#__PURE__*/styled.span.withConfig({
  displayName: "Wrapper",
  componentId: "sc-1ofvnb0-0"
})(_templateObject());
var StyledAnchor = /*#__PURE__*/styled.a.withConfig({
  displayName: "StyledAnchor",
  componentId: "sc-1ofvnb0-1"
})(_templateObject2(), function (_ref) {
  var iconPosition = _ref.iconPosition;
  return iconPosition && iconPosition === 'right' ? 'center' : 'flex-start';
}, function (_ref2) {
  var iconPosition = _ref2.iconPosition,
      padding = _ref2.padding;
  return iconPosition === 'left' && padding !== '0' ? calculateSpacing(padding) : 0;
}, function (_ref3) {
  var iconPosition = _ref3.iconPosition,
      padding = _ref3.padding;
  return iconPosition === 'right' && padding !== '0' ? calculateSpacing(padding) : 0;
}, function (_ref4) {
  var textLinkText = _ref4.textLinkText;
  return calculateRem(textLinkText.fontSize);
}, function (_ref5) {
  var textLinkText = _ref5.textLinkText;
  return textLinkText.fontFamily;
}, function (_ref6) {
  var textLinkText = _ref6.textLinkText,
      calculateFontWeight = _ref6.calculateFontWeight;
  return calculateFontWeight ? calculateFontWeight : textLinkText.fontWeight;
}, function (_ref7) {
  var textLinkText = _ref7.textLinkText;
  return calculateRem(textLinkText.lineHeight);
}, function (_ref8) {
  var textLinkText = _ref8.textLinkText;
  return textLinkText && textLinkText.letterSpacing && calculateRem(textLinkText.letterSpacing);
}, function (_ref9) {
  var colorConfig = _ref9.colorConfig;
  return colorConfig.black;
}, function (_ref10) {
  var inverted = _ref10.inverted,
      colorConfig = _ref10.colorConfig;
  return inverted && "\n    color: ".concat(colorConfig.white, ";\n    &:active {\n      opacity: 0.77;\n      transition: opacity .15s ease-out;\n    }\n  ");
}, function (_ref11) {
  var disabled = _ref11.disabled,
      colorConfig = _ref11.colorConfig;
  return disabled && "\n    pointer-events: none;\n    cursor: not-allowed;\n    color: ".concat(colorConfig.coolGray3, ";\n    &:hover {\n      background-color: transparent;\n    }\n  ");
}, function (_ref12) {
  var disabled = _ref12.disabled,
      inverted = _ref12.inverted,
      colorConfig = _ref12.colorConfig;
  return disabled && inverted && "\n    color: ".concat(colorConfig.coolGray10, ";\n  ");
}, function (_ref13) {
  var focusState = _ref13.focusState,
      colorConfig = _ref13.colorConfig,
      inverted = _ref13.inverted;
  return focusState && "\n     &:focus:not(:hover)  {\n      outline: none;\n      &::before {\n        border: ".concat(calculateRem(1), " dashed ").concat(inverted ? colorConfig.white : colorConfig.black, ";\n        content: '';\n        height: calc(100% + ").concat(calculateRem(6), ");\n        left: 50%;\n        position: absolute;\n        top: 50%;\n        transform: translate(-50%, -50%);\n        width: calc(100% + ").concat(calculateRem(6), ");\n      }\n    }\n    &:focus {\n      outline: none;\n    }\n  ");
}, function (_ref14) {
  var activeState = _ref14.activeState,
      colorConfig = _ref14.colorConfig;
  return activeState ? "\n      &:active {\n        outline: none;\n        color: ".concat(colorConfig.coolGray6, ";\n      }\n\n      &:active svg g path {\n        stroke: ").concat(colorConfig.coolGray6, ";\n      }\n    ") : "\n      &:active {\n        opacity: 0.77;\n        transition: opacity 0.15s ease-out;\n      }\n  ";
}, function (_ref15) {
  var hoverState = _ref15.hoverState,
      iconPosition = _ref15.iconPosition;
  return hoverState && " \n      svg {\n        left: 0;\n        transition: ease-in-out .350s;\n      }\n      &:hover {\n        outline: none;\n      }\n      &:hover svg {\n        position: relative;\n        left: ".concat(iconPosition === 'right' ? calculateSpacing('1X') : calculateRem(-4), ";\n        transition: left .350s ease-in-out;\n        transition-timing-function: cubic-bezier(0.22, 0.61, 0.36, 1.0);\n      }\n\n  ");
});
var ContentWrapper = /*#__PURE__*/styled.span.withConfig({
  displayName: "ContentWrapper",
  componentId: "sc-1ofvnb0-2"
})(_templateObject3());
var HitArea = /*#__PURE__*/styled.span.withConfig({
  displayName: "HitArea",
  componentId: "sc-1ofvnb0-3"
})(_templateObject4(), calculateRem(44));
var AnchorContentWrapper = /*#__PURE__*/styled.span.withConfig({
  displayName: "AnchorContentWrapper",
  componentId: "sc-1ofvnb0-4"
})(_templateObject5());
var TextWrapper = /*#__PURE__*/styled.span.withConfig({
  displayName: "TextWrapper",
  componentId: "sc-1ofvnb0-5"
})(_templateObject6());
var IconWrapper = /*#__PURE__*/styled.span.withConfig({
  displayName: "IconWrapper",
  componentId: "sc-1ofvnb0-6"
})(_templateObject7(), function (_ref16) {
  var textLinkText = _ref16.textLinkText;
  return textLinkText && calculateRem(textLinkText.lineHeight);
}, function (_ref17) {
  var typescale = _ref17.typescale;
  return typescale === 'VDS' ? calculateRem(12) : calculateRem(16);
}, function (_ref18) {
  var iconPosition = _ref18.iconPosition;
  return iconPosition === 'right' && calculateSpacing('1X');
}, function (_ref19) {
  var iconPosition = _ref19.iconPosition;
  return iconPosition === 'left' && calculateSpacing('1X');
}, function (_ref20) {
  var typescale = _ref20.typescale,
      iconPosition = _ref20.iconPosition;
  return iconPosition === 'right' ? typescale === 'VDS' ? '5px' : '-1px' : typescale === 'VDS' ? '4px' : '-2px';
});

function _encodeInline(color) {
  if (!color) return '%23000000';
  var splitHex = color.split('#')[1];
  return '%23' + splitHex;
}

function iconColor(disabled, inverted, colors) {
  if (inverted && disabled) return colors.coolGray10;else if (inverted && !disabled) return colors.white;else if (!inverted && disabled) return colors.coolGray3;else return colors.black;
}

function _getBodyStyles(_ref21) {
  var size = _ref21.size,
      typescale = _ref21.typescale,
      config = _ref21.config;
  var textLinkSize;

  switch (typescale) {
    case 'VDS':
      textLinkSize = size === 'small' ? 'small' : 'large';
      break;

    case 'MVP':
    default:
      textLinkSize = 'extraSmall';
      break;
  }

  return config.getStyles(typescale, 'desktop', textLinkSize);
}

function _formatChildren(childArray) {
  var textWithoutCaret = '';
  childArray.map(function (item, index) {
    if (index !== childArray.length - 1) {
      textWithoutCaret += item + ' ';
    }
  });
  return textWithoutCaret;
}

function checkForNode(children) {
  var lastIndex = children.length - 1,
      //number of last index in child array
  lastChild = children[lastIndex],
      //last child in child array
  isNode = typeof children[lastIndex] !== 'string',
      //if last child is node
  isString = typeof children === 'string',
      //if children are a string
  firstNodes = [];
  if (children.length === undefined || children.length <= 1) return {
    childArray: [],
    textWithCaret: children
  }; //if only one child put with caret and return

  if (isNode || !isString) {
    //if the last child is node or mixture put last with the caret
    children.map(function (child, index) {
      //add all children to first nodes except the last one
      if (index !== lastIndex) firstNodes[index] = child;
    });
    return {
      childArray: firstNodes,
      textWithCaret: lastChild
    };
  } //if all children are "strings", put last word with caret


  var childArray = children.split(' ');
  var textWithCaret = childArray[childArray.length - 1];
  return {
    childArray: _formatChildren(childArray),
    textWithCaret: textWithCaret
  };
}

function _renderWithIcon(props, textLinkText, color) {
  var iconConfig = props.iconConfig,
      iconPosition = props.iconPosition,
      colorConfig = props.colorConfig,
      typescale = props.typescale,
      children = props.children;
  var childArray = children ? checkForNode(children).childArray : [];
  var textWithCaret = children ? checkForNode(children).textWithCaret : '';
  return /*#__PURE__*/React.createElement(Fragment, null, iconPosition === 'left' && /*#__PURE__*/React.createElement(IconWrapper, {
    tabIndex: -1,
    iconPosition: iconPosition,
    typescale: typescale,
    textLinkText: textLinkText,
    "aria-hidden": true
  }, /*#__PURE__*/React.createElement(Icon, {
    name: "caret-".concat(iconPosition),
    size: typescale === 'VDS' ? 'extraSmall' : 'small',
    color: color,
    colorConfig: colorConfig,
    data: iconConfig,
    iconPosition: iconPosition,
    hasStroke: true,
    medium: true,
    tabIndex: -1,
    "aria-hidden": true
  })), /*#__PURE__*/React.createElement(AnchorContentWrapper, {
    tabIndex: -1
  }, childArray, /*#__PURE__*/React.createElement(TextWrapper, null, textWithCaret, iconPosition === 'right' && /*#__PURE__*/React.createElement(IconWrapper, {
    textLinkText: textLinkText,
    tabIndex: -1,
    typescale: typescale,
    iconPosition: iconPosition,
    "aria-hidden": true
  }, /*#__PURE__*/React.createElement(Icon, {
    name: "caret-".concat(iconPosition),
    size: typescale === 'VDS' ? 'extraSmall' : 'small',
    color: color,
    colorConfig: colorConfig,
    data: iconConfig,
    iconPosition: iconPosition,
    hasStroke: true,
    medium: true,
    tabIndex: -1,
    "aria-hidden": true
  })))));
}

var TextLinkCaret = function TextLinkCaret(props) {
  var iconPosition = props.iconPosition,
      size = props.size,
      fontConfig = props.fontConfig,
      colorConfig = props.colorConfig,
      typescale = props.typescale,
      hitArea = props.hitArea,
      hoverState = props.hoverState,
      focusState = props.focusState,
      activeState = props.activeState,
      calculateFontWeight = props.calculateFontWeight,
      padding = props.padding,
      dataLoc = props.dataLoc;
  var Typescale = typescale ? typescale : TypographyConfig.getTypescale();

  var textLinkText = _getBodyStyles({
    config: fontConfig,
    typescale: Typescale,
    size: size
  });

  var color = iconColor(props.disabled, props.inverted, colorConfig);
  return /*#__PURE__*/React.createElement(StyledAnchor, _extends({}, props, _defineProperty({
    "data-testid": "TextLinkCaret",
    "data-loc": dataLoc,
    href: props.href,
    disabled: props.disabled,
    inverted: props.inverted,
    theme: props.theme,
    role: "link",
    "aria-disabled": props.disabled,
    tabIndex: 0,
    "aria-label": props.ariaLabel ? props.ariaLabel : props.children && typeof props.children === 'string' ? props.children : 'Text Link Caret',
    hoverState: hoverState,
    focusState: focusState,
    activeState: activeState,
    iconPosition: iconPosition,
    padding: padding,
    textLinkText: textLinkText,
    colorConfig: colorConfig,
    calculateFontWeight: calculateFontWeight
  }, "tabIndex", props.disabled ? -1 : 0)), hitArea && /*#__PURE__*/React.createElement(HitArea, {
    tabIndex: -1
  }), /*#__PURE__*/React.createElement(Wrapper, {
    tabIndex: -1
  }, _renderWithIcon(props, textLinkText, color)));
};

TextLinkCaret.defaultProps = defaultProps;
TextLinkCaret.propTypes = propTypes;
export default TextLinkCaret;