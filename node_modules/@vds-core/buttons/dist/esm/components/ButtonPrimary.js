import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  background-color: ", ";\n  border: ", ";\n  span {\n    background: transparent;\n    border: none;\n  }\n  color: ", ";\n  ", ";\n  ", ";\n  ", ";\n\n  ", ";\n\n  ", ";\n\n  ", ";\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import styled from 'styled-components';
import PropTypes from 'prop-types';
import { calculateRem } from '@uie/javascript-style-helpers';
import ButtonBase from './ButtonBase';
import { colors } from '@vds-core/theme';
var propTypes = {
  /** String value for inner button text. */
  children: PropTypes.node,

  /** Button will be disabled if disabled prop is passed. */
  disabled: PropTypes.bool,

  /** Button text color and background will be swapped. */
  inverted: PropTypes.bool,

  /** Function for handling click event. */
  onClick: PropTypes.func,
  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /** The size of the button. */
  size: PropTypes.oneOf(['normal', 'tiny', 'small', 'large', 'block']),
  ariaLabel: PropTypes.string,

  /**
   * @ignore
  Object containg font styles, including font-size, line-height, and font-family */
  bodyConfig: PropTypes.object,

  /**
   * @ignore
  Typescale of button text */
  typescale: PropTypes.string,

  /**
   * @ignore
  Object containing colors in hex */
  colorConfig: PropTypes.object,

  /**
   * @ignore
  Boolean that turns on new focus state */
  focusState: PropTypes.bool,

  /**
   * @ignore
  Boolean that turns on new hover state */
  hoverState: PropTypes.bool,

  /**
   * @ignore
  Boolean that turns on new active state */
  activeState: PropTypes.bool,

  /**
   * @ignore
   */
  dataLoc: PropTypes.string
};
var defaultProps = {
  children: null,
  disabled: false,
  inverted: false,
  onClick: function onClick() {},
  size: 'large',
  colorConfig: colors,
  focusState: false,
  hoverState: false,
  activeState: false
};
/**
 * @ignore
 */

var ButtonPrimary = /*#__PURE__*/styled(ButtonBase).withConfig({
  displayName: "ButtonPrimary",
  componentId: "wdws40-0"
})(_templateObject(), function (_ref) {
  var colorConfig = _ref.colorConfig;
  return colorConfig.black;
}, function (_ref2) {
  var colorConfig = _ref2.colorConfig;
  return "".concat(calculateRem(1), " solid ").concat(colorConfig.black);
}, function (_ref3) {
  var colorConfig = _ref3.colorConfig;
  return colorConfig.white;
}, function (_ref4) {
  var activeState = _ref4.activeState,
      disabled = _ref4.disabled,
      colorConfig = _ref4.colorConfig;
  return activeState && !disabled && "\n      &:active {\n        border-color: ".concat(colorConfig.coolGray6, ";\n        box-shadow: 0 0 0 ").concat(calculateRem(1), " ").concat(colorConfig.coolGray6, ";\n        background-color: ").concat(colorConfig.coolGray6, ";\n      }\n    ");
}, function (_ref5) {
  var focusState = _ref5.focusState,
      disabled = _ref5.disabled,
      inverted = _ref5.inverted,
      colorConfig = _ref5.colorConfig;
  return focusState && !disabled && "\n      &::-moz-focus-inner {\n        border: 0;\n      }\n     &:focus:not(:hover):not(:active) {\n      outline: none;\n      &::before {\n        border: ".concat(calculateRem(1), " dashed ").concat(inverted ? colorConfig.white : colorConfig.black, ";\n        border-radius: ").concat(calculateRem(100), ";\n        content: '';\n        height: calc(100% + ").concat(calculateRem(6), ");\n        left: 50%;\n        position: absolute;\n        top: 50%;\n        transform: translate(-50%, -50%);\n        width: calc(100% + ").concat(calculateRem(6), ");\n      }\n    }\n    ");
}, function (_ref6) {
  var hoverState = _ref6.hoverState,
      colorConfig = _ref6.colorConfig,
      inverted = _ref6.inverted,
      disabled = _ref6.disabled;
  return hoverState && !disabled && "\n    &:hover:not(:active) {\n      outline: none;\n      box-shadow: 0 0 0 ".concat(calculateRem(1), " ").concat(inverted ? colorConfig.white : colorConfig.black, ";\n      transition: ease-out 0.1s;\n    }\n    &:hover:not(:active) span {\n      border: none;\n    }\n  ");
}, function (_ref7) {
  var inverted = _ref7.inverted,
      activeState = _ref7.activeState,
      colorConfig = _ref7.colorConfig;
  return inverted && "\n    background-color: ".concat(colorConfig.white, ";\n    border: ").concat(calculateRem(1), " solid ").concat(colorConfig.white, ";\n    color: ").concat(colorConfig.black, ";\n\n  ");
}, function (_ref8) {
  var disabled = _ref8.disabled,
      colorConfig = _ref8.colorConfig,
      activeState = _ref8.activeState;
  return disabled && "\n    background-color: ".concat(colorConfig.coolGray3, ";\n    border-color: ").concat(colorConfig.coolGray3, ";\n    cursor: default;\n  ");
}, function (_ref9) {
  var disabled = _ref9.disabled,
      inverted = _ref9.inverted,
      colorConfig = _ref9.colorConfig,
      activeState = _ref9.activeState;
  return disabled && inverted && "\n    background-color: ".concat(colorConfig.coolGray10, ";\n    border-color: ").concat(colorConfig.coolGray10, ";\n    color: ").concat(colorConfig.black, "\n  ");
});
ButtonPrimary.defaultProps = defaultProps;
ButtonPrimary.propTypes = propTypes;
/** @component */

export default ButtonPrimary;