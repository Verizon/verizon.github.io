import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
import _extends from "@babel/runtime/helpers/extends";

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  ", "\n  box-sizing: border-box;\n  width: ", ";\n  flex-shrink: 1;\n  outline: none;\n  ", "\n  &:last-child {\n    padding-bottom: ", "px;\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import React from 'react';
import styled from 'styled-components';
import PropTypes from 'prop-types';
import { calculateRem } from '@uie/javascript-style-helpers';
import { calculateSpacing } from '@vds-core/theme';
import Button from './Button';
import TextLink from './TextLink';
import TextLinkCaret from './TextLinkCaret';

function _onClick(e, onClick) {
  if (e.detail !== 0) {
    onClick && onClick(e);
    e.target.blur();
  } else if (e.type === 'click') {
    onClick && onClick(e);
  }
}

function _renderButton(props) {
  var type = props.type,
      children = props.children,
      size = props.size,
      width = props.width,
      _onClick2 = props.onClick,
      dataLoc = props.dataLoc;

  if (type === 'primary') {
    return /*#__PURE__*/React.createElement(Button, _extends({}, props, {
      primary: true,
      style: {
        maxWidth: '100%'
      },
      ariaLabel: children,
      children: children,
      size: size,
      width: size !== 'small' && '100%',
      onClick: function onClick(e) {
        return _onClick(e, _onClick2);
      },
      dataLoc: dataLoc
    }));
  } else if (type === 'secondary') {
    return /*#__PURE__*/React.createElement(Button, _extends({}, props, {
      secondary: true,
      style: {
        maxWidth: '100%'
      },
      ariaLabel: children,
      children: children,
      size: size,
      width: size !== 'small' && '100%',
      onClick: function onClick(e) {
        return _onClick(e, _onClick2);
      },
      dataLoc: dataLoc
    }));
  }
}

var propTypes = {
  children: PropTypes.string,
  rowQuantity: PropTypes.number,
  size: PropTypes.oneOf(['large', 'small']),
  type: PropTypes.oneOf(['primary', 'secondary', 'textlink', 'textlinkcaret']),
  width: PropTypes.string,
  index: PropTypes.number,
  noVerticalPadding: PropTypes.bool,
  smallButtonSpacing: PropTypes.string,
  renderButton: PropTypes.func
};
var defaultProps = {
  rowQuantity: 3,
  size: 'large',
  type: 'primary',
  noVerticalPadding: false,
  renderButton: _renderButton
};
var BUTTON_GAP_LG = '3X';
var BUTTON_GAP_SM = '2X';
var TEXTLINK_HORIZONTAL_GAP_LG = 24;
var TEXTLINK_HORIZONTAL_GAP_SM = 16;

function _calculateSpacing(size, type, rowQuantity, index) {
  if (rowQuantity === 1) {
    return 0;
  }

  if (size === 'large' && (type === 'primary' || type === 'secondary')) {
    return calculateSpacing(BUTTON_GAP_LG, 'px');
  } else if (size === 'large') {
    return calculateRem(TEXTLINK_HORIZONTAL_GAP_LG);
  }

  if (size === 'small' && (type === 'primary' || type === 'secondary')) {
    return calculateSpacing(BUTTON_GAP_SM, 'px');
  } else if (size === 'large') {
    return calculateRem(TEXTLINK_HORIZONTAL_GAP_SM);
  }
}

var createPaddingStyles = function createPaddingStyles(props) {
  var size = props.size,
      type = props.type,
      firstChild = props.firstChild,
      rowQuantity = props.rowQuantity,
      index = props.index;
  var paddingBottom;
  var paddingRight;

  switch (size) {
    case 'large':
      paddingBottom = calculateSpacing(BUTTON_GAP_LG, 'px');
      paddingRight = _calculateSpacing('large', type, rowQuantity, index);
      break;

    case 'small':
      paddingBottom = calculateSpacing(props.smallButtonSpacing, 'px');
      paddingRight = _calculateSpacing('small', type, rowQuantity, index);
      break;

    default:
      paddingBottom = 0;
      paddingRight = 0;
      break;
  }

  var paddingStyles = "\n    padding-bottom: ".concat(paddingBottom, ";\n    padding-right: ").concat(paddingRight, ";\n  ");
  return paddingStyles;
};

var ButtonWrapper = /*#__PURE__*/styled.div.withConfig({
  displayName: "ButtonWrapper",
  componentId: "mtl1r3-0"
})(_templateObject(), function (props) {
  return createPaddingStyles(props);
}, function (props) {
  return props.size === 'small' ? 'auto' : props.flexBasis;
}, function (_ref) {
  var noVerticalPadding = _ref.noVerticalPadding;
  return noVerticalPadding && "\n    padding-bottom: 0px;\n  ";
}, function (_ref2) {
  var rowQuantity = _ref2.rowQuantity;
  return rowQuantity === 1 && 0;
});

var ButtonGroupItem = function ButtonGroupItem(props) {
  var children = props.children,
      rowQuantityProp = props.rowQuantity,
      size = props.size,
      type = props.type,
      width = props.width,
      onClick = props.onClick,
      index = props.index,
      noVerticalPadding = props.noVerticalPadding,
      smallButtonSpacing = props.smallButtonSpacing,
      renderButton = props.renderButton;
  var buttonsPerRow = rowQuantityProp;
  var flexBasis = buttonsPerRow ? 100 / buttonsPerRow + '%' : '100%';
  return /*#__PURE__*/React.createElement(ButtonWrapper, {
    index: index,
    rowQuantity: buttonsPerRow,
    flexBasis: flexBasis,
    size: size,
    type: type,
    width: width,
    noVerticalPadding: noVerticalPadding,
    smallButtonSpacing: smallButtonSpacing
  }, renderButton(props), type === 'textlink' && /*#__PURE__*/React.createElement(TextLink, _extends({}, props, {
    style: {
      maxWidth: '100%'
    },
    ariaLabel: children,
    children: children,
    size: size,
    type: "standAlone",
    width: width,
    onClick: _onClick
  })), type === 'textlinkcaret' && /*#__PURE__*/React.createElement(TextLinkCaret, _extends({}, props, {
    style: {
      maxWidth: '100%'
    },
    ariaLabel: children,
    children: children,
    iconPosition: "right",
    size: size,
    width: width,
    onClick: _onClick
  })));
};

ButtonGroupItem.propTypes = propTypes;
ButtonGroupItem.defaultProps = defaultProps;
export default ButtonGroupItem;