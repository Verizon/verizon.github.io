import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  display: flex;\n  flex-wrap: wrap;\n  flex: 1;\n  max-width: ", ";\n  width: 100%;\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import * as React from 'react';
import { Fragment, Component } from 'react';
import { calculateRem } from '@uie/javascript-style-helpers';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import ButtonGroupItem from './ButtonGroupItem';
import { withVDSManager } from '@vds-core/utilities';
var propTypes = {
  /**
   * If provided, Button components will be rendered based on this data
   */
  data: PropTypes.array.isRequired,

  /**
   * If provided, width of Button components will be rendered based on this value. If omitted, default button widths are rendered.
   */
  childWidth: PropTypes.string,

  /**
   * An object containing number of Button components per row, in each viewport
   */
  rowQuantity: PropTypes.object,

  /**
   * Viewport the Buttons will be rendered in
   */
  viewport: PropTypes.oneOf(['desktop', 'tablet', 'mobile']),

  /**
   * @ignore
   * No vertical padding
   */
  noVerticalPadding: PropTypes.bool,

  /**
  * @ignore 
   If provided, the provided string will determine the spacing between small buttons
   */
  smallButtonSpacing: PropTypes.string,

  /**
  * @ignore
   If provided a max width of the provided string will be rendered.
  */
  maxWidth: PropTypes.string,

  /**
  * @ignore
   If provided a new Button component will render
  */
  renderButton: PropTypes.func,

  /**
   * @ignore
   */
  dataLoc: PropTypes.string
};
var defaultProps = {
  childWidth: '100%',
  viewport: 'desktop',
  noVerticalPadding: false,
  maxWidth: undefined,
  smallButtonSpacing: '2X'
};
var ButtonGroupWrapper = /*#__PURE__*/styled.div.withConfig({
  displayName: "ButtonGroupWrapper",
  componentId: "lt36ab-0"
})(_templateObject(), function (_ref) {
  var width = _ref.width,
      rowQuantity = _ref.rowQuantity;
  return rowQuantity !== 1 && width;
});

function _calculateWidth(childWidth, maxWidth) {
  var width;
  var maximum = parseInt(maxWidth);

  if (childWidth[childWidth.length - 1] === '%') {
    width = parseInt(childWidth) / 100;
    width = calculateRem(596 * width);
  } else if (childWidth && parseInt(childWidth) < maximum) {
    width = calculateRem(parseInt(childWidth));
  } else {
    width = calculateRem(maximum);
  }

  return width;
}

var ButtonGroup = /*#__PURE__*/function (_Component) {
  _inherits(ButtonGroup, _Component);

  var _super = _createSuper(ButtonGroup);

  function ButtonGroup() {
    var _this;

    _classCallCheck(this, ButtonGroup);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "_onClick", function (e, childClick) {
      childClick && childClick(e);
      _this.props.onClick && _this.props.onClick(e);
    });

    return _this;
  }

  _createClass(ButtonGroup, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          data = _this$props.data,
          childWidth = _this$props.childWidth,
          rowQuantityProp = _this$props.rowQuantity,
          viewport = _this$props.viewport,
          noVerticalPadding = _this$props.noVerticalPadding,
          smallButtonSpacing = _this$props.smallButtonSpacing,
          maxWidth = _this$props.maxWidth,
          renderButton = _this$props.renderButton,
          dataLoc = _this$props.dataLoc;
      var rowQuantityVal = rowQuantityProp ? rowQuantityProp[viewport] : data.length;
      return /*#__PURE__*/React.createElement(ButtonGroupWrapper, {
        childWidth: childWidth,
        viewport: viewport,
        maxWidth: maxWidth,
        width: _calculateWidth(childWidth, maxWidth),
        rowQuantity: rowQuantityVal
      }, data.map(function (child, index) {
        var children = child.children,
            size = child.size,
            type = child.type,
            width = child.width,
            noVerticalPadding = child.noVerticalPadding;
        var btnWidth = childWidth;
        btnWidth ? btnWidth : btnWidth = width;
        return /*#__PURE__*/React.createElement(Fragment, {
          key: index
        }, /*#__PURE__*/React.createElement(ButtonGroupItem, _extends({}, child, {
          children: children,
          rowQuantity: rowQuantityVal,
          size: size,
          type: type,
          width: btnWidth,
          onClick: function onClick(e) {
            return _this2._onClick(e, child.onClick);
          },
          index: index,
          noVerticalPadding: noVerticalPadding,
          smallButtonSpacing: smallButtonSpacing,
          renderButton: renderButton,
          dataLoc: dataLoc
        })));
      }));
    }
  }]);

  return ButtonGroup;
}(Component);

ButtonGroup.propTypes = propTypes;
ButtonGroup.defaultProps = defaultProps;
/** @component */

export default withVDSManager(ButtonGroup);