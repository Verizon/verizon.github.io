import * as React from 'react';
import { Component } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { colors } from '@vds-core/theme';

const propTypes = {
  /**
   * @ignore
   */
  fillPercentage: PropTypes.number,
  /**
   * @ignore
   */
  interval: PropTypes.number,
  /**
   * @ignore
   */
  viewport: PropTypes.string,
  /**
   * @ignore
   */
  inverted: PropTypes.bool,
};

const defaultProps = {
  viewport: 'desktop',
  interval: 1000,
  inverted: false,
};

class ProgressIndicator extends Component {
  constructor(props) {
    super(props);
    this.state = {
      progress: 0,
    };
  }

  componentDidMount() {
    this._startIndicator();
  }

  componentWillUnmount() {
    clearInterval();
  }

  _startIndicator = () => {
    setInterval(() => {
      if (this.state.progress === 100) this.setState({ progress: 0 });
      let newProgress;
      newProgress = ++this.state.progress;
      this.setState({
        progress: newProgress,
      });
    }, this.props.interval / 100);
  };

  _resetIndicator = () => {
    console.log('hit reset');
    this.setState({
      progress: 0,
    });
  };

  render() {
    const strokeWidth = 4;
    const size = this.props.viewport === 'mobile' ? 20 : 28;
    const radius = (size - strokeWidth) / 2;
    const viewBox = `0 0 ${size} ${size}`;
    const dashArray = radius * Math.PI * 2;
    const dashOffset = dashArray - (dashArray * this.state.progress) / 100;

    return (
      <svg width={size} height={size} viewBox={viewBox}>
        <circle
          stroke="transparent"
          fill="none"
          cx={size / 2}
          cy={size / 2}
          r={radius}
          strokeWidth={`${strokeWidth}px`}
        />
        <circle
          fill="none"
          stroke={this.props.inverted ? colors.white : colors.black}
          strokeLinecap="round"
          strokeLinejoin="round"
          cx={size / 2}
          cy={size / 2}
          r={radius}
          strokeWidth={`${strokeWidth}px`}
          transform={`rotate(-90 ${size / 2} ${size / 2})`}
          style={{
            strokeDasharray: dashArray,
            strokeDashoffset: dashOffset,
          }}
        />
      </svg>
    );
  }
}

ProgressIndicator.propTypes = propTypes;
ProgressIndicator.defaultProps = defaultProps;

export default ProgressIndicator;
