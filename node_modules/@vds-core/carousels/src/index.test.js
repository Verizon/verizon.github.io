import React from 'react';
import styled from 'styled-components';
import { render, fireEvent } from '@testing-library/react';
import CarouselBars from './components/CarouselBars';
import Carousel from './components/Carousel';
import CarouselWrapper from './components/CarouselWrapper';
import ProgressIndicator from './components/ProgressIndicator';

const TestItem = styled.div``;

describe('<CarouselBars />', () => {
  test('should render CarouselBars', () => {
    const activeSlide = 1;
    const { container } = render(
      <CarouselBars
        uniqueId="test-1"
        slideCount={4}
        activeSlide={activeSlide}
        goToSlide={() => {}}
      />
    );

    expect(document.querySelector('[aria-controls="test-1"]')).toBeTruthy();
    expect(container.firstChild).toMatchSnapshot();
  });

  test('should render CarouselBars for dark background', () => {
    const activeSlide = 1;
    const { container } = render(
      <CarouselBars
        uniqueId="test-2"
        slideCount={4}
        inverted={true}
        activeSlide={activeSlide}
        goToSlide={() => {}}
      />
    );
    expect(document.querySelector('[aria-selected="true"]')).toBeTruthy();
    expect(container.firstChild).toMatchSnapshot();
  });

  test('should render CarouselBars with second bar active', () => {
    const activeSlide = 2;
    const { container } = render(
      <CarouselBars
        uniqueId="test-3"
        slideCount={4}
        activeSlide={activeSlide}
        goToSlide={() => {}}
      />
    );
    fireEvent.keyPress(container.firstChild.firstChild, {
      key: 'Enter',
      code: 13,
      charCode: 13,
    });
    expect(
      document
        .querySelector('[aria-selected="true"]')
        .getAttribute('data-index')
    ).toBe('2');
    expect(document.querySelector('[aria-selected="true"]')).toBeTruthy();
    expect(container.firstChild).toMatchSnapshot();
  });

  test('should render CarouselBars - click event', () => {
    const activeSlide = 1;
    const { container } = render(
      <CarouselBars
        uniqueId="test-1"
        slideCount={4}
        activeSlide={activeSlide}
        goToSlide={() => {}}
      />
    );
    fireEvent.click(container.firstChild.firstChild);
  });
});

describe('<Carousel />', () => {
  const _renderItem = ({ item, index }) => {
    return <TestItem key={index} color={item.color} />;
  };

  const testData = [{ color: 'blue' }, { color: 'green' }];

  test('should render carousel', () => {
    const { container } = render(
      <Carousel data={testData} renderItem={_renderItem} />
    );

    expect(container.firstChild).toMatchSnapshot();
  });
});

describe('<CarouselWrapper />', () => {
  test('should render CarouselWrapper default', () => {
    const { container } = render(
      <CarouselWrapper>
        <TestItem />
        <TestItem />
      </CarouselWrapper>
    );

    expect(container.firstChild).toMatchSnapshot();
  });

  test('should render CarouselWrapper - props', () => {
    const { container } = render(
      <CarouselWrapper
        viewport="tablet"
        indicatorPosition="left"
        hideFooter
        hideArrows
        hideDividers
        inverted
        autoplay
        leftOffset="100px"
        autoplayInterval={9000}
        inactiveOpacity={0.1}
        footerContainerStyle={{ bottom: '50px' }}
        renderArrowRight={() => {
          return <TestItem />;
        }}
        renderArrowLeft={() => {
          return <TestItem />;
        }}
        renderFooter={() => {
          return <TestItem />;
        }}
      >
        <TestItem />
        <TestItem />
      </CarouselWrapper>
    );

    expect(container.firstChild).toMatchSnapshot();
  });
});

describe('<ProgressIndicator />', () => {
  test('should render ProgressIndicator default', () => {
    const { container } = render(<ProgressIndicator fillPercentage={50} />);

    expect(container.firstChild).toMatchSnapshot();
  });

  test('should render ProgressIndicator 100%', () => {
    const { container } = render(<ProgressIndicator fillPercentage={100} />);

    expect(container.firstChild).toMatchSnapshot();
  });
});

test('VDS CarouselBars', () => {
  const { container } = render(<CarouselBars focusState />);
  expect(container.firstChild).toMatchSnapshot();
});
