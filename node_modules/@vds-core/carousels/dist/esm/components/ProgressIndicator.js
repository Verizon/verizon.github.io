import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import * as React from 'react';
import { Component } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { colors } from '@vds-core/theme';
var propTypes = {
  /**
   * @ignore
   */
  fillPercentage: PropTypes.number,

  /**
   * @ignore
   */
  interval: PropTypes.number,

  /**
   * @ignore
   */
  viewport: PropTypes.string,

  /**
   * @ignore
   */
  inverted: PropTypes.bool
};
var defaultProps = {
  viewport: 'desktop',
  interval: 1000,
  inverted: false
};

var ProgressIndicator = /*#__PURE__*/function (_Component) {
  _inherits(ProgressIndicator, _Component);

  var _super = _createSuper(ProgressIndicator);

  function ProgressIndicator(props) {
    var _this;

    _classCallCheck(this, ProgressIndicator);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "_startIndicator", function () {
      setInterval(function () {
        if (_this.state.progress === 100) _this.setState({
          progress: 0
        });
        var newProgress;
        newProgress = ++_this.state.progress;

        _this.setState({
          progress: newProgress
        });
      }, _this.props.interval / 100);
    });

    _defineProperty(_assertThisInitialized(_this), "_resetIndicator", function () {
      console.log('hit reset');

      _this.setState({
        progress: 0
      });
    });

    _this.state = {
      progress: 0
    };
    return _this;
  }

  _createClass(ProgressIndicator, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this._startIndicator();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      clearInterval();
    }
  }, {
    key: "render",
    value: function render() {
      var strokeWidth = 4;
      var size = this.props.viewport === 'mobile' ? 20 : 28;
      var radius = (size - strokeWidth) / 2;
      var viewBox = "0 0 ".concat(size, " ").concat(size);
      var dashArray = radius * Math.PI * 2;
      var dashOffset = dashArray - dashArray * this.state.progress / 100;
      return /*#__PURE__*/React.createElement("svg", {
        width: size,
        height: size,
        viewBox: viewBox
      }, /*#__PURE__*/React.createElement("circle", {
        stroke: "transparent",
        fill: "none",
        cx: size / 2,
        cy: size / 2,
        r: radius,
        strokeWidth: "".concat(strokeWidth, "px")
      }), /*#__PURE__*/React.createElement("circle", {
        fill: "none",
        stroke: this.props.inverted ? colors.white : colors.black,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        cx: size / 2,
        cy: size / 2,
        r: radius,
        strokeWidth: "".concat(strokeWidth, "px"),
        transform: "rotate(-90 ".concat(size / 2, " ").concat(size / 2, ")"),
        style: {
          strokeDasharray: dashArray,
          strokeDashoffset: dashOffset
        }
      }));
    }
  }]);

  return ProgressIndicator;
}(Component);

ProgressIndicator.propTypes = propTypes;
ProgressIndicator.defaultProps = defaultProps;
export default ProgressIndicator;