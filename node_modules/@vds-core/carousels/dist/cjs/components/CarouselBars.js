"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireWildcard(require("react-dom"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _javascriptStyleHelpers = require("@uie/javascript-style-helpers");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _theme = require("@vds-core/theme");

var _utilities = require("@vds-core/utilities");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _templateObject2() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  position: relative;\n  display: block;\n  width: ", ";\n  margin-right: ", ";\n  cursor: pointer;\n  height: ", ";\n  outline-offset: 2px;\n  outline-color: white;\n  outline: none;\n\n  &:active,\n  &:hover {\n    outline: none;\n  }\n\n  ", ";\n\n  &::after {\n    content: '';\n    position: absolute;\n    height: ", ";\n    bottom: 0%;\n    left: 0;\n    right: 0;\n    background-color: ", ";\n    transition: height 250ms, background-color 250ms;\n  }\n\n  &:last-child {\n    margin-right: 0;\n  }\n\n  &:hover {\n    &::after {\n      height: ", ";\n      transition: height 250ms, background-color 250ms;\n    }\n  }\n\n  ", ";\n\n  ", ";\n\n  ", ";\n\n  ", ";\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding-left: 0;\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var propTypes = {
  /**
   * @deprecated
   * The current active slide/bar of the carousel.
   */
  currentSlide: _propTypes["default"].number,

  /**
   * The current active slide/bar of the carousel.
   */
  activeSlide: _propTypes["default"].number.isRequired,

  /**
   * @ignore
   */
  selectedSlide: _propTypes["default"].number,

  /**
   * Allows a unique ID to be passed to the component.
   */
  id: _propTypes["default"].string,

  /**
   *	Unique identifier value for 'aria-controls'.
   */
  uniqueId: _propTypes["default"].string.isRequired,

  /**
   * If provided, used as string that labels the element for accessibility.
   */
  ariaLabel: _propTypes["default"].string,

  /**
   * @deprecated
   * If 'true', CarouselBars will be white for contrast on a dark background.
   */
  isSlideDark: _propTypes["default"].bool,

  /**
   * If 'true', CarouselBars will be white for contrast on a dark background.
   */
  inverted: _propTypes["default"].bool,

  /**
   * Total number of slides to render total 'Bars'.
   */
  slideCount: _propTypes["default"].number.isRequired,

  /**
   * Function called when a bar is clicked.
   */
  goToSlide: _propTypes["default"].func.isRequired,

  /**
   * @ignore
   */
  focusState: _propTypes["default"].bool,

  /**
   * @ignore
   */
  colorConfig: _propTypes["default"].object,

  /**
   * Allows a string to be provided for analytics.
   */
  'data-analyticstrack': _propTypes["default"].string,

  /**
   * Allows a string to be provided for analytics.
   */
  'data-track': _propTypes["default"].string,

  /**
   * Allows a string to be provided for click stream.
   */
  'data-clickstream': _propTypes["default"].string,

  /**
   * Function that returns an aria label for each carousel bar
   */
  slideAriaLabel: _propTypes["default"].func
};
var defaultProps = {
  isSlideDark: false,
  inverted: false,
  focusState: null,
  colorConfig: _theme.colors
};

var StyledSwiperList = /*#__PURE__*/_styledComponents["default"].ol.withConfig({
  displayName: "StyledSwiperList",
  componentId: "c4phmx-0"
})(_templateObject());

var StyledSwiperDot = /*#__PURE__*/_styledComponents["default"].li.withConfig({
  displayName: "StyledSwiperDot",
  componentId: "c4phmx-1"
})(_templateObject2(), (0, _javascriptStyleHelpers.calculateRem)(24), (0, _theme.calculateSpacing)('1X'), (0, _javascriptStyleHelpers.calculateRem)(4), function (_ref) {
  var focusState = _ref.focusState;
  return !focusState && " \n  &:focus{\n    outline: -webkit-focus-ring-color auto 5px;\n    outline: Highlight auto 5px;\n\n  }\n\n  ";
}, (0, _javascriptStyleHelpers.calculateRem)(1), function (_ref2) {
  var colors = _ref2.colors;
  return colors.coolGray6;
}, (0, _javascriptStyleHelpers.calculateRem)(4), function (_ref3) {
  var active = _ref3.active,
      colors = _ref3.colors;
  return active && "\n      &::after {\n          height: ".concat((0, _javascriptStyleHelpers.calculateRem)(4), ";\n          background-color: ").concat(colors.black, ";\n          transition: height 250ms, background-color 250ms;\n      }\n  ");
}, function (_ref4) {
  var active = _ref4.active,
      inverted = _ref4.inverted,
      isSlideDark = _ref4.isSlideDark,
      colors = _ref4.colors;
  return !active && (isSlideDark || inverted) && "\n      &:focus{\n        outline-color: white;\n      }\n      &::after {\n          background-color: ".concat(colors.coolGray3, ";\n          transition: height 250ms, background-color 250ms;\n      }\n  ");
}, function (_ref5) {
  var active = _ref5.active,
      isSlideDark = _ref5.isSlideDark,
      inverted = _ref5.inverted,
      colors = _ref5.colors;
  return active && (isSlideDark || inverted) && "\n      &:focus{\n        outline-color: white;\n      }\n      &::after {\n          height: ".concat((0, _javascriptStyleHelpers.calculateRem)(4), ";\n          background-color: ").concat(colors.white, ";\n          transition: height 250ms, background-color 250ms;\n      }\n  ");
}, function (_ref6) {
  var focusState = _ref6.focusState;
  return focusState && "\n    &:focus:not(:hover) {\n      outline-style: dashed;\n      outline-width: 1px;\n    }\n    &:focus:not(:focus-visible){\n      outline-style: none;\n      outline-width: none;\n    }\n    &:focus-visible{\n      outline-style: none;\n      outline-width: none;      \n    }\n  ";
});

var CarouselBars = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2["default"])(CarouselBars, _React$Component);

  var _super = _createSuper(CarouselBars);

  function CarouselBars(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, CarouselBars);
    _this = _super.call(this, props);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_setSlotRef", function (element, index) {
      if (!element) return;
      _this.barRefs[index] = element;
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_blurElements", function (e) {
      [e.target, document.activeElement].forEach(function (element) {
        // IE9 throws an "Unspecified error" accessing document.activeElement from an <iframe>
        try {
          // Support: IE9+
          // If the <body> is blurred, IE will switch windows
          element && element.nodeName.toLowerCase() !== 'body' && element.blur();
        } catch (error) {}
      });
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_goSlide", function (e, index) {
      var goToSlide = _this.props.goToSlide;
      e.preventDefault();

      if (e.type === 'click') {
        _this._blurElements(e);
      }

      goToSlide(index, false);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_onMouseDown", function (e) {
      e.preventDefault();

      _this._blurElements(e);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_onKeyDown", function (e) {
      var focusedBar = _this.state.focusedBar;
      var _this$props = _this.props,
          activeSlide = _this$props.activeSlide,
          goToSlide = _this$props.goToSlide;

      if (e.keyCode === 39) {
        if (focusedBar + 1 === _this.barRefs.length) {
          goToSlide(0, false);

          _this.setState({
            focusedBar: 0
          });

          return (0, _reactDom.findDOMNode)(_this.barRefs[0]).focus();
        } else {
          goToSlide(focusedBar + 1, false);

          _this.setState({
            focusedBar: focusedBar + 1
          });

          return (0, _reactDom.findDOMNode)(_this.barRefs[focusedBar + 1]).focus();
        }
      } else if (e.keyCode === 37) {
        if (focusedBar - 1 < 0) {
          goToSlide(_this.barRefs.length - 1);

          _this.setState({
            focusedBar: _this.barRefs.length - 1
          });

          return (0, _reactDom.findDOMNode)(_this.barRefs[_this.barRefs.length - 1]).focus();
        } else {
          goToSlide(focusedBar - 1, false);

          _this.setState({
            focusedBar: focusedBar - 1
          });

          return (0, _reactDom.findDOMNode)(_this.barRefs[focusedBar - 1]).focus();
        }
      }
    });
    _this.state = {
      focusedBar: 0
    };
    _this.barRefs = [];
    return _this;
  }

  (0, _createClass2["default"])(CarouselBars, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          slideCount = _this$props2.slideCount,
          currentSlide = _this$props2.currentSlide,
          selectedSlideProp = _this$props2.selectedSlide,
          activeSlide = _this$props2.activeSlide,
          isSlideDark = _this$props2.isSlideDark,
          inverted = _this$props2.inverted,
          id = _this$props2.id,
          uniqueId = _this$props2.uniqueId,
          goToSlide = _this$props2.goToSlide,
          ariaLabel = _this$props2.ariaLabel,
          colorConfig = _this$props2.colorConfig,
          focusState = _this$props2.focusState,
          analyticsTrack = _this$props2['data-analyticstrack'],
          track = _this$props2['data-track'],
          clickStream = _this$props2['data-clickstream'],
          slideAriaLabel = _this$props2.slideAriaLabel;
      var selectedSlide = activeSlide || selectedSlideProp; // this is a tabbed carousel so we do not need a aria-roledescription

      return /*#__PURE__*/_react["default"].createElement(StyledSwiperList, (0, _extends2["default"])({}, this.props, {
        "aria-label": ariaLabel,
        "aria-controls": uniqueId,
        role: "tablist"
      }), Array.from({
        length: slideCount
      }).map(function (element, index) {
        var defaultAriaLabel = "Go to slide ".concat(index + 1, " of ").concat(slideCount, " ").concat((selectedSlide || currentSlide) === index + 1 ? '' : ' unselected');
        return /*#__PURE__*/_react["default"].createElement(StyledSwiperDot, {
          "data-clickstream": clickStream,
          "data-track": track,
          "data-analyticstrack": analyticsTrack,
          focusState: focusState,
          colors: colorConfig,
          onMouseDown: _this2._onMouseDown,
          key: index,
          active: activeSlide === index,
          "data-index": index,
          "aria-selected": activeSlide === index ? true : null,
          onKeyDown: _this2._onKeyDown,
          isSlideDark: inverted || isSlideDark,
          onClick: function onClick(e) {
            return _this2._goSlide(e, index);
          },
          "aria-label": slideAriaLabel ? slideAriaLabel(defaultAriaLabel, index) : defaultAriaLabel,
          tabIndex: activeSlide === index ? 0 : -1,
          role: "tab",
          ref: function ref(el) {
            return _this2._setSlotRef(el, index);
          }
        });
      }));
    }
  }]);
  return CarouselBars;
}(_react["default"].Component);

CarouselBars.propTypes = propTypes;
CarouselBars.defaultProps = defaultProps;

var _default = (0, _utilities.withVDSManager)(CarouselBars);

exports["default"] = _default;