"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _theme = require("@vds-core/theme");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var propTypes = {
  /**
   * @ignore
   */
  fillPercentage: _propTypes["default"].number,

  /**
   * @ignore
   */
  interval: _propTypes["default"].number,

  /**
   * @ignore
   */
  viewport: _propTypes["default"].string,

  /**
   * @ignore
   */
  inverted: _propTypes["default"].bool
};
var defaultProps = {
  viewport: 'desktop',
  interval: 1000,
  inverted: false
};

var ProgressIndicator = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(ProgressIndicator, _Component);

  var _super = _createSuper(ProgressIndicator);

  function ProgressIndicator(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, ProgressIndicator);
    _this = _super.call(this, props);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_startIndicator", function () {
      setInterval(function () {
        if (_this.state.progress === 100) _this.setState({
          progress: 0
        });
        var newProgress;
        newProgress = ++_this.state.progress;

        _this.setState({
          progress: newProgress
        });
      }, _this.props.interval / 100);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_resetIndicator", function () {
      console.log('hit reset');

      _this.setState({
        progress: 0
      });
    });
    _this.state = {
      progress: 0
    };
    return _this;
  }

  (0, _createClass2["default"])(ProgressIndicator, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this._startIndicator();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      clearInterval();
    }
  }, {
    key: "render",
    value: function render() {
      var strokeWidth = 4;
      var size = this.props.viewport === 'mobile' ? 20 : 28;
      var radius = (size - strokeWidth) / 2;
      var viewBox = "0 0 ".concat(size, " ").concat(size);
      var dashArray = radius * Math.PI * 2;
      var dashOffset = dashArray - dashArray * this.state.progress / 100;
      return /*#__PURE__*/React.createElement("svg", {
        width: size,
        height: size,
        viewBox: viewBox
      }, /*#__PURE__*/React.createElement("circle", {
        stroke: "transparent",
        fill: "none",
        cx: size / 2,
        cy: size / 2,
        r: radius,
        strokeWidth: "".concat(strokeWidth, "px")
      }), /*#__PURE__*/React.createElement("circle", {
        fill: "none",
        stroke: this.props.inverted ? _theme.colors.white : _theme.colors.black,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        cx: size / 2,
        cy: size / 2,
        r: radius,
        strokeWidth: "".concat(strokeWidth, "px"),
        transform: "rotate(-90 ".concat(size / 2, " ").concat(size / 2, ")"),
        style: {
          strokeDasharray: dashArray,
          strokeDashoffset: dashOffset
        }
      }));
    }
  }]);
  return ProgressIndicator;
}(React.Component);

ProgressIndicator.propTypes = propTypes;
ProgressIndicator.defaultProps = defaultProps;
var _default = ProgressIndicator;
exports["default"] = _default;