import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React from 'react';
import PropTypes from 'prop-types';
import ViewportManager from './ViewportManager';
import _isStyledComponent from '../../utils/isStyledComponent';
var CHARACTERS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';

var wrapWithManager = function wrapWithManager(Component) {
  var componentName = Component ? Component.displayName || Component.name : 'Component';
  var isStatelessFunctionalComponent = typeof Component === 'function' && !(Component.prototype && 'isReactComponent' in Component.prototype); // NOTE: We can't pass a ref to a stateless functional component

  var shouldSetInnerRef = _isStyledComponent(Component) || isStatelessFunctionalComponent;

  var WithManager = /*#__PURE__*/function (_React$Component) {
    _inherits(WithManager, _React$Component);

    var _super = _createSuper(WithManager);

    function WithManager(props) {
      var _this;

      _classCallCheck(this, WithManager);

      _this = _super.call(this, props);
      _this.viewportManager = ViewportManager;
      _this.state = {
        viewport: undefined
      };
      _this.id = _this._makeid(10);

      _this.viewportManager.subscribe(_this.id, function (vp) {
        _this.setState({
          viewport: vp
        });
      });

      return _this;
    }

    _createClass(WithManager, [{
      key: "_makeid",
      value: function _makeid(length) {
        var result = '';
        var charactersLength = CHARACTERS.length;

        for (var i = 0; i < length; i++) {
          var randomNum = Math.random();
          var flooredNum = Math.floor(randomNum * 10);
          result += CHARACTERS.charAt(flooredNum);
        }

        return result;
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this.setState({
          viewport: this.viewportManager.viewport
        }); //for intial viewport
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.viewportManager.unsubscribe(this.id);
      }
    }, {
      key: "render",
      value: function render() {
        var props = _objectSpread({
          viewport: this.state.viewport
        }, this.props);

        if (!shouldSetInnerRef) {
          props.ref = props.innerRef;
          delete props.innerRef;
        }

        return /*#__PURE__*/React.createElement(Component, props);
      }
    }]);

    return WithManager;
  }(React.Component);

  _defineProperty(WithManager, "displayName", "WithManager(".concat(componentName, ")"));

  return WithManager;
}; // function makeid(length) {
//   var result = '';
//   var characters =
//     'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
//   var charactersLength = characters.length;
//   for (var i = 0; i < length; i++) {
//     result += characters.charAt(Math.floor(Math.random() * charactersLength));
//   }
//   return result;
// }


export default wrapWithManager;