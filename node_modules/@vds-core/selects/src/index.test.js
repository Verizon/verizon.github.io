import React, { Fragment } from 'react';
import { fireEvent, render } from '@testing-library/react';
import {
  DropdownSelectMarketing,
  DropdownMarketingOption,
  DropdownSelect,
} from '.';
import { calculateRem } from '@uie/javascript-style-helpers';

const sizes = ['small', 'medium', 'normal', 'large'];

jest.mock('cuid', () => () => 'asdf2134');

/********************************
// DROPDOWNSELECTMARKETING TESTS
*********************************/

test('<DropdownSelectMarketing>', async () => {
  const mockOnSelect = jest.fn();

  const { getByText, queryByText } = render(
    <DropdownSelectMarketing label="TEST DROPDOWN">
      <DropdownMarketingOption onSelect={mockOnSelect}>
        {'Item 1'}
      </DropdownMarketingOption>
      <DropdownMarketingOption onSelect={() => alert('Item 2 Clicked')}>
        {'Item 2'}
      </DropdownMarketingOption>
      <DropdownMarketingOption onSelect={() => alert('Item 3 Clicked')}>
        {'Item 3'}
      </DropdownMarketingOption>
    </DropdownSelectMarketing>
  );
  const dropdownTrigger = getByText('TEST DROPDOWN');

  // DropdownTrigger should be rendered and DropdownItems should not be
  expect(dropdownTrigger).not.toBe(null);
  expect(queryByText('Item 1')).toBe(null);

  // first DropdownMarketingOption should exists after trigger is clicked
  fireEvent.click(dropdownTrigger);
  expect(getByText('Item 1')).not.toBe(null);

  // onSelect handler should be called when DropdownMarketingOption clicked
  // and then DropdownMenu should be closed
  fireEvent.click(getByText('Item 1'));
  expect(mockOnSelect).toHaveBeenCalledTimes(1);
  expect(queryByText('Item 1')).toBe(null);

  // DropdownItems should toggle between "open" and "closed" when
  // DropdownTrigger is clicked
  fireEvent.click(dropdownTrigger);
  expect(getByText('Item 1')).not.toBe(null);
  fireEvent.click(dropdownTrigger);
  expect(queryByText('Item 1')).toBe(null);
});

test('<DropdownSelectMarketing - error>', async () => {
  const mockOnSelect = jest.fn();

  const { getByText, queryByText } = render(
    <DropdownSelectMarketing
      error
      errorMsg="Hello World"
      size="large"
      width="136px"
      errorText="Hello World"
      label="TEST DROPDOWN"
    >
      <DropdownMarketingOption onSelect={mockOnSelect}>
        {'Item 1'}
      </DropdownMarketingOption>
      <DropdownMarketingOption onSelect={() => alert('Item 2 Clicked')}>
        {'Item 2'}
      </DropdownMarketingOption>
      <DropdownMarketingOption onSelect={() => alert('Item 3 Clicked')}>
        {'Item 3'}
      </DropdownMarketingOption>
    </DropdownSelectMarketing>
  );
  const dropdownTrigger = getByText('TEST DROPDOWN');
  // DropdownTrigger should be rendered and DropdownItems should not be
  expect(dropdownTrigger).not.toBe(null);
  expect(queryByText('Item 1')).toBe(null);

  // first DropdownMarketingOption should exists after trigger is clicked
  fireEvent.click(dropdownTrigger);
  expect(getByText('Item 1')).not.toBe(null);

  // onSelect handler should be called when DropdownMarketingOption clicked
  // and then DropdownMenu should be closed
  fireEvent.click(getByText('Item 1'));
  expect(mockOnSelect).toHaveBeenCalledTimes(1);
  expect(queryByText('Item 1')).toBe(null);

  // DropdownItems should toggle between "open" and "closed" when
  // DropdownTrigger is clicked
  fireEvent.click(dropdownTrigger);
  expect(getByText('Item 1')).not.toBe(null);
  fireEvent.click(dropdownTrigger);
  expect(queryByText('Item 1')).toBe(null);
});

test('<DropdownSelectMarketing - error large / desktop>', async () => {
  const mockOnSelect = jest.fn();

  const { getByText, queryByText, rerender } = render(
    <Fragment>
      <div width="200px" height="200px">
        Test Click
      </div>
      <DropdownSelectMarketing
        size="large"
        viewport="desktop"
        width="136px"
        label="TEST DROPDOWN"
      >
        <DropdownMarketingOption
          data-testid="test-option-1"
          onSelect={mockOnSelect}
        >
          Item 1
        </DropdownMarketingOption>
        <DropdownMarketingOption
          data-testid="test-option-2"
          onSelect={() => alert('Item 2 Clicked')}
        >
          Item 2
        </DropdownMarketingOption>
        <DropdownMarketingOption
          data-testid="test-option-3"
          onSelect={() => alert('Item 3 Clicked')}
        >
          Item 3
        </DropdownMarketingOption>
      </DropdownSelectMarketing>
    </Fragment>
  );
  const dropdownTrigger = getByText('TEST DROPDOWN');
  const clickDiv = getByText('Test Click');
  //click outside of trigger to close list
  fireEvent.click(dropdownTrigger);
  fireEvent.click(clickDiv);
  //keypress outside of trigger to close list
  fireEvent.click(dropdownTrigger);
  clickDiv.focus();
  fireEvent.keyPress(clickDiv, { key: 'Enter', keyCode: 13, charCode: 13 });

  rerender(
    <Fragment>
      <div width="200px" height="200px">
        Test Click
      </div>
      <DropdownSelectMarketing
        size="large"
        viewport="desktop"
        width="136px"
        label="TEST DROPDOWN"
      >
        <DropdownMarketingOption
          data-testid="test-option-1"
          onSelect={mockOnSelect}
        >
          Item 1
        </DropdownMarketingOption>
        <DropdownMarketingOption
          data-testid="test-option-2"
          onSelect={() => alert('Item 2 Clicked')}
        >
          Item 2
        </DropdownMarketingOption>
        <DropdownMarketingOption
          data-testid="test-option-3"
          onSelect={() => alert('Item 3 Clicked')}
        >
          Item 3
        </DropdownMarketingOption>
      </DropdownSelectMarketing>
    </Fragment>
  );
});

test('<DropdownSelectMarketing size errors', () => {
  sizes.forEach(size => {
    const { queryByText } = render(
      <DropdownSelectMarketing
        error
        label={`Test ${size} Error DropdownSelectMarketing`}
        size={size}
      >
        <DropdownMarketingOption
          onSelect={() => alert(`${size} Error 1 Clicked`)}
        >
          {size + 'Error Item 1'}
        </DropdownMarketingOption>
        <DropdownMarketingOption
          onSelect={() => alert(`${size} Error 2 Clicked`)}
        >
          {size + 'Error Item 2'}
        </DropdownMarketingOption>
        <DropdownMarketingOption
          onSelect={() => alert(`${size} Error 3 Clicked`)}
        >
          {size + 'Error Item 3'}
        </DropdownMarketingOption>
      </DropdownSelectMarketing>
    );

    // DropdownSelectMarketing should be rendered and DropdownItems should be
    const dropdown = queryByText(`Test ${size} Error DropdownSelectMarketing`);
    expect(dropdown).not.toBe(null);

    // All DropdownMarketingOption's should exists after dropdown is clicked
    fireEvent.click(dropdown);
  });
});

test('<DropdownSelectMarketing> 1.0 error small / mobile', async () => {
  const mockOnSelect = jest.fn();

  const { getByTestId, getByText, rerender } = render(
    <DropdownSelectMarketing
      hitArea
      error
      errorState
      errorText="Test Error Message"
      size="small"
      hoverState
      focusState
      iconActiveState
      viewport="mobile"
      typescale="VDS"
      hiddenLabel="test label"
      label="TEST DROPDOWN"
    >
      <DropdownMarketingOption onSelect={mockOnSelect}>
        {'Item 1'}
      </DropdownMarketingOption>
      <DropdownMarketingOption onSelect={() => alert('Item 2 Clicked')}>
        {'Item 2'}
      </DropdownMarketingOption>
      <DropdownMarketingOption onSelect={() => alert('Item 3 Clicked')}>
        {'Item 3'}
      </DropdownMarketingOption>
    </DropdownSelectMarketing>
  );

  const dropdownTrigger = getByText('TEST DROPDOWN');

  fireEvent.click(dropdownTrigger);
  fireEvent.click(getByText('Item 1'));

  rerender(
    <DropdownSelectMarketing
      hitArea
      error
      errorState
      errorText="Test Error Message"
      hoverState
      focusState
      iconActiveState
      selected="Item 1"
      size="small"
      viewport="mobile"
      typescale="VDS"
      hiddenLabel="test label"
      label="TEST DROPDOWN"
    >
      <DropdownMarketingOption
        data-testid="test-option-1"
        onSelect={mockOnSelect}
      >
        {'Item 1'}
      </DropdownMarketingOption>
      <DropdownMarketingOption
        data-testid="test-option-2"
        onSelect={() => alert('Item 2 Clicked')}
      >
        {'Item 2'}
      </DropdownMarketingOption>
      <DropdownMarketingOption
        data-testid="test-option-3"
        onSelect={() => alert('Item 3 Clicked')}
      >
        {'Item 3'}
      </DropdownMarketingOption>
    </DropdownSelectMarketing>
  );

  fireEvent.click(dropdownTrigger);
  fireEvent.click(getByText('Item 2'));

  rerender(
    <DropdownSelectMarketing
      hitArea
      error
      errorState
      errorText="Test Error Message"
      hoverState
      focusState
      iconActiveState
      selected="Item 2"
      size="small"
      viewport="mobile"
      typescale="VDS"
      hiddenLabel="test label"
      label="TEST DROPDOWN"
    >
      <DropdownMarketingOption
        data-testid="test-option-1"
        onSelect={mockOnSelect}
      >
        {'Item 1'}
      </DropdownMarketingOption>
      <DropdownMarketingOption
        data-testid="test-option-2"
        onSelect={() => alert('Item 2 Clicked')}
      >
        {'Item 2'}
      </DropdownMarketingOption>
      <DropdownMarketingOption
        data-testid="test-option-3"
        onSelect={() => alert('Item 3 Clicked')}
      >
        {'Item 3'}
      </DropdownMarketingOption>
    </DropdownSelectMarketing>
  );
});

test('<DropdownSelectMarketing> 1.0 small / mobile / no iconActiveState', async () => {
  const mockOnSelect = jest.fn();

  const { getByTestId, getByText, rerender } = render(
    <DropdownSelectMarketing
      hitArea
      error
      errorText="test-error-message"
      errorState
      hoverState
      focusState
      size="small"
      viewport="mobile"
      typescale="VDS"
      hiddenLabel="test label"
      label="TEST DROPDOWN"
    >
      <DropdownMarketingOption
        data-testid="test-option-1"
        onSelect={mockOnSelect}
      >
        {'Item 1'}
      </DropdownMarketingOption>
      <DropdownMarketingOption
        data-testid="test-option-2"
        onSelect={() => alert('Item 2 Clicked')}
      >
        {'Item 2'}
      </DropdownMarketingOption>
      <DropdownMarketingOption
        data-testid="test-option-3"
        onSelect={() => alert('Item 3 Clicked')}
      >
        {'Item 3'}
      </DropdownMarketingOption>
    </DropdownSelectMarketing>
  );
});

test('VDS DROPDOWNSELECTMARKETING', async () => {
  const mockOnSelect = jest.fn();

  const { getByTestId, getByText, rerender } = render(
    <DropdownSelectMarketing
      hitArea
      error
      errorText="test-error-message"
      errorState
      hoverState
      focusState
      size="small"
      viewport="mobile"
      typescale="VDS"
      hiddenLabel="test label"
      label="TEST DROPDOWN"
      iconActiveState
      triggerPaddingBottom={calculateRem(4)}
    >
      <DropdownMarketingOption
        data-testid="test-option-1"
        onSelect={mockOnSelect}
      >
        {'Item 1'}
      </DropdownMarketingOption>
      <DropdownMarketingOption
        data-testid="test-option-2"
        onSelect={() => alert('Item 2 Clicked')}
      >
        {'Item 2'}
      </DropdownMarketingOption>
      <DropdownMarketingOption
        data-testid="test-option-3"
        onSelect={() => alert('Item 3 Clicked')}
      >
        {'Item 3'}
      </DropdownMarketingOption>
    </DropdownSelectMarketing>
  );
});

test('<DropdownSelectMarketing> 1.0 large / mobile / no iconActiveState', async () => {
  const mockOnSelect = jest.fn();

  const { getByTestId, getByText, rerender } = render(
    <DropdownSelectMarketing
      hitArea
      error
      errorState
      errorText="Test Error Message"
      hoverState
      focusState
      size="large"
      viewport="mobile"
      typescale="VDS"
      hiddenLabel="test label"
      label="TEST DROPDOWN"
    >
      <DropdownMarketingOption
        data-testid="test-option-1"
        onSelect={mockOnSelect}
      >
        {'Item 1'}
      </DropdownMarketingOption>
      <DropdownMarketingOption
        data-testid="test-option-2"
        onSelect={() => alert('Item 2 Clicked')}
      >
        {'Item 2'}
      </DropdownMarketingOption>
      <DropdownMarketingOption
        data-testid="test-option-3"
        onSelect={() => alert('Item 3 Clicked')}
      >
        {'Item 3'}
      </DropdownMarketingOption>
    </DropdownSelectMarketing>
  );
});

test('<DropdownSelectMarketing> 1.0 large / mobile / iconActiveState', async () => {
  const mockOnSelect = jest.fn();

  const { container, getByText } = render(
    <DropdownSelectMarketing
      hitArea
      error
      errorState
      errorText="Test Error Message"
      hoverState
      focusState
      iconActiveState
      size="large"
      viewport="mobile"
      typescale="VDS"
      hiddenLabel="test label"
      label="TEST DROPDOWN"
    >
      <DropdownMarketingOption
        data-testid="test-option-1"
        onSelect={mockOnSelect}
      >
        {'Item 1'}
      </DropdownMarketingOption>
      <DropdownMarketingOption
        data-testid="test-option-2"
        onSelect={() => alert('Item 2 Clicked')}
      >
        {'Item 2'}
      </DropdownMarketingOption>
      <DropdownMarketingOption
        data-testid="test-option-3"
        onSelect={() => alert('Item 3 Clicked')}
      >
        {'Item 3'}
      </DropdownMarketingOption>
    </DropdownSelectMarketing>
  );

  const dropdownTrigger = getByText('TEST DROPDOWN');
  fireEvent.click(dropdownTrigger);

  expect(container.firstChild).toMatchSnapshot();
});

test('<DropdownSelectMarketing> 1.0 large / desktop / iconActiveState', async () => {
  const mockOnSelect = jest.fn();

  const { getByTestId, getByText, rerender } = render(
    <DropdownSelectMarketing
      hitArea
      error
      errorState
      errorText="Test Error Message"
      hoverState
      focusState
      iconActiveState
      size="large"
      viewport="desktop"
      typescale="VDS"
      hiddenLabel="test label"
      label="TEST DROPDOWN"
    >
      <DropdownMarketingOption
        data-testid="test-option-1"
        onSelect={mockOnSelect}
      >
        {'Item 1'}
      </DropdownMarketingOption>
      <DropdownMarketingOption
        data-testid="test-option-2"
        onSelect={() => alert('Item 2 Clicked')}
      >
        {'Item 2'}
      </DropdownMarketingOption>
      <DropdownMarketingOption
        data-testid="test-option-3"
        onSelect={() => alert('Item 3 Clicked')}
      >
        {'Item 3'}
      </DropdownMarketingOption>
    </DropdownSelectMarketing>
  );
});

test('<DropdownSelectMarketing> 1.0 small / desktop / iconActiveState', async () => {
  const mockOnSelect = jest.fn();

  const { getByTestId, getByText, rerender } = render(
    <DropdownSelectMarketing
      hitArea
      error
      errorText="test-error-message"
      errorState
      hoverState
      focusState
      iconActiveState
      size="small"
      viewport="desktop"
      typescale="VDS"
      hiddenLabel="test label"
      label="TEST DROPDOWN"
    >
      <DropdownMarketingOption
        data-testid="test-option-1"
        onSelect={mockOnSelect}
      >
        {'Item 1'}
      </DropdownMarketingOption>
      <DropdownMarketingOption
        data-testid="test-option-2"
        onSelect={() => alert('Item 2 Clicked')}
      >
        {'Item 2'}
      </DropdownMarketingOption>
      <DropdownMarketingOption
        data-testid="test-option-3"
        onSelect={() => alert('Item 3 Clicked')}
      >
        {'Item 3'}
      </DropdownMarketingOption>
    </DropdownSelectMarketing>
  );
});

test('<DropdownSelectMarketing> 1.0 medium / desktop / iconActiveState', async () => {
  const mockOnSelect = jest.fn();

  const { getByTestId, getByText, rerender } = render(
    <DropdownSelectMarketing
      hitArea
      error
      errorText="test-error-message"
      errorState
      hoverState
      focusState
      iconActiveState
      size="medium"
      viewport="desktop"
      typescale="VDS"
      hiddenLabel="test label"
      label="TEST DROPDOWN"
    >
      <DropdownMarketingOption
        data-testid="test-option-1"
        onSelect={mockOnSelect}
      >
        {'Item 1'}
      </DropdownMarketingOption>
      <DropdownMarketingOption
        data-testid="test-option-2"
        onSelect={() => alert('Item 2 Clicked')}
      >
        {'Item 2'}
      </DropdownMarketingOption>
      <DropdownMarketingOption
        data-testid="test-option-3"
        onSelect={() => alert('Item 3 Clicked')}
      >
        {'Item 3'}
      </DropdownMarketingOption>
    </DropdownSelectMarketing>
  );
});

/***************************
// DROPDOWNSELECT TESTS
***************************/

describe('<DropdownSelect />', () => {
  test('should render default DropdownSelect', () => {
    const { container } = render(
      <DropdownSelect>
        <option>Choose an animal</option>
        <option>Kitten</option>
        <option>Puppy</option>
        <option>Piglet</option>
        <option>Fawn</option>
        <option>Spider Hatchling</option>
      </DropdownSelect>
    );

    // expect(container.firstChild).toMatchSnapshot();
  });

  test('should render disabled state DropdownSelect', () => {
    const { container } = render(
      <DropdownSelect>
        <option>Choose an animal</option>
        <option>Kitten</option>
        <option>Puppy</option>
        <option>Piglet</option>
        <option>Fawn</option>
        <option>Spider Hatchling</option>
      </DropdownSelect>
    );

    //expect(container.firstChild).toMatchSnapshot();
  });
});

// test('<DropdownSelect />', () => {
//   const { getByTestId, queryAllByText } = render(
//     <DropdownSelect data-testid="select">
//       <option>Option</option>
//       <option>Option</option>
//     </DropdownSelect>
//   );

//   let selectItem = getByTestId('select');
//   expect(selectItem.getAttribute('role')).toBe('combobox');

//   // expect number of options to be 2
//   const options = queryAllByText('Option');
//   expect(options).toHaveLength(2);
// });

// test('<DropdownSelect disabled /> ', () => {
//   const { getByTestId } = render(
//     <DropdownSelect disabled data-testid="select">
//       <option>Option</option>
//       <option>Option</option>
//     </DropdownSelect>
//   );

//   const selectItem = getByTestId('select');

//   expect(selectItem.getAttribute('role')).toBe('combobox');
//   // Expect DropdownSelect to have attribute disabled=""
//   expect(selectItem.getAttribute('disabled')).toBe('');
// });

test('<DropdownSelect 1.0 /> ', () => {
  const { getByTestId } = render(
    <DropdownSelect
      readOnlyBorders
      typescale="VDS"
      hoverState
      focusState
      inputFontSize
      overflowEllipsis
      data-testid="select"
    >
      <option>Option</option>
      <option>Option</option>
    </DropdownSelect>
  );

  const selectItem = getByTestId('select');

  selectItem.focus();
  selectItem.blur();
});

test('<DropdownSelect 1.0 /> ', () => {
  const { getByTestId } = render(
    <DropdownSelect
      error
      errorText="test error text"
      readOnlyBorders
      typescale="VDS"
      hoverState
      labelMarginBottom="4px"
      focusState
      inputFontSize
      overflowEllipsis
      data-testid="select"
    >
      <option>Option</option>
      <option>Option</option>
    </DropdownSelect>
  );

  const selectItem = getByTestId('select');

  selectItem.focus();
  fireEvent.keyDown(selectItem, { key: 'Enter', keyCode: 13 });
  selectItem.blur();
});

test('<DropdownSelect 1.0 /> ', () => {
  const { getByTestId } = render(
    <DropdownSelect
      label="test label"
      required={false}
      hoverState
      labelMarginBottom="4px"
      focusState
      inputFontSize
      overflowEllipsis
      data-testid="select"
    >
      <option>Option</option>
      <option>Option</option>
    </DropdownSelect>
  );
});

test('<VDS DropdownSelect> ', () => {
  const { getByTestId } = render(
    <DropdownSelect
      label="test label"
      disabled
      required={false}
      hoverState
      labelMarginBottom="4px"
      focusState
      inputFontSize
      overflowEllipsis
      data-testid="select"
      readOnlyBorders
      hoverState
      focusState
      inputFontSize
      overflowEllipsis
      minWidth="68px"
      maxWidth="596px"
      height={calculateRem(44)}
      selectPadding={calculateRem(12, 44, 12, 12)}
      labelMarginBottom={calculateRem(4)}
      errorLabelSpacing={calculateRem(8)}
    >
      <option>Option</option>
      <option>Option</option>
    </DropdownSelect>
  );
});
