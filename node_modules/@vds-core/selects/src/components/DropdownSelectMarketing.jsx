import React, { Component } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import UNSAFE_SetEnvRef from '@uie/set-env-ref';
import { calculateRem } from '@uie/javascript-style-helpers';
import DropdownSelectMarketingTrigger from './DropdownSelectMarketingTrigger';
import DropdownSelectMarketingList from './DropdownSelectMarketingList';
import Icon, { IconData } from '@vds-core/icons';
import { colors, calculateSpacing } from '@vds-core/theme';
import {
  Micro,
  Body,
  MicroConfig,
  TypographyConfig,
} from '@vds-core/typography';
import { withVDSManager } from '@vds-core/utilities';
import cuid from 'cuid';

function _calculateIconSpacing(size) {
  if (size === 'small') {
    return calculateSpacing('2X');
  } else {
    return calculateSpacing('1X');
  }
}

function _calculateErrorLabelSpacing(size) {
  if (size === 'large') {
    return calculateRem(3);
  } else if (size === 'small') {
    return calculateRem(1);
  } else {
    return calculateSpacing('1X');
  }
}

const propTypes = {
  /**
   * Items for the Dropdown List. Should use DropdownSelectOption.
   */
  children: PropTypes.node.isRequired,
  /**
   * @ignore
   */
  className: PropTypes.string,
  /**
   * disables the Dropdown
   */
  disabled: PropTypes.bool,
  /**
   * Notify the user if there is an error
   */
  error: PropTypes.bool,
  /**
   * @deprecated
   * Message displayed when there is an error
   */
  errorMsg: PropTypes.string, // DEPRECATED
  /**
   * Message displayed when there is an error
   */
  errorText: PropTypes.string,
  /**
   * @deprecated
   * Text shown in the dropdown trigger.
   */
  label: PropTypes.string, // DEPRECATED
  /**
   * Label for reading out meaningful text in aria-labels
   */
  hiddenLabel: PropTypes.string,
  /**
   * Text shown in the dropdown trigger.
   */
  placeholder: PropTypes.string,
  /**
   * The width of the dropdown. If no width is passed small dropdowns with be 156px and large dropdowns with be 145px wide.
   */
  width: PropTypes.string,
  /**
   * The size of the entire dropdown.
   */
  size: PropTypes.oneOf(['large', 'normal', 'medium', 'small']),
  /**
   * The viewport that the dropdown styling should conform to.
   */
  viewport: PropTypes.oneOf(['mobile', 'tablet', 'desktop']),
  /**
   * @ignore
   */
  color: PropTypes.object,
  /**
   * Selected item of the Dropdown List.
   */
  selected: PropTypes.node,
  /**
   * @ignore
   * string that sets the typescale for the typography (example: typescale === 'VDS')
   */
  typescale: PropTypes.string,
  /**
   * @ignore
   * config for body typography
   */
  bodyConfig: PropTypes.object,
  /**
   * @ignore
   * config for title typography
   */
  titleConfig: PropTypes.object,
  /**
   * @ignore
   * if true, the caret-down icon changes to caret-up if this.state.open is also true
   */
  iconActiveState: PropTypes.bool,
  /**
   * @ignore
   * calculates the margin on top of the error text
   */
  calculateErrorLabelSpacing: PropTypes.func,
  /**
   * @ignore
   * calculates the padding next to the icon
   */
  calculateIconSpacing: PropTypes.func,
  /**
   * @ignore
   * adds additional hit area to the trigger
   */
  hitArea: PropTypes.bool,
  /**
   * @ignore
   * used to set padding underneath the trigger
   */
  triggerPaddingBottom: PropTypes.string,
  /**
   * @ignore
   * function that calculates the height of the drop down list item
   */
  calculateListItemHeight: PropTypes.func,
  /**
   * @ignore
   * function that calculates the padding inside of each list item
   */
  calculateListItemPadding: PropTypes.func,
  /**
   * @ignore
   * boolean that, if true, changes the hover states
   */
  hoverState: PropTypes.bool,
  /**
   * @ignore
   * boolean that, if true, changes the focus states
   */
  focusState: PropTypes.bool,
  /**
   * @ignore
   * passes through data for icons
   */
  iconConfig: PropTypes.object,
  /**
   * Allows a string to be provided for analytics.
   */
  'data-analyticstrack': PropTypes.string,
  /**
   * Allows a string to be provided for analytics.
   */
  'data-track': PropTypes.string,
  /**
   * Allows a string to be provided for click stream.
   */
  'data-clickstream': PropTypes.string,
  /**
   * Allows a unique ID to be passed to the component.
   */
  id: PropTypes.string,
};

const defaultProps = {
  className: null,
  disabled: false,
  error: false,
  size: 'normal',
  viewport: 'desktop',
  color: colors,
  selected: undefined,

  iconActiveState: false,
  calculateErrorLabelSpacing: _calculateErrorLabelSpacing,
  calculateIconSpacing: _calculateIconSpacing,
  hitArea: false,
  hoverState: false,
  focusState: false,
  typescale: TypographyConfig.getTypescale(),
  iconConfig: IconData,
  hiddenLabel: null,
};

const selectWidth = 156;
const selectWidthSmallMobile = 166;

const DropdownErrorWrapper = styled.div`
  margin-top: ${({ calculateErrorLabelSpacing, size }) =>
    calculateErrorLabelSpacing(size)};
`;

const DropdownWrapper = styled.span`
  position: relative;
  outline: none;
  display: flex;
  flex-direction: column;
`;

const HitArea = styled.span`
  position: absolute;
  top: ${({ viewport, size }) =>
    viewport === 'mobile' && size === 'small'
      ? calculateRem(-10)
      : viewport === 'mobile' && size === 'large'
      ? calculateRem(-5)
      : viewport === 'desktop' && size === 'small'
      ? calculateRem(-7.5)
      : 0};
  cursor: ${({ disabled }) => (disabled ? 'default' : 'pointer')};
  display: inline-block;
  height: ${calculateRem(44)};
  width: 100%;
  z-index: 1;
`;

const IconWrapper = styled.div`
  display: flex;
  justify-content: center;
  outline: none;
  padding-left: ${({ calculateIconSpacing, size }) =>
    calculateIconSpacing(size)};
`;

const SelectedTextWrapper = styled.div`
  overflow: hidden;
  text-overflow: ellipsis;
  text-align: left;
`;

class Dropdown extends Component {
  constructor(props) {
    super(props);

    this.focusTrigger = () => {
      if (this.triggerElem) this.triggerElem.focus();
    };

    this.state = {
      open: false,
      selectedOption: this.props.selected || undefined,
      keyboardFocused: false,
    };
  }

  componentDidUpdate = (prevProps, prevState) => {
    if (
      (!prevProps.selected || prevProps.selected !== this.props.selected) &&
      this.props.selected
    ) {
      this.setState({ selectedOption: this.props.selected, open: false });
    }
  };

  componentDidMount = () => {
    document.addEventListener('click', this.handleClickOutside);
  };

  componentWillUnmount = () => {
    document.removeEventListener('click', this.handleClickOutside);
  };

  handleClickOutside = e => {
    if (this.triggerElem && !this.triggerElem.contains(e.target)) {
      this.setState({ open: false });
    }
  };

  toggle = e => {
    this.setState({ open: !this.state.open });
  };
  _onKeyDown = e => {
    let key = e.keyCode;

    let entered = key === 13 || key === 32;
    let arrowed = key === 38 || key === 40;

    if (entered || arrowed) {
      this.setState({ keyboardFocused: true });
    }
    if (arrowed) this.toggle();
  };
  setTriggerRef = element => {
    this.triggerElem = element;
  };

  _getIconSize = (size, viewport, iconActiveState) => {
    if (!iconActiveState) {
      switch (size) {
        case 'normal':
          return 15;
        case 'large':
          return 'medium';
        case 'small':
        case 'medium':
        default:
          return 'extraSmall';
      }
    } else {
      if (
        (viewport === 'desktop' || viewport === 'tablet') &&
        size === 'large'
      ) {
        return 'large';
      } else if (viewport === 'mobile' && size === 'large') {
        return 'medium';
      } else if (
        (viewport === 'desktop' || viewport === 'tablet') &&
        size === 'small'
      ) {
        return 'small';
      } else return 'extraSmall';
    }
  };

  _onSelect = e => {
    this.setState({ open: false });
    this.props.onSelect && this.props.onSelect(e);
    this.triggerElem.focus();
  };

  _getWidth = (size, width, viewport) => {
    if (width) return width;

    return size !== 'small'
      ? calculateRem(selectWidth)
      : viewport === 'mobile'
      ? calculateRem(selectWidthSmallMobile)
      : calculateRem(selectWidth);
  };

  _getAriaLabel = () => {
    if (this.props.hiddenLabel && this.state.selectedOption) {
      return (
        this.state.selectedOption + 'selected from ' + this.props.hiddenLabel
      );
    } else if (!this.props.hiddenLabel && this.state.selectedOption) {
      return this.state.selectedOption + 'selected from dropdown select';
    } else if (this.props.hiddenLabel && !this.state.selectedOption) {
      return this.props.hiddenLabel;
    } else return 'dropdown select';
  };

  refKey = UNSAFE_SetEnvRef();

  render() {
    const {
      children,
      className,
      disabled,
      error,
      errorMsg,
      errorText,
      label,
      placeholder,
      size,
      color,
      width,
      viewport,
      selected,
      iconConfig,
      hitArea,
      hoverState,
      focusState,
      typescale,
      triggerPaddingBottom,
      calculateErrorLabelSpacing,
      calculateIconSpacing,
      calculateListItemHeight,
      calculateListItemPadding,
      iconActiveState,
      bodyConfig,
      titleConfig,
      id,
      'data-analyticstrack': analyticsTrack,
      'data-track': track,
      'data-clickstream': clickStream,
      hiddenLabel,
    } = this.props;

    let errorMessage = errorMsg ? errorMsg : errorText;
    let selectedOption =
      this.state.selectedOption ||
      (label ? label : selected ? selected : placeholder ? placeholder : '');
    let iconSize = this._getIconSize(size, viewport, iconActiveState);
    let selectWidth = this._getWidth(size, width, viewport);
    let errorState = error;

    let LabelType;
    if (typescale === 'VDS') {
      LabelType = Body;
    } else {
      LabelType = Micro;
    }
    const itemId = cuid();

    error &&
      !errorText &&
      console.error('Error Text for DropdownSelectMarketing MUST be provided');

    return (
      <DropdownWrapper tabIndex={-1} id={id} className={className}>
        <DropdownSelectMarketingTrigger
          triggerPaddingBottom={triggerPaddingBottom}
          hitArea={hitArea}
          focusState={focusState}
          bodyConfig={bodyConfig}
          titleConfig={titleConfig}
          typescale={typescale}
          onClick={this.toggle}
          onKeyDown={this._onKeyDown}
          disabled={disabled}
          error={error}
          size={size}
          viewport={viewport}
          selected={selected}
          setTriggerRef={this.setTriggerRef}
          data-clickstream={clickStream}
          data-analyticstrack={analyticsTrack}
          data-track={track}
          tabIndex={0}
          width={selectWidth}
          aria-expanded={this.state.open}
          aria-label={this._getAriaLabel()}
        >
          {hitArea && (
            <HitArea disabled={disabled} size={size} viewport={viewport} />
          )}
          <SelectedTextWrapper>{selectedOption}</SelectedTextWrapper>
          <IconWrapper
            size={size}
            viewport={viewport}
            calculateIconSpacing={calculateIconSpacing}
          >
            <Icon
              size={size}
              viewport={viewport}
              iconActiveState={iconActiveState}
              tabIndex={-1}
              data={iconConfig}
              name={this.state.open ? 'caret-up' : 'caret-down'}
              aria-hidden={true}
              color={disabled ? color.coolGray3 : color.black}
              size={iconSize}
            />
          </IconWrapper>
        </DropdownSelectMarketingTrigger>
        {this.state.open && (
          <DropdownSelectMarketingList
            width={selectWidth}
            keyboardFocused={this.state.keyboardFocused}
            onSelect={this._onSelect}
            size={size}
            viewport={viewport}
            titleConfig={titleConfig}
            bodyConfig={bodyConfig}
            typescale={typescale}
            hoverState={hoverState}
            focusState={focusState}
            onClick={this.focusTrigger}
            calculateListItemHeight={calculateListItemHeight}
            calculateListItemPadding={calculateListItemPadding}
            color={color}
            error={error}
            viewport={viewport}
            toggleList={this.toggle}
            itemId={itemId}
            trigger={this.triggerElem}
          >
            {children}
          </DropdownSelectMarketingList>
        )}
        {errorState && errorMessage && !disabled && !this.state.open && (
          <DropdownErrorWrapper
            color={color}
            size={size}
            calculateErrorLabelSpacing={calculateErrorLabelSpacing}
          >
            <LabelType
              color={disabled ? color.coolGray3 : color.black}
              config={typescale === 'VDS' ? bodyConfig : MicroConfig}
              typescale={typescale}
            >
              {errorMessage}
            </LabelType>
          </DropdownErrorWrapper>
        )}
      </DropdownWrapper>
    );
  }
}

Dropdown.propTypes = propTypes;
Dropdown.defaultProps = defaultProps;

export default withVDSManager(Dropdown);
