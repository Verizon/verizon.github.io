import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React from 'react';
import PropTypes from 'prop-types';
import once from '../../utils/once';
import ViewportManager from './ViewportManager';
import { breakpoints } from '@vds-core/theme';
var propTypes = {
  maxMobile: PropTypes.string,
  maxTablet: PropTypes.string
};
var defaultProps = {
  maxMobile: breakpoints.md,
  maxTablet: breakpoints.lg
};
/**
 * This is the root class to manage a variety of things for applications utilizing VDS.
 * A user will implement this class as a Wrapper around their application once.
 */

var VDSManager = /*#__PURE__*/function (_React$Component) {
  _inherits(VDSManager, _React$Component);

  var _super = _createSuper(VDSManager);

  function VDSManager(props) {
    var _this;

    _classCallCheck(this, VDSManager);

    _this = _super.call(this, props);
    ViewportManager.register(_this.props);
    return _this;
  }

  _createClass(VDSManager, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      ViewportManager.unregister(this.props);
    }
  }, {
    key: "render",
    value: function render() {
      if (!this.props.children) {
        return null;
      }

      return this.props.children;
    }
  }]);

  return VDSManager;
}(React.Component);

export default VDSManager;