import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n  z-index: 2;\n  position: absolute;\n  left: 0;\n  top: 100%;\n  margin: 0;\n  padding: 0;\n  width: ", ";\n\n  .slide-down[data-menu-list] {\n  }\n\n  > [data-menu] {\n    display: block;\n  }\n\n  &[data-menu-list] {\n    animation: ", " 0.2s ease;\n    background: ", ";\n    padding-bottom: 0;\n    padding-top: 0;\n\n    transition: border 400ms, height 350ms;\n  }\n\n  > [data-menu-item],\n  li {\n    display: flex;\n    align-items: center;\n    background: none;\n    border-left: 1px solid ", ";\n    border-right: 1px solid ", ";\n    border-bottom: 1px solid ", ";\n    box-sizing: border-box;\n    min-height: ", ";\n  }\n  > [data-menu-item],\n  li {\n    overflow-wrap: anywhere;\n    width: 100%;\n    display: flex;\n    align-items: center;\n    color: ", ";\n    cursor: pointer;\n    text-align: left;\n    text-decoration: none;\n    margin-top: ", ";\n\n    padding: ", ";\n\n    font-weight: ", ";\n    font-family: ", ";\n    font-size: ", ";\n    line-height: ", ";\n\n    &:hover {\n      color: ", ";\n    }\n\n    &:focus {\n      outline: none;\n      color: ", ";\n      transition: color 300ms;\n    }\n\n    ", "\n\n    ", "    \n\n    &:first-of-type {\n      margin-top: 0;\n    }\n  }\n\n  > [data-menu-item][data-selected] {\n    background: transparent;\n    color: ", ";\n    transition: color 300ms;\n  }\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  0% {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n  100% {\n    opacity: 1;\n    transform: translateY(0);\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import styled, { keyframes } from 'styled-components';
import { calculateRem } from '@uie/javascript-style-helpers';
import { BodyConfig, TitleConfig, TypographyConfig } from '@vds-core/typography';
import { colors } from '@vds-core/theme';
import UNSAFE_SetEnvRef from '@uie/set-env-ref';
/*
fontWeightBold represents the font weight found in 
typography used when the component is bolded. Font weight is
not exported by typography configs due to the fact that 
typography components may have multiple font weight options
*/

var fontWeightBold = 'bold';

function _calculateListItemHeight(size) {
  if (size === 'small') {
    return calculateRem(42);
  } else return calculateRem(56);
}

function _calculateListItemPadding(size, viewport) {
  if (size === 'small' && viewport === 'mobile') {
    return calculateRem(14, 14, 13.6, 14);
  } else if (size === 'small' && viewport !== 'mobile') {
    return calculateRem(13, 14, 12.2, 14);
  } else if (size !== 'small' && viewport === 'mobile') {
    return calculateRem(16, 12, 16, 12);
  } else {
    return calculateRem(13, 12, 12.6, 12);
  }
}

var propTypes = {
  /**
   * @ignore
   */
  color: PropTypes.object,

  /**
   * @ignore
   * config for passing though title typography
   */
  titleConfig: PropTypes.object,

  /**
   * @ignore
   * config for passing though bible typography
   */
  bodyConfig: PropTypes.object,

  /**
   * @ignore
   * passes through typescale via sting if there's more than one option [example 'VDS' instead of 'MVP']
   */
  typescale: PropTypes.string,

  /**
   * @ignore
   * function that calculates the height of the drop down list item
   */
  calculateListItemHeight: PropTypes.func,

  /**
   * @ignore
   * function that calculates the padding inside of each list item
   */
  calculateListItemPadding: PropTypes.func,

  /**
   * @ignore
   * boolean that, if true, changes the hover states
   */
  hoverState: PropTypes.bool,

  /**
   * @ignore
   * boolean that, if true, changes the focus states
   */
  focusState: PropTypes.bool,

  /**
   * @ignore
   * togggles list when executed
   */
  toggleList: PropTypes.func
};
var defaultProps = {
  color: colors,
  titleConfig: TitleConfig,
  bodyConfig: BodyConfig,
  typescale: TypographyConfig.getTypescale(),
  calculateListItemHeight: _calculateListItemHeight,
  calculateListItemPadding: _calculateListItemPadding,
  hoverState: false,
  focusState: false
};
var slideDown = /*#__PURE__*/keyframes(_templateObject());
var List = /*#__PURE__*/styled.ul.withConfig({
  displayName: "List",
  componentId: "sc-1fp3lpg-0"
})(_templateObject2(), function (_ref) {
  var width = _ref.width;
  return width;
}, slideDown, function (_ref2) {
  var color = _ref2.color;
  return color.white;
}, function (_ref3) {
  var color = _ref3.color;
  return color.coolGray3;
}, function (_ref4) {
  var color = _ref4.color;
  return color.coolGray3;
}, function (_ref5) {
  var color = _ref5.color;
  return color.coolGray3;
}, function (_ref6) {
  var calculateListItemHeight = _ref6.calculateListItemHeight,
      size = _ref6.size;
  return calculateListItemHeight(size);
}, function (_ref7) {
  var color = _ref7.color;
  return color.coolGray6;
}, calculateRem(-1), function (_ref8) {
  var calculateListItemPadding = _ref8.calculateListItemPadding,
      size = _ref8.size,
      viewport = _ref8.viewport;
  return calculateListItemPadding(size, viewport);
}, fontWeightBold, function (_ref9) {
  var body = _ref9.body;
  return body.fontFamily;
}, function (_ref10) {
  var body = _ref10.body;
  return calculateRem(body.fontSize);
}, function (_ref11) {
  var body = _ref11.body;
  return calculateRem(body.lineHeight);
}, function (_ref12) {
  var color = _ref12.color;
  return color.black;
}, function (_ref13) {
  var focusState = _ref13.focusState,
      color = _ref13.color;
  return focusState ? null : color.black;
}, function (_ref14) {
  var hoverState = _ref14.hoverState,
      color = _ref14.color;
  return hoverState && "\n      &:hover {\n        color: ".concat(color.black, ";\n        transition: color 300ms;\n      }\n    ");
}, function (_ref15) {
  var focusState = _ref15.focusState,
      color = _ref15.color;
  return focusState && "\n      &:focus {\n        outline: ".concat(calculateRem(1), " dashed ").concat(color.black, ";\n        outline-offset: -").concat(calculateRem(8), ";\n      }\n\n      &:hover,\n      &:active {\n        outline: none;\n        outline-offset: 0;\n      }\n\n    ");
}, function (_ref16) {
  var color = _ref16.color;
  return color.black;
});
/**
 * @ignore
 */

var DropdownList = /*#__PURE__*/function (_Component) {
  _inherits(DropdownList, _Component);

  var _super = _createSuper(DropdownList);

  function DropdownList(props) {
    var _this;

    _classCallCheck(this, DropdownList);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "componentDidMount", function () {
      var topOfList = _this.props.itemId + 'option=0';
      _this.props.keyboardFocused && document.getElementById(topOfList).focus();
    });

    _defineProperty(_assertThisInitialized(_this), "_onKeyDown", function (e) {
      var key = e.keyCode;
      var shift = e.shiftKey;
      var tab = key === 9;
      var currentId = e.target.id;
      var index = parseInt(currentId.split('=')[1]); //strips index from option id

      var itemPreface = _this.props.itemId + 'option=';
      var firstOption = itemPreface + '0';
      var lastOption = itemPreface + (_this.props.children.length - 1);
      var nextOption = itemPreface + (index + 1);
      var previousOption = itemPreface + (index - 1);
      e.preventDefault();
      if (shift && tab) key = 37; //if shift + tab, go backward

      switch (key) {
        case 37: //shift + tab, up or right moves position backwards in list

        case 38:
          if (currentId === firstOption) {
            document.getElementById(lastOption).focus();
          } else {
            document.getElementById(previousOption).focus();
          }

          break;

        case 9:
        case 39:
        case 40:
          //tab, down or left advances position in list
          if (currentId === lastOption) {
            document.getElementById(firstOption).focus();
          } else {
            document.getElementById(nextOption).focus();
          }

          break;

        case 27:
          //esc closes list
          _this.props.toggleList();

          _this.props.trigger.focus();

          break;
      }
    });

    _defineProperty(_assertThisInitialized(_this), "_renderChildren", function (children, itemId) {
      return React.Children.map(children, function (child, i) {
        var id = _this.props.itemId + 'option=' + i;
        var el = /*#__PURE__*/React.cloneElement(child, {
          id: id,
          selectionCallback: _this.props.onSelect
        });
        return el;
      });
    });

    return _this;
  }

  _createClass(DropdownList, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          color = _this$props.color,
          size = _this$props.size,
          viewport = _this$props.viewport,
          calculateListItemHeight = _this$props.calculateListItemHeight,
          calculateListItemPadding = _this$props.calculateListItemPadding,
          titleConfig = _this$props.titleConfig,
          bodyConfig = _this$props.bodyConfig,
          typescale = _this$props.typescale,
          hoverState = _this$props.hoverState,
          focusState = _this$props.focusState,
          children = _this$props.children,
          width = _this$props.width;
      var fontScale;

      if (size === 'small' && typescale !== 'VDS') {
        fontScale = 'desktop';
      } else {
        fontScale = viewport === 'mobile' ? 'mobile' : 'desktop';
      }

      var fontSize;

      if (typescale === 'VDS') {
        fontSize = size === 'small' ? 'small' : 'large';
      } else {
        if (size === 'small') {
          fontSize = viewport === 'mobile' ? 'small' : 'medium';
        } else {
          fontSize = 'large';
        }
      }

      var typeConfig;

      if (size !== 'small' || typescale === 'VDS') {
        typeConfig = titleConfig;
      } else {
        typeConfig = bodyConfig;
      }

      var body = typeConfig.getStyles(typescale, fontScale, fontSize);
      return /*#__PURE__*/React.createElement(List, _extends({
        width: width,
        onKeyDown: this._onKeyDown,
        role: "listbox",
        id: "dropdown-list",
        body: body,
        size: size,
        focusState: focusState,
        hoverState: hoverState,
        viewport: viewport,
        titleConfig: titleConfig,
        bodyConfig: bodyConfig,
        typescale: typescale,
        calculateListItemHeight: calculateListItemHeight,
        calculateListItemPadding: calculateListItemPadding,
        color: color,
        "data-menu-list": true
      }, this.props), this._renderChildren(children));
    }
  }]);

  return DropdownList;
}(Component);

DropdownList.defaultProps = defaultProps;
DropdownList.propTypes = propTypes;
export default DropdownList;