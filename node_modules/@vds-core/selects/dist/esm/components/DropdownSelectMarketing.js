import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _templateObject5() {
  var data = _taggedTemplateLiteral(["\n  overflow: hidden;\n  text-overflow: ellipsis;\n  text-align: left;\n"]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteral(["\n  display: flex;\n  justify-content: center;\n  outline: none;\n  padding-left: ", ";\n"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["\n  position: absolute;\n  top: ", ";\n  cursor: ", ";\n  display: inline-block;\n  height: ", ";\n  width: 100%;\n  z-index: 1;\n"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n  position: relative;\n  outline: none;\n  display: flex;\n  flex-direction: column;\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  margin-top: ", ";\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import UNSAFE_SetEnvRef from '@uie/set-env-ref';
import { calculateRem } from '@uie/javascript-style-helpers';
import DropdownSelectMarketingTrigger from './DropdownSelectMarketingTrigger';
import DropdownSelectMarketingList from './DropdownSelectMarketingList';
import Icon, { IconData } from '@vds-core/icons';
import { colors, calculateSpacing } from '@vds-core/theme';
import { Micro, Body, MicroConfig, TypographyConfig } from '@vds-core/typography';
import { withVDSManager } from '@vds-core/utilities';
import cuid from 'cuid';

function _calculateIconSpacing(size) {
  if (size === 'small') {
    return calculateSpacing('2X');
  } else {
    return calculateSpacing('1X');
  }
}

function _calculateErrorLabelSpacing(size) {
  if (size === 'large') {
    return calculateRem(3);
  } else if (size === 'small') {
    return calculateRem(1);
  } else {
    return calculateSpacing('1X');
  }
}

var propTypes = {
  /**
   * Items for the Dropdown List. Should use DropdownSelectOption.
   */
  children: PropTypes.node.isRequired,

  /**
   * @ignore
   */
  className: PropTypes.string,

  /**
   * disables the Dropdown
   */
  disabled: PropTypes.bool,

  /**
   * Notify the user if there is an error
   */
  error: PropTypes.bool,

  /**
   * @deprecated
   * Message displayed when there is an error
   */
  errorMsg: PropTypes.string,
  // DEPRECATED

  /**
   * Message displayed when there is an error
   */
  errorText: PropTypes.string,

  /**
   * @deprecated
   * Text shown in the dropdown trigger.
   */
  label: PropTypes.string,
  // DEPRECATED

  /**
   * Label for reading out meaningful text in aria-labels
   */
  hiddenLabel: PropTypes.string,

  /**
   * Text shown in the dropdown trigger.
   */
  placeholder: PropTypes.string,

  /**
   * The width of the dropdown. If no width is passed small dropdowns with be 156px and large dropdowns with be 145px wide.
   */
  width: PropTypes.string,

  /**
   * The size of the entire dropdown.
   */
  size: PropTypes.oneOf(['large', 'normal', 'medium', 'small']),

  /**
   * The viewport that the dropdown styling should conform to.
   */
  viewport: PropTypes.oneOf(['mobile', 'tablet', 'desktop']),

  /**
   * @ignore
   */
  color: PropTypes.object,

  /**
   * Selected item of the Dropdown List.
   */
  selected: PropTypes.node,

  /**
   * @ignore
   * string that sets the typescale for the typography (example: typescale === 'VDS')
   */
  typescale: PropTypes.string,

  /**
   * @ignore
   * config for body typography
   */
  bodyConfig: PropTypes.object,

  /**
   * @ignore
   * config for title typography
   */
  titleConfig: PropTypes.object,

  /**
   * @ignore
   * if true, the caret-down icon changes to caret-up if this.state.open is also true
   */
  iconActiveState: PropTypes.bool,

  /**
   * @ignore
   * calculates the margin on top of the error text
   */
  calculateErrorLabelSpacing: PropTypes.func,

  /**
   * @ignore
   * calculates the padding next to the icon
   */
  calculateIconSpacing: PropTypes.func,

  /**
   * @ignore
   * adds additional hit area to the trigger
   */
  hitArea: PropTypes.bool,

  /**
   * @ignore
   * used to set padding underneath the trigger
   */
  triggerPaddingBottom: PropTypes.string,

  /**
   * @ignore
   * function that calculates the height of the drop down list item
   */
  calculateListItemHeight: PropTypes.func,

  /**
   * @ignore
   * function that calculates the padding inside of each list item
   */
  calculateListItemPadding: PropTypes.func,

  /**
   * @ignore
   * boolean that, if true, changes the hover states
   */
  hoverState: PropTypes.bool,

  /**
   * @ignore
   * boolean that, if true, changes the focus states
   */
  focusState: PropTypes.bool,

  /**
   * @ignore
   * passes through data for icons
   */
  iconConfig: PropTypes.object,

  /**
   * Allows a string to be provided for analytics.
   */
  'data-analyticstrack': PropTypes.string,

  /**
   * Allows a string to be provided for analytics.
   */
  'data-track': PropTypes.string,

  /**
   * Allows a string to be provided for click stream.
   */
  'data-clickstream': PropTypes.string,

  /**
   * Allows a unique ID to be passed to the component.
   */
  id: PropTypes.string
};
var defaultProps = {
  className: null,
  disabled: false,
  error: false,
  size: 'normal',
  viewport: 'desktop',
  color: colors,
  selected: undefined,
  iconActiveState: false,
  calculateErrorLabelSpacing: _calculateErrorLabelSpacing,
  calculateIconSpacing: _calculateIconSpacing,
  hitArea: false,
  hoverState: false,
  focusState: false,
  typescale: TypographyConfig.getTypescale(),
  iconConfig: IconData,
  hiddenLabel: null
};
var selectWidth = 156;
var selectWidthSmallMobile = 166;
var DropdownErrorWrapper = /*#__PURE__*/styled.div.withConfig({
  displayName: "DropdownErrorWrapper",
  componentId: "sc-1aqp0gl-0"
})(_templateObject(), function (_ref) {
  var calculateErrorLabelSpacing = _ref.calculateErrorLabelSpacing,
      size = _ref.size;
  return calculateErrorLabelSpacing(size);
});
var DropdownWrapper = /*#__PURE__*/styled.span.withConfig({
  displayName: "DropdownWrapper",
  componentId: "sc-1aqp0gl-1"
})(_templateObject2());
var HitArea = /*#__PURE__*/styled.span.withConfig({
  displayName: "HitArea",
  componentId: "sc-1aqp0gl-2"
})(_templateObject3(), function (_ref2) {
  var viewport = _ref2.viewport,
      size = _ref2.size;
  return viewport === 'mobile' && size === 'small' ? calculateRem(-10) : viewport === 'mobile' && size === 'large' ? calculateRem(-5) : viewport === 'desktop' && size === 'small' ? calculateRem(-7.5) : 0;
}, function (_ref3) {
  var disabled = _ref3.disabled;
  return disabled ? 'default' : 'pointer';
}, calculateRem(44));
var IconWrapper = /*#__PURE__*/styled.div.withConfig({
  displayName: "IconWrapper",
  componentId: "sc-1aqp0gl-3"
})(_templateObject4(), function (_ref4) {
  var calculateIconSpacing = _ref4.calculateIconSpacing,
      size = _ref4.size;
  return calculateIconSpacing(size);
});
var SelectedTextWrapper = /*#__PURE__*/styled.div.withConfig({
  displayName: "SelectedTextWrapper",
  componentId: "sc-1aqp0gl-4"
})(_templateObject5());

var Dropdown = /*#__PURE__*/function (_Component) {
  _inherits(Dropdown, _Component);

  var _super = _createSuper(Dropdown);

  function Dropdown(props) {
    var _this;

    _classCallCheck(this, Dropdown);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "componentDidUpdate", function (prevProps, prevState) {
      if ((!prevProps.selected || prevProps.selected !== _this.props.selected) && _this.props.selected) {
        _this.setState({
          selectedOption: _this.props.selected,
          open: false
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "componentDidMount", function () {
      document.addEventListener('click', _this.handleClickOutside);
    });

    _defineProperty(_assertThisInitialized(_this), "componentWillUnmount", function () {
      document.removeEventListener('click', _this.handleClickOutside);
    });

    _defineProperty(_assertThisInitialized(_this), "handleClickOutside", function (e) {
      if (_this.triggerElem && !_this.triggerElem.contains(e.target)) {
        _this.setState({
          open: false
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "toggle", function (e) {
      _this.setState({
        open: !_this.state.open
      });
    });

    _defineProperty(_assertThisInitialized(_this), "_onKeyDown", function (e) {
      var key = e.keyCode;
      var entered = key === 13 || key === 32;
      var arrowed = key === 38 || key === 40;

      if (entered || arrowed) {
        _this.setState({
          keyboardFocused: true
        });
      }

      if (arrowed) _this.toggle();
    });

    _defineProperty(_assertThisInitialized(_this), "setTriggerRef", function (element) {
      _this.triggerElem = element;
    });

    _defineProperty(_assertThisInitialized(_this), "_getIconSize", function (size, viewport, iconActiveState) {
      if (!iconActiveState) {
        switch (size) {
          case 'normal':
            return 15;

          case 'large':
            return 'medium';

          case 'small':
          case 'medium':
          default:
            return 'extraSmall';
        }
      } else {
        if ((viewport === 'desktop' || viewport === 'tablet') && size === 'large') {
          return 'large';
        } else if (viewport === 'mobile' && size === 'large') {
          return 'medium';
        } else if ((viewport === 'desktop' || viewport === 'tablet') && size === 'small') {
          return 'small';
        } else return 'extraSmall';
      }
    });

    _defineProperty(_assertThisInitialized(_this), "_onSelect", function (e) {
      _this.setState({
        open: false
      });

      _this.props.onSelect && _this.props.onSelect(e);

      _this.triggerElem.focus();
    });

    _defineProperty(_assertThisInitialized(_this), "_getWidth", function (size, width, viewport) {
      if (width) return width;
      return size !== 'small' ? calculateRem(selectWidth) : viewport === 'mobile' ? calculateRem(selectWidthSmallMobile) : calculateRem(selectWidth);
    });

    _defineProperty(_assertThisInitialized(_this), "_getAriaLabel", function () {
      if (_this.props.hiddenLabel && _this.state.selectedOption) {
        return _this.state.selectedOption + 'selected from ' + _this.props.hiddenLabel;
      } else if (!_this.props.hiddenLabel && _this.state.selectedOption) {
        return _this.state.selectedOption + 'selected from dropdown select';
      } else if (_this.props.hiddenLabel && !_this.state.selectedOption) {
        return _this.props.hiddenLabel;
      } else return 'dropdown select';
    });

    _defineProperty(_assertThisInitialized(_this), "refKey", UNSAFE_SetEnvRef());

    _this.focusTrigger = function () {
      if (_this.triggerElem) _this.triggerElem.focus();
    };

    _this.state = {
      open: false,
      selectedOption: _this.props.selected || undefined,
      keyboardFocused: false
    };
    return _this;
  }

  _createClass(Dropdown, [{
    key: "render",
    value: function render() {
      var _React$createElement2;

      var _this$props = this.props,
          children = _this$props.children,
          className = _this$props.className,
          disabled = _this$props.disabled,
          error = _this$props.error,
          errorMsg = _this$props.errorMsg,
          errorText = _this$props.errorText,
          label = _this$props.label,
          placeholder = _this$props.placeholder,
          size = _this$props.size,
          color = _this$props.color,
          width = _this$props.width,
          viewport = _this$props.viewport,
          selected = _this$props.selected,
          iconConfig = _this$props.iconConfig,
          hitArea = _this$props.hitArea,
          hoverState = _this$props.hoverState,
          focusState = _this$props.focusState,
          typescale = _this$props.typescale,
          triggerPaddingBottom = _this$props.triggerPaddingBottom,
          calculateErrorLabelSpacing = _this$props.calculateErrorLabelSpacing,
          calculateIconSpacing = _this$props.calculateIconSpacing,
          calculateListItemHeight = _this$props.calculateListItemHeight,
          calculateListItemPadding = _this$props.calculateListItemPadding,
          iconActiveState = _this$props.iconActiveState,
          bodyConfig = _this$props.bodyConfig,
          titleConfig = _this$props.titleConfig,
          id = _this$props.id,
          analyticsTrack = _this$props['data-analyticstrack'],
          track = _this$props['data-track'],
          clickStream = _this$props['data-clickstream'],
          hiddenLabel = _this$props.hiddenLabel;
      var errorMessage = errorMsg ? errorMsg : errorText;
      var selectedOption = this.state.selectedOption || (label ? label : selected ? selected : placeholder ? placeholder : '');

      var iconSize = this._getIconSize(size, viewport, iconActiveState);

      var selectWidth = this._getWidth(size, width, viewport);

      var errorState = error;
      var LabelType;

      if (typescale === 'VDS') {
        LabelType = Body;
      } else {
        LabelType = Micro;
      }

      var itemId = cuid();
      error && !errorText && console.error('Error Text for DropdownSelectMarketing MUST be provided');
      return /*#__PURE__*/React.createElement(DropdownWrapper, {
        tabIndex: -1,
        id: id,
        className: className
      }, /*#__PURE__*/React.createElement(DropdownSelectMarketingTrigger, {
        triggerPaddingBottom: triggerPaddingBottom,
        hitArea: hitArea,
        focusState: focusState,
        bodyConfig: bodyConfig,
        titleConfig: titleConfig,
        typescale: typescale,
        onClick: this.toggle,
        onKeyDown: this._onKeyDown,
        disabled: disabled,
        error: error,
        size: size,
        viewport: viewport,
        selected: selected,
        setTriggerRef: this.setTriggerRef,
        "data-clickstream": clickStream,
        "data-analyticstrack": analyticsTrack,
        "data-track": track,
        tabIndex: 0,
        width: selectWidth,
        "aria-expanded": this.state.open,
        "aria-label": this._getAriaLabel()
      }, hitArea && /*#__PURE__*/React.createElement(HitArea, {
        disabled: disabled,
        size: size,
        viewport: viewport
      }), /*#__PURE__*/React.createElement(SelectedTextWrapper, null, selectedOption), /*#__PURE__*/React.createElement(IconWrapper, {
        size: size,
        viewport: viewport,
        calculateIconSpacing: calculateIconSpacing
      }, /*#__PURE__*/React.createElement(Icon, _defineProperty({
        size: size,
        viewport: viewport,
        iconActiveState: iconActiveState,
        tabIndex: -1,
        data: iconConfig,
        name: this.state.open ? 'caret-up' : 'caret-down',
        "aria-hidden": true,
        color: disabled ? color.coolGray3 : color.black
      }, "size", iconSize)))), this.state.open && /*#__PURE__*/React.createElement(DropdownSelectMarketingList, (_React$createElement2 = {
        width: selectWidth,
        keyboardFocused: this.state.keyboardFocused,
        onSelect: this._onSelect,
        size: size,
        viewport: viewport,
        titleConfig: titleConfig,
        bodyConfig: bodyConfig,
        typescale: typescale,
        hoverState: hoverState,
        focusState: focusState,
        onClick: this.focusTrigger,
        calculateListItemHeight: calculateListItemHeight,
        calculateListItemPadding: calculateListItemPadding,
        color: color,
        error: error
      }, _defineProperty(_React$createElement2, "viewport", viewport), _defineProperty(_React$createElement2, "toggleList", this.toggle), _defineProperty(_React$createElement2, "itemId", itemId), _defineProperty(_React$createElement2, "trigger", this.triggerElem), _React$createElement2), children), errorState && errorMessage && !disabled && !this.state.open && /*#__PURE__*/React.createElement(DropdownErrorWrapper, {
        color: color,
        size: size,
        calculateErrorLabelSpacing: calculateErrorLabelSpacing
      }, /*#__PURE__*/React.createElement(LabelType, {
        color: disabled ? color.coolGray3 : color.black,
        config: typescale === 'VDS' ? bodyConfig : MicroConfig,
        typescale: typescale
      }, errorMessage)));
    }
  }]);

  return Dropdown;
}(Component);

Dropdown.propTypes = propTypes;
Dropdown.defaultProps = defaultProps;
export default withVDSManager(Dropdown);