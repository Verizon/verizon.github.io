import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  display: flex;\n  position: relative;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  background: transparent;\n  border-bottom: ", ";\n  border-top: 0;\n  border-right: 0;\n  border-left: 0;\n  padding: 0;\n  margin: 0;\n  padding-bottom: ", ";\n  color: ", ";\n  cursor: ", ";\n  position: relative;\n  transition: border 300ms;\n  transition: color 300ms;\n  width: ", ";\n  overflow: ", ";\n  text-overflow: ellipsis;\n  z-index: 1;\n  white-space: nowrap;\n  &.focus-visible {\n    background: white;\n    color: ", ";\n    transition: color 300ms;\n  }\n\n  ", "\n\n  &:hover,\n  &:active {\n    outline: none;\n    outline-offset: 0;\n  }\n\n  font-weight: ", ";\n  font-family: ", ";\n  font-size: ", ";\n  line-height: ", ";\n\n  ", "\n\n  * {\n    outline: none;\n    outline-offset: 0;\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import UNSAFE_SetEnvRef from '@uie/set-env-ref';
import styled from 'styled-components';
import { calculateRem } from '@uie/javascript-style-helpers';
import { BodyConfig, TitleConfig, TypographyConfig } from '@vds-core/typography';
import { colors } from '@vds-core/theme';
/*
fontWeightBold represents the font weight found in 
typography used when the component is bolded. Font weight is
not exported by typography configs due to the fact that 
typography components may have multiple font weight options
*/

var fontWeightBold = 'bold';
var propTypes = {
  /**
   * @ignore
   * ref for component
   */
  setTriggerRef: PropTypes.func,

  /**
   * @ignore
   * config for colors
   */
  color: PropTypes.object,

  /**
   * @ignore
   * boolean that, if true, changes the hover states
   */
  size: PropTypes.oneOf(['large', 'normal', 'medium', 'small']),

  /**
   * @ignore
   * boolean that, if true, changes the hover states
   */
  viewport: PropTypes.oneOf(['mobile', 'tablet', 'desktop']),

  /**
   * @ignore
   * prop that changes the padding between the text and the bottom line
   */
  triggerPaddingBottom: PropTypes.string,

  /**
   * @ignore
   * string that changes which typescale to use for typography
   */
  typescale: PropTypes.string,

  /**
   * @ignore
   * config for body typography
   */
  bodyConfig: PropTypes.object,

  /**
   * @ignore
   * config for title typography
   */
  titleConfig: PropTypes.object,

  /**
   * @ignore
   * boolean that, if true, adds an additional hit area
   */
  hitArea: PropTypes.bool,

  /**
   * @ignore
   * boolean that, if true, changes the focus states
   */
  focusState: PropTypes.bool
};
var defaultProps = {
  setTriggerRef: function setTriggerRef() {},
  size: 'large',
  viewport: 'desktop',
  color: colors,
  hitArea: false,
  focusState: false,
  triggerPaddingBottom: calculateRem(2),
  typescale: TypographyConfig.getTypescale(),
  bodyConfig: BodyConfig,
  titleConfig: TitleConfig
};
var Trigger = /*#__PURE__*/styled.button.withConfig({
  displayName: "Trigger",
  componentId: "sc-3o9m2k-0"
})(_templateObject(), function (_ref) {
  var error = _ref.error,
      disabled = _ref.disabled,
      color = _ref.color;
  var borderColor = error ? color.error : disabled ? color.coolGray3 : color.black;
  var borderHeight = calculateRem(error ? 4 : 1);
  return "".concat(borderHeight, " solid ").concat(borderColor);
}, function (_ref2) {
  var triggerPaddingBottom = _ref2.triggerPaddingBottom;
  return triggerPaddingBottom;
}, function (props) {
  return props.disabled ? props.color.coolGray3 : props.selected ? props.color.black : props.color.coolGray6;
}, function (_ref3) {
  var disabled = _ref3.disabled;
  return disabled ? 'default' : 'pointer';
}, function (_ref4) {
  var width = _ref4.width;
  return width;
}, function (_ref5) {
  var hitArea = _ref5.hitArea;
  return hitArea ? 'visible' : 'hidden';
}, function (_ref6) {
  var color = _ref6.color;
  return color.black;
}, function (_ref7) {
  var focusState = _ref7.focusState,
      color = _ref7.color;
  return focusState && "\n  &:focus {\n    outline: ".concat(calculateRem(1), " dashed ").concat(color.black, ";\n    outline-offset: ").concat(calculateRem(2), ";\n    color: ").concat(color.black, ";\n  }\n\n  &:focus-visible {\n    outline: ").concat(calculateRem(1), " dashed ").concat(color.black, ";\n    outline-offset: ").concat(calculateRem(2), ";\n    color: ").concat(color.black, ";\n  }\n\n  :-moz-focusring {\n    color: transparent;\n    text-shadow: 0 0 0 #000;\n  }\n\n");
}, fontWeightBold, function (_ref8) {
  var body = _ref8.body;
  return body.fontFamily;
}, function (_ref9) {
  var body = _ref9.body;
  return calculateRem(body.fontSize);
}, function (_ref10) {
  var body = _ref10.body;
  return calculateRem(body.lineHeight);
}, function (_ref11) {
  var disabled = _ref11.disabled,
      color = _ref11.color;
  return !disabled && "\n      &:hover {\n        transition: color 300ms;\n        color: ".concat(color.black, ";\n      }\n  ");
});
/**
 * @ignore
 */

var DropdownTrigger = /*#__PURE__*/function (_Component) {
  _inherits(DropdownTrigger, _Component);

  var _super = _createSuper(DropdownTrigger);

  function DropdownTrigger() {
    var _this;

    _classCallCheck(this, DropdownTrigger);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "componentDidMount", function () {
      _this.props.setTriggerRef(_this.triggerElem);
    });

    _defineProperty(_assertThisInitialized(_this), "refKey", UNSAFE_SetEnvRef());

    return _this;
  }

  _createClass(DropdownTrigger, [{
    key: "render",
    value: function render() {
      var _this2 = this,
          _extends2;

      var _this$props = this.props,
          hitArea = _this$props.hitArea,
          color = _this$props.color,
          focusState = _this$props.focusState,
          size = _this$props.size,
          typescale = _this$props.typescale,
          viewport = _this$props.viewport,
          titleConfig = _this$props.titleConfig,
          bodyConfig = _this$props.bodyConfig;
      var fontScale;

      if (size === 'small' && typescale !== 'VDS') {
        fontScale = 'desktop';
      } else {
        fontScale = viewport === 'mobile' ? 'mobile' : 'desktop';
      }

      var fontSize;

      if (typescale === 'VDS') {
        fontSize = size === 'small' ? 'small' : 'large';
      } else {
        if (size === 'small') {
          fontSize = viewport === 'mobile' ? 'small' : 'medium';
        } else {
          fontSize = 'large';
        }
      }

      var typeConfig;

      if (size !== 'small' || typescale === 'VDS') {
        typeConfig = titleConfig;
      } else {
        typeConfig = bodyConfig;
      }

      var body = typeConfig.getStyles(typescale, fontScale, fontSize);
      return /*#__PURE__*/React.createElement(Trigger, _extends((_extends2 = {
        body: body,
        bodyConfig: bodyConfig,
        titleConfig: titleConfig,
        typescale: typescale,
        viewport: viewport
      }, _defineProperty(_extends2, "body", body), _defineProperty(_extends2, "size", size), _defineProperty(_extends2, "focusState", focusState), _defineProperty(_extends2, "hitArea", hitArea), _defineProperty(_extends2, "role", "listbox"), _defineProperty(_extends2, "aria-owns", "dropdown-list"), _extends2), this.props, _defineProperty({}, this.refKey, function (elem) {
        return _this2.triggerElem = elem;
      })));
    }
  }]);

  return DropdownTrigger;
}(Component);

DropdownTrigger.defaultProps = defaultProps;
DropdownTrigger.propTypes = propTypes;
export default DropdownTrigger;