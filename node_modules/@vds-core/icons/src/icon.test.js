import React from 'react';
import { render } from '@testing-library/react';
import Icon from '.';

const testData = {
  collapse: {
    viewBox: '0 0 24 24',
    paths: [
      {
        'vector-effect': 'non-scaling-stroke',
        d: 'M2,12h20',
      },
    ],
  },
  'arrow-left': {
    viewBox: '0 0 24 24',
    paths: [],
    polyline: [
      {
        'vector-effect': 'non-scaling-stroke',
        points: '12.29 2 2.55 12 12.29 22',
      },
    ],
    line: [
      {
        'vector-effect': 'non-scaling-stroke',
        x1: '2.55',
        y1: '12',
        x2: '22.02',
        y2: '12',
      },
    ],
  },
  success: {
    viewBox: '0 0 24 24',
    paths: [],
    circle: [
      {
        'vector-effect': 'non-scaling-stroke',
        cx: '12',
        cy: '12',
        r: '10',
      },
    ],
    polyline: [
      {
        'vector-effect': 'non-scaling-stroke',
        points: '7.32 12 10 14.67 15.86 8.79',
      },
    ],
  },
  error: {
    viewBox: '0 0 24 24',
    paths: [],
    rect: [
      {
        x: '11',
        y: '16.03',
        width: '2',
        height: '1.98',
      },
      {
        'vector-effect': 'non-scaling-stroke',
        x: '4.34',
        y: '4.34',
        width: '15.31',
        height: '15.31',
        rx: '2',
        transform: 'translate(-4.97 12) rotate(-45)',
      },
    ],
    polygon: [
      {
        points:
          '12.33 14.04 11.66 14.04 11 10.94 11 7.02 12.99 7.02 12.99 10.94 12.33 14.04',
      },
    ],
  },
};

test('<Icon - rect>', () => {
  const { container } = render(<Icon name="alertNotification" />);

  expect(container.firstChild).toMatchSnapshot();
});

test('<Icon - chat>', () => {
  const { container } = render(<Icon name="chat" />);

  expect(container.firstChild).toMatchSnapshot();
});

test('<Icon- add>', () => {
  const { container } = render(<Icon name="addFolder" />);

  expect(container.firstChild).toMatchSnapshot();
});

test('<Icon size="extraLarge" name="caret-left"/>', () => {
  const { container } = render(<Icon size="extraLarge" name="caret-left" />);

  expect(container.firstChild).toMatchSnapshot();
});

test('<Icon size="medium" name="caret-left" />', () => {
  const { container } = render(<Icon size="medium" name="caret-left" />);

  expect(container.firstChild).toMatchSnapshot();
});

test('<Icon backgroundColor="black" size="small" name="caret-left" />', () => {
  const { container } = render(
    <Icon backgroundColor="black" size="small" name="caret-left" />
  );

  expect(container.firstChild).toMatchSnapshot();
});

test('<Icon size="extraSmall" name="caret-left" />', () => {
  const { container } = render(<Icon size="extraSmall" name="caret-left" />);

  expect(container.firstChild).toMatchSnapshot();
});

test('<Icon size="large" name="caret-left" />', () => {
  const { container } = render(<Icon size="large" name="info-white" />);

  expect(container.firstChild).toMatchSnapshot();
});

test('<Icon size={23} name="caret-left" />', () => {
  const { container } = render(<Icon size={23} name="caret-left" />);

  expect(container.firstChild).toMatchSnapshot();
});

test('<Icon size="large" name="caret-left" /> 1.0', () => {
  const { container } = render(
    <Icon
      focusState
      focused
      data={testData}
      hasStroke
      medium
      size="large"
      name="error"
    />
  );

  expect(container.firstChild).toMatchSnapshot();
});

test('<Icon size="large" name="caret-left" /> 1.0', () => {
  const { container } = render(
    <Icon focusState data={testData} medium size="large" name="collapse" />
  );

  expect(container.firstChild).toMatchSnapshot();
});

test('<Icon size="large" name="caret-left" /> 1.0', () => {
  const { container } = render(
    <Icon
      inverted
      color={undefined}
      data={testData}
      hasStroke
      ariaLabel="test aria label"
      size="large"
      name="success"
    />
  );

  expect(container.firstChild).toMatchSnapshot();
});

test('<Icon size="large" name="caret-left" /> 1.0', () => {
  const { container } = render(
    <Icon
      inverted
      data={testData}
      hasStroke
      ariaLabel="test aria label"
      size="large"
      name="arrow-left"
    />
  );

  expect(container.firstChild).toMatchSnapshot();
});

test('VDS Icon', () => {
  const { container } = render(
    <Icon
      medium={true}
      inverted
      data={testData}
      hasStroke
      ariaLabel="test aria label"
      size="large"
      name="arrow-left"
    />
  );

  expect(container.firstChild).toMatchSnapshot();
});
