import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { colors } from '@vds-core/theme';
import TypographyConfig from '../../typographyConfig';
import defaultConfig from './config';

import fontColorPropType from '../../util/fontColorPropType';
import { Typography } from '../Typography';
import { withVDSManager } from '@vds-core/utilities';

const propTypes = {
  /**
   * Primitive used for the component.
   */
  primitive: PropTypes.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'span', 'p']),
  /**
   * Viewport the font styling is based on. Desktop and tablet are the same size
   */
  viewport: PropTypes.oneOf(['desktop', 'mobile', 'tablet']),
  /**
   * Content that will be passed to the component.
   */
  children: PropTypes.node,
  /**
   * Color of the text.
   */
  color: fontColorPropType,
  /**
   * Allows for specific typescale to be passed to override global config.
   */
  typescale: PropTypes.oneOf(['VDS', 'MVP']),
  /**
   * If the theme object contains the `typescale` key and no typescale prop was passed global typescale is overriden by theme.
   */
  theme: PropTypes.object,
  /**
   * The tabIndex of the text.
   */
  tabIndex: PropTypes.number,
  /**
   * @ignore
   */
  config: PropTypes.object,
  /**
   * Assigns an Id to the component
   */
  id: PropTypes.string,
  /**
   * Adds an aria-labelledby attribute to the component
   */
  ariaLabelledBy: PropTypes.string,
};

const defaultProps = {
  primitive: 'p',
  viewport: 'desktop',
  children: null,
  color: colors.black,
  config: defaultConfig,
};

const StyledMicro = styled(Typography)`
  &:active,
  &:focus,
  &:hover {
    outline: none;
  }
`;

const Micro = props => {
  const {
    children,
    primitive,
    viewport,
    color,
    typescale,
    theme,
    tabIndex,
    config,
    fontsConfig: fontsConfigProp,
    ariaLabel,
    id,
    ariaLabelledBy,
  } = props;

  let // What typescale is being used for configuration
    typescaleToUse = typescale
      ? typescale
      : theme && theme.typescale
      ? theme.typescale
      : TypographyConfig.getTypescale(),
    viewportToUse = viewport === 'mobile' ? 'mobile' : 'desktop',
    // What is the specific font configuration we are using
    fontConfig = config[typescaleToUse][viewportToUse];

  return (
    <StyledMicro
      fontSize={fontConfig.fontSize}
      fontWeight={fontConfig.fontWeight}
      fontFamily={fontConfig.fontFamily}
      lineheight={fontConfig.lineHeight}
      primitive={primitive}
      color={color}
      tabIndex={tabIndex}
      aria-hidden={tabIndex < 0}
      fontsconfig={fontsConfigProp}
      aria-label={ariaLabel}
      id={id}
      aria-labelledby={ariaLabelledBy}
    >
      {children}
    </StyledMicro>
  );
};

Micro.propTypes = propTypes;
Micro.defaultProps = defaultProps;

export default withVDSManager(Micro);
