import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { colors } from '@vds-core/theme';
import TypographyConfig from '../../typographyConfig';
import defaultConfig from './config';
import fontColorPropType from '../../util/fontColorPropType';
import { Typography } from '../Typography';
import { withVDSManager } from '@vds-core/utilities';

const propTypes = {
  /**
   * Primitive used for the component.
   */
  primitive: PropTypes.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'span', 'p']),
  /**
   * Viewport the font styling is based on. Desktop and tablet are the same size.
   */
  viewport: PropTypes.oneOf(['desktop', 'mobile', 'tablet']),
  /**
   * Size of the typescale that will be used.
   */
  size: PropTypes.oneOf([
    'XSmall',
    'extraSmall',
    'small',
    'medium',
    'large',
    'extraLarge',
    'extraExtraLarge',
    'XLarge',
    '2XLarge',
  ]),
  /**
   * Content that will be passed to the component.
   */
  children: PropTypes.node,
  /**
   * Color of the text.
   */
  color: fontColorPropType,
  /**
   * @ignore
   */
  bold: PropTypes.bool,
  /**
   * Allows for specific typescale to be passed to override global config.
   */
  typescale: PropTypes.oneOf(['VDS', 'MVP', 'Marketing']),
  /**
   * If the theme object contains the `typescale` key and no typescale prop was passed global typescale is overriden by theme.
   */
  theme: PropTypes.object,
  /**
   * The tabIndex of the text.
   */
  tabIndex: PropTypes.number,
  /**
   * @ignore
   */
  config: PropTypes.object,
  /**
   * @ignore
   */
  getFontWeight: PropTypes.func,
  /**
   * Assigns an Id to the component
   */
  id: PropTypes.string,
  /**
   * Adds an aria-labelledby attribute to the component
   */
  ariaLabelledBy: PropTypes.string,
};

const defaultProps = {
  config: defaultConfig,
  viewport: 'desktop',
  size: 'small',
  children: null,
  color: colors.black,
  bold: true,
  getFontWeight: getTitleFontWeight,
};

const primitiveMap = {
  extraSmall: 'span',
  small: 'h5',
  medium: 'h4',
  large: 'h3',
  extraLarge: 'h2',
  extraExtraLarge: 'h1',
};

const StyledTitle = styled(Typography)`
  &:active,
  &:focus,
  &:hover {
    outline: none;
  }
`;

function getTitleFontWeight(typescale, bold, size) {
  !bold &&
    size !== 'medium' &&
    console.warn(
      'Warning: `bold` prop can only be false when `size` = `medium`'
    );
  switch (typescale) {
    case 'MVP':
      return !bold && size === 'medium' ? '400' : '750';
    case 'VDS' || 'Marketing':
    default:
      return !bold && size === 'medium' ? 'normal' : 'bold';
  }
}

const Title = props => {
  const {
    children,
    primitive: primitiveProp,
    viewport,
    size,
    color,
    bold,
    typescale,
    theme,
    tabIndex,
    config,
    getFontWeight,
    fontsConfig: fontsConfigProp,
    ariaLabel,
    id,
    ariaLabelledBy,
  } = props;

  let // What typescale is being used for configuration
    typescaleToUse = typescale
      ? typescale
      : theme && theme.typescale
      ? theme.typescale
      : TypographyConfig.getTypescale(),
    viewportToUse = viewport === 'mobile' ? 'mobile' : 'desktop',
    // What is the specific font configuration we are using
    fontConfig = config[typescaleToUse][viewportToUse][size],
    fontWeight = getFontWeight(typescaleToUse, bold, size);

  function _setPrimitive() {
    if (size) {
      return primitiveMap[size];
    } else {
      return 'h5';
    }
  }

  let primitive = primitiveProp ? primitiveProp : _setPrimitive();

  return (
    <StyledTitle
      fontSize={fontConfig.fontSize}
      fontWeight={fontWeight}
      fontFamily={fontConfig.fontFamily}
      lineheight={fontConfig.lineHeight}
      primitive={primitive}
      color={color}
      tabIndex={tabIndex}
      aria-hidden={tabIndex < 0}
      fontsconfig={fontsConfigProp}
      aria-label={ariaLabel}
      id={id}
      aria-labelledby={ariaLabelledBy}
    >
      {children}
    </StyledTitle>
  );
};

Title.propTypes = propTypes;
Title.defaultProps = defaultProps;

export default withVDSManager(Title);
