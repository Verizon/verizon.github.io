import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  &:active,\n  &:focus,\n  &:hover {\n    outline: none;\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { colors } from '@vds-core/theme';
import TypographyConfig from '../../typographyConfig';
import defaultConfig from './config';
import fontColorPropType from '../../util/fontColorPropType';
import { Typography } from '../Typography';
import { withVDSManager } from '@vds-core/utilities';
var propTypes = {
  /**
   * Primitive used for the component.
   */
  primitive: PropTypes.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'span', 'p']),

  /**
   * Viewport the font styling is based on. Desktop and tablet are the same size.
   */
  viewport: PropTypes.oneOf(['desktop', 'mobile', 'tablet']),

  /**
   * Size of the typescale that will be used.
   */
  size: PropTypes.oneOf(['XSmall', 'extraSmall', 'small', 'medium', 'large', 'extraLarge', 'extraExtraLarge', 'XLarge', '2XLarge']),

  /**
   * Content that will be passed to the component.
   */
  children: PropTypes.node,

  /**
   * Color of the text.
   */
  color: fontColorPropType,

  /**
   * @ignore
   */
  bold: PropTypes.bool,

  /**
   * Allows for specific typescale to be passed to override global config.
   */
  typescale: PropTypes.oneOf(['VDS', 'MVP', 'Marketing']),

  /**
   * If the theme object contains the `typescale` key and no typescale prop was passed global typescale is overriden by theme.
   */
  theme: PropTypes.object,

  /**
   * The tabIndex of the text.
   */
  tabIndex: PropTypes.number,

  /**
   * @ignore
   */
  config: PropTypes.object,

  /**
   * @ignore
   */
  getFontWeight: PropTypes.func,

  /**
   * Assigns an Id to the component
   */
  id: PropTypes.string,

  /**
   * Adds an aria-labelledby attribute to the component
   */
  ariaLabelledBy: PropTypes.string
};
var defaultProps = {
  config: defaultConfig,
  viewport: 'desktop',
  size: 'small',
  children: null,
  color: colors.black,
  bold: true,
  getFontWeight: getTitleFontWeight
};
var primitiveMap = {
  extraSmall: 'span',
  small: 'h5',
  medium: 'h4',
  large: 'h3',
  extraLarge: 'h2',
  extraExtraLarge: 'h1'
};
var StyledTitle = /*#__PURE__*/styled(Typography).withConfig({
  displayName: "StyledTitle",
  componentId: "sc-155xzr0-0"
})(_templateObject());

function getTitleFontWeight(typescale, bold, size) {
  !bold && size !== 'medium' && console.warn('Warning: `bold` prop can only be false when `size` = `medium`');

  switch (typescale) {
    case 'MVP':
      return !bold && size === 'medium' ? '400' : '750';

    case 'VDS' || 'Marketing':
    default:
      return !bold && size === 'medium' ? 'normal' : 'bold';
  }
}

var Title = function Title(props) {
  var children = props.children,
      primitiveProp = props.primitive,
      viewport = props.viewport,
      size = props.size,
      color = props.color,
      bold = props.bold,
      typescale = props.typescale,
      theme = props.theme,
      tabIndex = props.tabIndex,
      config = props.config,
      getFontWeight = props.getFontWeight,
      fontsConfigProp = props.fontsConfig,
      ariaLabel = props.ariaLabel,
      id = props.id,
      ariaLabelledBy = props.ariaLabelledBy;
  var // What typescale is being used for configuration
  typescaleToUse = typescale ? typescale : theme && theme.typescale ? theme.typescale : TypographyConfig.getTypescale(),
      viewportToUse = viewport === 'mobile' ? 'mobile' : 'desktop',
      // What is the specific font configuration we are using
  fontConfig = config[typescaleToUse][viewportToUse][size],
      fontWeight = getFontWeight(typescaleToUse, bold, size);

  function _setPrimitive() {
    if (size) {
      return primitiveMap[size];
    } else {
      return 'h5';
    }
  }

  var primitive = primitiveProp ? primitiveProp : _setPrimitive();
  return /*#__PURE__*/React.createElement(StyledTitle, {
    fontSize: fontConfig.fontSize,
    fontWeight: fontWeight,
    fontFamily: fontConfig.fontFamily,
    lineheight: fontConfig.lineHeight,
    primitive: primitive,
    color: color,
    tabIndex: tabIndex,
    "aria-hidden": tabIndex < 0,
    fontsconfig: fontsConfigProp,
    "aria-label": ariaLabel,
    id: id,
    "aria-labelledby": ariaLabelledBy
  }, children);
};

Title.propTypes = propTypes;
Title.defaultProps = defaultProps;
export default withVDSManager(Title);