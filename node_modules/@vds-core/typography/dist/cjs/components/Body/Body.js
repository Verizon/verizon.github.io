"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _theme = require("@vds-core/theme");

var _typographyConfig = _interopRequireDefault(require("../../typographyConfig"));

var _fontColorPropType = _interopRequireDefault(require("../../util/fontColorPropType"));

var _Typography = require("../Typography");

var _utilities = require("@vds-core/utilities");

var _config = _interopRequireDefault(require("./config"));

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  &:active,\n  &:focus,\n  &:hover {\n    outline: none;\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function getBodyFontWeight(typescale, bold) {
  switch (typescale) {
    case 'MVP':
    case 'VDS':
      return bold ? '750' : '400';
    // 400 is mapped to match 55 Roman

    default:
      return bold ? 'bold' : 'normal';
  }
}

var propTypes = {
  /**
   * Primitive used for the component.
   */
  primitive: _propTypes["default"].oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'span', 'p']),

  /**
   * Viewport the font styling is based on. Desktop and tablet are the same size.
   */
  viewport: _propTypes["default"].oneOf(['desktop', 'tablet', 'mobile']),

  /**
   * Size of the typescale that will be used.
   */
  size: _propTypes["default"].oneOf(['small', 'medium', 'large']),

  /**
   * Content that will be passed to the component.
   */
  children: _propTypes["default"].node,

  /**
   * The color of the text.
   */
  color: _fontColorPropType["default"],

  /**
   * Adds a fontWeight of bold.
   */
  bold: _propTypes["default"].bool,

  /**
   * Allows for specific typescale to be passed to override global config.
   */
  typescale: _propTypes["default"].oneOf(['VDS', 'MVP']),

  /**
   * If the theme object contains the `typescale` key and no typescale prop was passed global typescale is overriden by theme.
   */
  theme: _propTypes["default"].object,

  /**
   * The tabIndex of the text.
   */
  tabIndex: _propTypes["default"].number,

  /**
   * @ignore
   */
  config: _propTypes["default"].object,

  /**
   * @ignore
   */
  getfontWeight: _propTypes["default"].func,

  /**
   * Assigns an Id to the component
   */
  id: _propTypes["default"].string,

  /**
   * Adds an aria-labelledby attribute to the component
   */
  ariaLabelledBy: _propTypes["default"].string
};
var defaultProps = {
  primitive: 'p',
  viewport: 'desktop',
  size: 'small',
  children: null,
  color: _theme.colors.black,
  bold: false,
  config: _config["default"],
  getFontWeight: getBodyFontWeight
};
var StyledBody = /*#__PURE__*/(0, _styledComponents["default"])(_Typography.Typography).withConfig({
  displayName: "StyledBody",
  componentId: "sc-1s1yqd8-0"
})(_templateObject());

var Body = function Body(props) {
  var config = props.config,
      children = props.children,
      primitive = props.primitive,
      viewport = props.viewport,
      size = props.size,
      color = props.color,
      bold = props.bold,
      typescale = props.typescale,
      theme = props.theme,
      tabIndex = props.tabIndex,
      getFontWeight = props.getFontWeight,
      fontsConfigProp = props.fontsConfig,
      ariaLabel = props.ariaLabel,
      id = props.id,
      ariaLabelledBy = props.ariaLabelledBy;
  var // What typescale is being used for configuration
  typescaleToUse = typescale ? typescale : theme && theme.typescale ? theme.typescale : _typographyConfig["default"].getTypescale(),
      viewportToUse = viewport === 'mobile' ? 'mobile' : 'desktop',
      // What is the specific font configuration we are using
  fontConfig = config[typescaleToUse][viewportToUse][size],
      fontWeight = getFontWeight(typescaleToUse, bold);
  return /*#__PURE__*/_react["default"].createElement(StyledBody, {
    fontSize: fontConfig.fontSize,
    fontWeight: fontWeight,
    fontFamily: fontConfig.fontFamily,
    lineheight: fontConfig.lineHeight,
    letterSpacing: fontConfig.letterSpacing && fontConfig.letterSpacing,
    primitive: primitive,
    color: color,
    tabIndex: tabIndex,
    "aria-hidden": tabIndex < 0,
    fontsconfig: fontsConfigProp,
    "aria-label": ariaLabel,
    id: id,
    "aria-labelledby": ariaLabelledBy
  }, children);
};

Body.propTypes = propTypes;
Body.defaultProps = defaultProps;

var _default = (0, _utilities.withVDSManager)(Body);

exports["default"] = _default;