import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  display: none;\n  outline: none;\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
var propTypes = {
  /**
   * @ignore
   */
  children: PropTypes.node,

  /**
   * @ignore
   */
  label: PropTypes.string.isRequired,

  /**
   * @ignore
   */
  isHidden: PropTypes.bool,

  /**
   * @ignore
   */
  uniqueId: PropTypes.string,

  /**
   * @ignore
   */
  className: PropTypes.string
};
var defaultProps = {
  isHidden: false,
  uniqueId: undefined,
  className: null
};
var StyledPanel = /*#__PURE__*/styled.div.withConfig({
  displayName: "StyledPanel",
  componentId: "yzzvp2-0"
})(_templateObject());
/**
 * @ignore
 */

var TabPanel = function TabPanel(_ref) {
  var isHidden = _ref.isHidden,
      label = _ref.label,
      uniqueId = _ref.uniqueId,
      children = _ref.children,
      className = _ref.className;
  var styles = isHidden ? {
    display: 'none'
  } : {
    display: 'block'
  };
  return /*#__PURE__*/React.createElement(StyledPanel, {
    id: "tabPanel_".concat(uniqueId),
    "aria-hidden": isHidden,
    "aria-labelledby": "".concat(uniqueId),
    role: "tabpanel",
    style: styles,
    tabIndex: "-1",
    className: className
  }, children);
};

TabPanel.propTypes = propTypes;
TabPanel.defaultProps = defaultProps;
export default TabPanel;