import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

function _templateObject3() {
  var data = _taggedTemplateLiteral([""]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n  display: flex;\n  justify-content: middle;\n  width: 100%;\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  position: relative;\n  padding: 0px;\n  border: 0;\n  display: inline-block;\n  margin: 0;\n  text-decoration: none;\n  text-align: left;\n  cursor: pointer;\n  background-color: transparent;\n  appearance: none;\n  border-radius: 0;\n  height: ", ";\n  min-height: ", ";\n  line-height: ", ";\n  font-size: ", ";\n  font-family: ", ";\n  font-weight: ", ";\n  color: ", ";\n\n  &:active,\n  &:visited,\n  &:hover {\n    outline: none;\n  }\n  > * {\n    outline: none;\n  }\n\n  > * {\n    height: 100%;\n    width: 100%;\n  }\n\n  ", ";\n\n  ", ";\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { calculateRem } from '@uie/javascript-style-helpers';
import { TitleConfig, TypographyConfig } from '@vds-core/typography';
import { colors } from '@vds-core/theme';
var coreTypescale = TypographyConfig.getTypescale();
/*
fontWeightStrong represents the font weight found in 
typography used when the component is bolded. Font weight is
not exported by typography configs due to the fact that 
typography components may have multiple font weight options
*/

var fontWeightStrong = 750;
var fontWeightVDS = 700;
var propTypes = {
  /**
   * @ignore
   */
  label: PropTypes.string.isRequired,

  /**
   * @ignore
   */
  isActive: PropTypes.bool,
  // DEPRECATED

  /**
   * @ignore
   */
  selected: PropTypes.bool,

  /**
   * @ignore
   */
  accentFill: PropTypes.bool,

  /**
   * @ignore
   */
  indicatorFillTab: PropTypes.bool,

  /**
   * @ignore
   */
  accentPosition: PropTypes.oneOf(['bottom', 'top', 'none']),
  //DEPRECATED

  /**
   * @ignore
   */
  indicatorPosition: PropTypes.oneOf(['bottom', 'top', 'none']),

  /**
   * @ignore
   */
  uniqueId: PropTypes.string,

  /**
   * @ignore
   */
  tabHeight: PropTypes.string,

  /**
   * @ignore
   */
  focusState: PropTypes.bool,

  /**
   * @ignore
   */
  minHeight: PropTypes.bool,

  /**
   * @ignore
   */
  typescale: PropTypes.string,

  /**
   * @ignore
   */
  titleConfig: PropTypes.object,

  /**
   * @ignore
   */
  colorConfig: PropTypes.object
};
var defaultProps = {
  selected: false,
  accentFill: false,
  indicatorFillTab: false,
  indicatorPosition: 'top',
  uniqueId: undefined,
  tabHeight: '44px',
  focusState: false,
  minHeight: false,
  typescale: coreTypescale,
  titleConfig: TitleConfig,
  colorConfig: colors
};

var buildAccentStyles = function buildAccentStyles(props) {
  var accentFill = props.accentFill,
      indicatorFillTab = props.indicatorFillTab,
      accentPosition = props.accentPosition,
      indicatorPosition = props.indicatorPosition,
      selected = props.selected,
      colorConfig = props.colorConfig;
  var styles = '';
  var position = accentPosition || indicatorPosition;

  if (accentFill || indicatorFillTab) {
    styles += "\n      width: ".concat(calculateRem(80), ";\n      padding-right: 1rem;\n      margin-right: 0;\n    ");
  } else {
    styles += "\n      padding-right: 0;\n    ";
  }

  styles += "\n    border-top: ".concat(position === 'top' ? calculateRem(4) : 0, " solid transparent;\n    border-bottom: ").concat(position === 'bottom' ? calculateRem(4) : 0, " solid transparent;\n    border-").concat(position, "-color: ").concat(selected ? colorConfig.red : colorConfig.coolGray6, ";\n    transition: width 0.2s ease, background-color 0.2s ease;\n  ");

  if (!selected) {
    styles += "\n      border-".concat(position, "-color: transparent;\n      &:hover {\n        border-").concat(position, "-color: ").concat(colorConfig.coolGray6, ";\n      }\n    ");
  }

  return styles;
}; //padding: ${calculateRem(16, 0, 16, 0)};


var StyledTabButton = /*#__PURE__*/styled.button.withConfig({
  displayName: "StyledTabButton",
  componentId: "xumbrb-0"
})(_templateObject(), function (_ref) {
  var tabHeight = _ref.tabHeight;
  return tabHeight;
}, function (_ref2) {
  var minHeight = _ref2.minHeight;
  return minHeight ? '44px' : 'none';
}, function (_ref3) {
  var titleConfig = _ref3.titleConfig;
  return calculateRem(titleConfig.lineHeight);
}, function (_ref4) {
  var titleConfig = _ref4.titleConfig;
  return calculateRem(titleConfig.fontSize);
}, function (_ref5) {
  var titleConfig = _ref5.titleConfig;
  return titleConfig.fontFamily;
}, function (_ref6) {
  var typescale = _ref6.typescale;
  return typescale === 'VDS' ? fontWeightVDS : fontWeightStrong;
}, function (_ref7) {
  var selected = _ref7.selected,
      colorConfig = _ref7.colorConfig;
  return selected ? colorConfig.black : colorConfig.coolGray6;
}, function (_ref8) {
  var focusState = _ref8.focusState,
      titleConfig = _ref8.titleConfig,
      colorConfig = _ref8.colorConfig;
  return focusState && "\n  &:focus:not(:hover) {\n    outline: none;\n    span {\n      position: relative;\n      display: block;\n      height: auto;\n      width: auto;\n      &::after {\n        border: ".concat(calculateRem(1), " dashed ").concat(colorConfig.black, ";\n        content: '';\n        top: ").concat(calculateRem(-2), ";\n        bottom: ").concat(calculateRem(-3), ";\n        left: ").concat(calculateRem(-3), ";\n        width: calc(100% + ").concat(calculateRem(4), ");\n        position: absolute;\n      }\n    }\n  }\n  &::-moz-focus-inner, \n  ::-moz-focus-inner {\n    border: 0;\n  }\n  &:focus:hover {\n    outline:none;\n  }\n  ");
}, function (props) {
  return buildAccentStyles(props);
});
var ButtonContent = /*#__PURE__*/styled.span.withConfig({
  displayName: "ButtonContent",
  componentId: "xumbrb-1"
})(_templateObject2());
var TabWrapper = /*#__PURE__*/styled.span.withConfig({
  displayName: "TabWrapper",
  componentId: "xumbrb-2"
})(_templateObject3());
/**
 * @ignore
 */

var TabButton = function TabButton(_ref9) {
  var accentFill = _ref9.accentFill,
      indicatorFillTab = _ref9.indicatorFillTab,
      indicatorPosition = _ref9.indicatorPosition,
      accentPosition = _ref9.accentPosition,
      isActive = _ref9.isActive,
      selected = _ref9.selected,
      label = _ref9.label,
      uniqueId = _ref9.uniqueId,
      tabHeight = _ref9.tabHeight,
      focusState = _ref9.focusState,
      typescale = _ref9.typescale,
      titleConfig = _ref9.titleConfig,
      colorConfig = _ref9.colorConfig,
      minHeight = _ref9.minHeight,
      analyticsTrack = _ref9.analyticsTrack,
      track = _ref9.track,
      clickStream = _ref9.clickStream;

  function _blurElem(e) {
    if (e.type === 'click' && e.detail !== 0) {
      e.currentTarget.blur();
    }
  }

  var fontsize = typescale === 'VDS' ? 'XSmall' : 'extraSmall';
  var titleExtraSmall = titleConfig.getStyles(typescale, 'desktop', fontsize);
  return /*#__PURE__*/React.createElement(StyledTabButton, {
    id: "".concat(uniqueId),
    "aria-controls": "tabPanel_".concat(uniqueId),
    role: "tab",
    "aria-selected": isActive || selected,
    tabIndex: 0,
    accentFill: accentFill,
    indicatorFillTab: indicatorFillTab,
    accentPosition: accentPosition,
    indicatorPosition: indicatorPosition,
    selected: isActive || selected,
    tabHeight: tabHeight,
    onClick: _blurElem,
    focusState: focusState,
    titleConfig: titleExtraSmall,
    colorConfig: colorConfig,
    minHeight: minHeight,
    "data-clickstream": clickStream,
    "data-analyticstrack": analyticsTrack,
    "data-track": track
  }, /*#__PURE__*/React.createElement(TabWrapper, null, label));
};

TabButton.propTypes = propTypes;
TabButton.defaultProps = defaultProps;
export default TabButton;