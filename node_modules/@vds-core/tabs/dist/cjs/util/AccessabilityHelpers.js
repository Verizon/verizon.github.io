"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getArrowPressed = getArrowPressed;
exports.focusTabItem = focusTabItem;
exports.getKeyName = getKeyName;
exports.getOuterLink = getOuterLink;
exports.getTabElements = getTabElements;
exports.calculatePhantomLinkPosition = calculatePhantomLinkPosition;
var keyCodeMap = new Map([[9, 'tab'], [37, 'left'], [38, 'up'], [39, 'right'], [40, 'down'], [13, 'enter'], [16, 'shift']]);
var arrowMap = {
  up: 'up',
  left: 'up',
  right: 'down',
  down: 'down'
};

function getKeyName(keyCode) {
  return keyCode && keyCodeMap.get(keyCode);
}

function getArrowPressed(keyPressed) {
  var isArrow = /up|down|left|right/gi.test(keyPressed);
  if (!isArrow) return false;
  return arrowMap[keyPressed];
}

function _getNextTabIndex(arrow, elements, index) {
  var elementsLength = elements && elements.length;
  var newIndex = index;
  if (!elementsLength) return null;

  if (arrow === 'down' || arrow === 'right') {
    newIndex++;
  } else if (arrow === 'up' || arrow === 'left') {
    newIndex = newIndex === 0 ? elementsLength - 1 : newIndex - 1;
  }

  newIndex = newIndex % elementsLength; //avoid overflow;

  return newIndex;
}
/**
 * @desc Focus on the down, up or current Nav Tab Item.
 * @param {String} keyPressed value either "down" or "up".
 * @param {Object} data with the following props
 * {
 *    focusActiveTab: Boolean,
 *    accessibilityItems: Object,
 *    activeTabIndex: number,
 *    currentTabIndex: number
 * }
 */


function focusTabItem(keyPressed, data) {
  var focusActiveTab = data.focusActiveTab,
      accessibilityItems = data.accessibilityItems,
      activeTabIndex = data.activeTabIndex,
      currentTabIndex = data.currentTabIndex;
  var navElements = accessibilityItems.navElements;
  var tabIndex = activeTabIndex;
  console.log(navElements, focusActiveTab, currentTabIndex);
  if (!(navElements && navElements.length)) return; // focusActiveTab
  // if set to true, it will focus the tab active tab item
  // otherwise it will get the next tab item that needs to be focused

  if (!focusActiveTab) {
    tabIndex = _getNextTabIndex(keyPressed, navElements, currentTabIndex);
  }

  navElements[tabIndex].focus();
  return tabIndex;
}

function calculatePhantomLinkPosition(linkElement, sideNavElement) {
  var singleLinkPos = linkElement && linkElement.getBoundingClientRect();
  var sideNavPos = sideNavElement && sideNavElement.getBoundingClientRect();

  if (singleLinkPos && sideNavPos) {
    return {
      left: singleLinkPos.left - sideNavPos.left,
      top: sideNavPos.height
    };
  }

  return null;
}

function getOuterLink(elements, isDesktop) {
  var index = elements.length === 1 ? null : isDesktop ? '1' : '0';
  return index && elements[index].getElementsByTagName('a')[0];
}

function getTabElements(elements, isDesktop) {
  var index = elements.length === 1 ? '0' : isDesktop ? '0' : '1';
  var tagElement = isDesktop ? 'a' : 'button';
  return elements[index].getElementsByTagName(tagElement);
}