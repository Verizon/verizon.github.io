"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.TabContent = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _CoreTabs = require("./CoreTabs");

var _CoreTab = _interopRequireDefault(require("./CoreTab"));

var _theme = require("@vds/theme");

var _typography = require("@vds-core/typography");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _templateObject4() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  margin-left: ", ";\n  button {\n    width: max-content;\n  }\n"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  justify-content: middle;\n  padding: 2px 2px 2px 2px;\n  width: auto;\n"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  padding: 8px 0px;\n  box-sizing: border-box;\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  position: relative;\n  z-index: 1;\n  background-color: transparent;\n  text-decoration: none\n  outline: none;\n  &:focus > .tabContent {\n    outline: 1px dashed ", ";\n  }\n\n  ", "\n  ", ";\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  margin-bottom: 16px;\n  text-decoration: none;\n  &: last-child {\n    margin-bottom: 0px;\n  }\n  &:focus {\n    outline: none;\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var propTypes = {
  /**
   * If provided, it will set this Tab to the Active Tab on render.<br><br><strong>Note:</strong> <br>This will override whatever was set on the Tab <code>selectedIndex</code> Prop.<br>Also, it is "Last One Wins", ie: if this is set on multiple Tab elements, the last element with it set will be the Active Tab.
   */
  active: _propTypes["default"].bool,

  /**
   * Text to be display in the tab.
   */
  label: _propTypes["default"].string,

  /**
   * @ignore
   */
  handleVisibilityChange: _propTypes["default"].func,

  /**
   * This function will be called when the tab is clicked. It will return an event.
   */
  onClick: _propTypes["default"].func,

  /**
   * When selected, it changes the state of the tab.
   */
  currentClicked: _propTypes["default"].bool,

  /**
   * Allows a string to be provided for analytics.
   */
  'data-analyticstrack': _propTypes["default"].string,

  /**
   * Allows a string to be provided for analytics.
   */
  'data-track': _propTypes["default"].string,

  /**
   * Allows a string to be provided for click stream.
   */
  'data-clickstream': _propTypes["default"].string,

  /**
   * The direction in which tabs will be displayed
   */
  orientation: _propTypes["default"].oneOf(['horizontal', 'vertical']),

  /**
   * String to match the Tabs with the Panels
   */
  uniqueId: _propTypes["default"].string,

  /**
   * @ignore
   */
  Tab: _propTypes["default"].func,

  /**
   * @ignore
   */
  Title: _propTypes["default"].func
};
var defaultProps = {
  currentClicked: false,
  Tab: undefined,
  Title: _typography.Title
};

var ItemWrapper = /*#__PURE__*/_styledComponents["default"].span.withConfig({
  displayName: "ItemWrapper",
  componentId: "sc-1df2i7b-0"
})(_templateObject());

var ContentWrapper = /*#__PURE__*/_styledComponents["default"].a.withConfig({
  displayName: "ContentWrapper",
  componentId: "sc-1df2i7b-1"
})(_templateObject2(), _theme.colors.black, function (_ref) {
  var currentClicked = _ref.currentClicked;
  return "\n    &:hover {\n      &::before {\n        background:  ".concat(currentClicked ? _theme.colors.red : _theme.colors.coolGray6, ";\n        box-shadow: none;\n        content: '';\n        height: 100%;\n        left: -1px;\n        position: absolute;\n        top: 0;\n        width: 4px;\n        z-index: 1;\n      }\n    }\n  ");
}, function (_ref2) {
  var currentClicked = _ref2.currentClicked;
  return "\n    &::before {\n      background:  ".concat(currentClicked ? _theme.colors.red : 'none', ";\n      box-shadow: none;\n      content: '';\n      height: 100%;\n      left: -1px;\n      position: absolute;\n      top: 0;\n      width: 4px;\n      z-index: 1;\n    }\n  ");
});

var Content = /*#__PURE__*/_styledComponents["default"].span.withConfig({
  displayName: "Content",
  componentId: "sc-1df2i7b-2"
})(_templateObject3());

var StyledVDSTab = /*#__PURE__*/(0, _styledComponents["default"])(_CoreTab["default"]).withConfig({
  displayName: "StyledVDSTab",
  componentId: "sc-1df2i7b-3"
})(_templateObject4(), function (_ref3) {
  var viewport = _ref3.viewport,
      index = _ref3.index;
  return index === 0 && (viewport === 'tablet' ? '20px' : '16px');
});

var TabContent = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2["default"])(TabContent, _React$Component);

  var _super = _createSuper(TabContent);

  function TabContent(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, TabContent);
    _this = _super.call(this, props);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_onKeyDown", function (e) {
      if (e.keyCode === 13) {
        _this._onClick(e);
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_onClick", function (evt) {
      var onClick = _this.props.onClick;
      if (evt.detail === 0) evt.preventDefault();
      onClick && onClick(evt);
    });
    _this.state = {
      selected: props.active
    };
    return _this;
  }

  (0, _createClass2["default"])(TabContent, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      var active = this.props.active;
      var selected = this.state.selected;
      if (!this.props.handleVisibilityChange) return;

      if (selected !== prevState.selected || active !== prevProps.active) {
        var newSelectedState = this.props.active || this.state.selected;
        this.setState({
          selected: newSelectedState
        });
        this.props.handleVisibilityChange('isActive', active);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          onClick = _this$props.onClick,
          uniqueId = _this$props.uniqueId,
          label = _this$props.label,
          data = _this$props.data,
          tabIndex = _this$props.tabIndex,
          index = _this$props.index,
          active = _this$props.active,
          currentClicked = _this$props.currentClicked,
          viewport = _this$props.viewport,
          orientation = _this$props.orientation,
          analyticsTrack = _this$props['data-analyticstrack'],
          track = _this$props['data-track'],
          clickStream = _this$props['data-clickstream'],
          Tab = _this$props.Tab,
          Title = _this$props.Title;
      var isDesktop = viewport === 'desktop' || viewport === 'desktopSmall';
      var VDSTab, fontSize;

      if (Tab) {
        VDSTab = Tab;
        fontSize = 'XSmall';
      } else {
        VDSTab = StyledVDSTab;
        fontSize = 'extraSmall';
      }

      if (!isDesktop || orientation === 'horizontal') {
        return /*#__PURE__*/_react["default"].createElement(VDSTab, (0, _extends2["default"])({
          viewport: viewport,
          index: index,
          label: label
        }, this.props));
      }

      return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(ItemWrapper, {
        isDesktop: isDesktop,
        viewport: viewport,
        id: "tab_".concat(uniqueId),
        onClick: this._onClick,
        onMouseDown: function onMouseDown(e) {
          return e.preventDefault();
        },
        onKeyDown: this._onKeyDown
      }, /*#__PURE__*/_react["default"].createElement(ContentWrapper, {
        tabIndex: active ? 0 : -1 // focus on active element first, then focus others with arrows
        ,
        selected: this.state.selected,
        currentClicked: currentClicked // this should be selected
        ,
        viewport: viewport,
        isDesktop: isDesktop,
        role: "tab",
        "data-analyticstrack": analyticsTrack,
        "data-track": track,
        "data-clickstream": clickStream
      }, /*#__PURE__*/_react["default"].createElement(Content, {
        className: "tabContent",
        tabIndex: -1
      }, /*#__PURE__*/_react["default"].createElement(Title, {
        size: fontSize,
        color: currentClicked ? _theme.colors.black : _theme.colors.coolGray6
      }, label)))));
    }
  }]);
  return TabContent;
}(_react["default"].Component);

exports.TabContent = TabContent;
TabContent.propTypes = propTypes;
TabContent.defaultProps = defaultProps;
var _default = TabContent;
exports["default"] = _default;