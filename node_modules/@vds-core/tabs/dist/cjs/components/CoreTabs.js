"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.CoreTabs = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _cuid = _interopRequireDefault(require("cuid"));

var _javascriptStyleHelpers = require("@uie/javascript-style-helpers");

var _theme = require("@vds-core/theme");

var _TabPanel = _interopRequireDefault(require("./TabPanel"));

var _typography = require("@vds-core/typography");

var _utilities = require("@vds-core/utilities");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _templateObject2() {
  var data = (0, _taggedTemplateLiteral2["default"])([""]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  margin: 0;\n  padding: 0;\n  list-style-type: none;\n\n  ", ";\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var propTypes = {
  /**
   * Content that will be rendered in the tabs wrapper.
   */
  children: _propTypes["default"].node,

  /**
   * An optional callback that is called when the selectedIndex changes. Passes parameters (event, tabIndex).
   */
  onTabChange: _propTypes["default"].func,

  /**
   * Sets the Position of Tabs Border.
   */
  linePosition: _propTypes["default"].oneOf(['bottom', 'top', 'none']),

  /**
   * The initial Active Tab's index.
   */
  selectedIndex: _propTypes["default"].number,

  /**
   * Sets the Position of the Active/Hover Border Accent for All Tabs.
   */
  indicatorPosition: _propTypes["default"].oneOf(['bottom', 'top', 'none']),

  /**
   * @deprecated
   * Option to make Accent Border 100% width of All Tabs.
   */
  accentFill: _propTypes["default"].bool,

  /**
   * Option to make Accent Border 100% width of All Tabs.
   */
  indicatorFillTab: _propTypes["default"].bool,

  /**
   * Minimum Width for All Tabs.
   */
  minWidth: _propTypes["default"].string,

  /**
   * @ignore
   */
  className: _propTypes["default"].string,

  /**
   * Rendered height of the tab.
   */
  tabHeight: _propTypes["default"].string,

  /**
   * @deprecated
   * An optional callback that is called when the selectedIndex changes. Passes parameters (event, tabIndex).
   */
  tabChange: _propTypes["default"].func,
  // DEPRECATED

  /**
   * @deprecated
   * Minimum Width for All Tabs.
   */
  minTabWidth: _propTypes["default"].string,
  //DEPRECATED

  /**
   * @deprecated
   * Sets the Position of the Active/Hover Border Accent for All Tabs.
   */
  accentPosition: _propTypes["default"].oneOf(['bottom', 'top', 'none']),
  //DEPRECATED

  /**
   * @deprecated
   * The initial Active Tab's index.
   */
  activeTabIndex: _propTypes["default"].number,
  // DEPRECATED

  /**
   * @deprecated
   */
  borderPosition: _propTypes["default"].oneOf(['bottom', 'top', 'none']),
  //DEPRECATED

  /**
   * @ignore
   */
  focusState: _propTypes["default"].bool,

  /**
   * @ignore
   */
  minHeight: _propTypes["default"].bool,

  /**
   * @ignore
   */
  typescale: _propTypes["default"].string,

  /**
   * @ignore
   */
  titleConfig: _propTypes["default"].object,

  /**
   * @ignore
   */
  colorConfig: _propTypes["default"].object,

  /**
   * @ignore
   */
  tabIndex: _propTypes["default"].number,

  /**
   * Allows a unique ID to be passed to the component.
   */
  id: _propTypes["default"].string
};
var defaultProps = {
  tabChange: undefined,
  onTabChange: undefined,
  linePosition: 'bottom',
  selectedIndex: 0,
  indicatorPosition: 'top',
  accentFill: false,
  // DEPRECATED
  indicatorFillTab: false,
  minWidth: undefined,
  minTabWidth: undefined,
  className: null,
  typescale: _typography.TypographyConfig.getTypescale(),
  titleConfig: _typography.TitleConfig,
  colorConfig: _theme.colors
};

var buildBorderStyle = function buildBorderStyle(props) {
  var borderPosition = props.borderPosition,
      linePosition = props.linePosition,
      colorConfig = props.colorConfig;
  var styles = '';

  if (linePosition === 'top' || borderPosition === 'top') {
    styles += "\n      border-top: ".concat((0, _javascriptStyleHelpers.calculateRem)(1), " solid ").concat(colorConfig.coolGray3, ";\n      border-bottom: ").concat((0, _javascriptStyleHelpers.calculateRem)(1), " solid transparent;\n    ");
  } else if (linePosition === 'bottom' || borderPosition === 'bottom') {
    styles += "\n      border-top: ".concat((0, _javascriptStyleHelpers.calculateRem)(1), " solid transparent;\n      border-bottom: ").concat((0, _javascriptStyleHelpers.calculateRem)(1), " solid ").concat(colorConfig.coolGray3, ";\n    ");
  }

  return styles;
};

var StyledTabList = /*#__PURE__*/_styledComponents["default"].ul.withConfig({
  displayName: "StyledTabList",
  componentId: "sc-1a1jc5k-0"
})(_templateObject(), function (props) {
  return buildBorderStyle(props);
});

var TabsWrapper = /*#__PURE__*/_styledComponents["default"].div.withConfig({
  displayName: "TabsWrapper",
  componentId: "sc-1a1jc5k-1"
})(_templateObject2());

var CoreTabs = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(CoreTabs, _Component);

  var _super = _createSuper(CoreTabs);

  function CoreTabs(props) {
    var _this2;

    (0, _classCallCheck2["default"])(this, CoreTabs);
    _this2 = _super.call(this, props);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this2), "ignoreFragments", function (childrenArray) {
      return childrenArray.map(function (child) {
        if (child.type === _react["default"].Fragment) {
          return child.props.children instanceof Array ? child.props.children[0] : child.props.children;
        } else {
          return child;
        }
      });
    });
    _this2.activeIndex = _this2.props.activeTabIndex || _this2.props.selectedIndex; // We need a set of Unique Ids to match the Tabs with the Panels

    _this2.uniqueIds = {};
    _this2.childrenElements = _this2.ignoreFragments(_this2.props.children);

    _this2.childrenElements.forEach(function (child, tabIndex) {
      _this2.uniqueIds[tabIndex] = (0, _cuid["default"])().substr(-6); // Check for explicit setting of isActive on a Tab

      if (child.props.isActive) {
        _this2.activeIndex = tabIndex;
      }
    });

    if (_this2.childrenElements && _react["default"].Children) {
      _react["default"].Children.map(_this2.childrenElements, function (elem) {
        var activeState = elem.props.active;
        if (activeState) _this2.overrideActive = true;
      });
    }

    _this2.state = {
      activeTabIndex: _this2.overrideActive ? undefined : _this2.activeIndex,
      tabsChildren: _this2.childrenElements,
      uniqueIds: _this2.uniqueIds
    };
    return _this2;
  }

  (0, _createClass2["default"])(CoreTabs, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      var _this3 = this;

      if (this.props.activeTabIndex !== prevProps.activeTabIndex || this.props.selectedIndex !== prevProps.selectedIndex) {
        var newIndex = this.props.activeTabIndex || this.props.selectedIndex;
        this.setState({
          activeTabIndex: newIndex
        });
      }

      prevState.tabsChildren.forEach(function (child, index) {
        var tabsChildren = _this3.ignoreFragments(_this3.props.children);
        /* Handle for when a tab is removed of children do not exist*/


        if (!tabsChildren || !tabsChildren[index] || !tabsChildren[index].props) {
          return;
        }

        var currentPanelContent = tabsChildren[index].props.children;
        var currentPanelLabel = tabsChildren[index].props.label; // TODO: look into an optimization for tabsChildren being replaced individually

        if (child.props.hide !== tabsChildren[index].props.hide) {
          _this3.setState({
            tabsChildren: tabsChildren
          });
        }

        if (child.props.label !== currentPanelLabel) {
          _this3.setState({
            tabsChildren: tabsChildren
          });
        }

        if (child.props.children !== currentPanelContent) {
          _this3.setState({
            tabsChildren: tabsChildren
          });
        }
      });
    }
  }, {
    key: "getFirstVisibleChild",
    // This function finds the First Child (Tab) that is currently visible starting with the fromIndex
    value: function getFirstVisibleChild() {
      var fromIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var firstVisibleChildIndex = -1;
      this.state.tabsChildren.forEach(function (child, index) {
        if (index >= fromIndex && firstVisibleChildIndex === -1 && !child.props.hide) {
          firstVisibleChildIndex = index;
        }
      });
      return firstVisibleChildIndex;
    } // Set the active tab

  }, {
    key: "handleTabClick",
    value: function handleTabClick(activeTabIndex, childFunction, e) {
      if (typeof this.props.onTabChange !== 'undefined' && this.props.onTabChange) {
        this.props.onTabChange(e, activeTabIndex);
      } // Call optional TabChanged event callback


      if (typeof this.props.tabChange !== 'undefined' && this.props.tabChange) {
        this.props.tabChange(e, activeTabIndex);
      } // Call optional Child Tab Click event callback


      if (childFunction) {
        childFunction(e, activeTabIndex);
      }

      this.setState({
        activeTabIndex: activeTabIndex
      }); // Set activeTabIndex
    } // Handle Visibility changes requested by a Child (Tab)

  }, {
    key: "handleChildVisibilityChange",
    value: function handleChildVisibilityChange(childIndex, changeType) {
      var changeData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

      if (changeType === 'isActive') {
        if (changeData === true) {
          this.setState({
            activeTabIndex: childIndex
          });
        }
      }

      if (changeType === 'hide' && changeData && childIndex === this.state.activeTabIndex) {
        var activeTabIndex = 0;

        if (changeData === 1) {
          activeTabIndex = this.getFirstVisibleChild();
        } else if (changeData === 2 && childIndex + 1 < this.state.tabsChildren.length) {
          activeTabIndex = this.getFirstVisibleChild(childIndex);
        }

        this.overrideActive = false;
        this.setState({
          activeTabIndex: activeTabIndex
        });
      }
    } // Add any Props that need to be inherited from the <Tabs/> Component

  }, {
    key: "extendTabChild",
    value: function extendTabChild(child, tabIndex) {
      var _this4 = this;

      var _this$state = this.state,
          activeTabIndex = _this$state.activeTabIndex,
          uniqueIds = _this$state.uniqueIds;
      var props = {};

      var _this = this; // Check for Explicit overrides of Tabs Properties by Child Tab Properties


      ['accentFill', 'indicatorFillTab', 'accentPosition', 'indicatorPosition', 'minWidth', 'minTabWidth', 'tabHeight', 'focusState', 'minHeight'].forEach(function (prop) {
        props[prop] = _this4.props[prop];

        if (typeof child.props[prop] !== 'undefined') {
          props[prop] = child.props[prop];
        }
      }); // Check for Explicit override of uniqueId on this Tab

      if (typeof child.props.uniqueId !== 'undefined') {
        uniqueIds[tabIndex] = child.props.uniqueId;
      }

      var uniqueId = uniqueIds[tabIndex]; // Check if Child Tab is currently the Active Tab, or it had a Property change on isActive

      var calcIsActive = activeTabIndex !== undefined ? tabIndex === activeTabIndex : child.props.active;
      var _child$props = child.props,
          analyticsTrack = _child$props['data-analyticstrack'],
          track = _child$props['data-track'],
          clickStream = _child$props['data-clickstream'];
      return /*#__PURE__*/_react["default"].cloneElement(child, {
        key: tabIndex + 1,
        onClick: this.handleTabClick.bind(_this, tabIndex, child.props.onClick),
        handleVisibilityChange: this.handleChildVisibilityChange.bind(_this, tabIndex),
        isActive: calcIsActive,
        active: calcIsActive,
        hide: child.props.hide,
        accentFill: props.accentFill,
        indicatorFillTab: props.indicatorFillTab,
        accentPosition: props.accentPosition,
        indicatorPosition: props.indicatorPosition,
        minWidth: props.minWidth,
        minTabWidth: props.minTabWidth,
        tabHeight: props.tabHeight,
        focusState: props.focusState || child.props.focusState,
        minHeight: props.minHeight || child.props.minHeight,
        typescale: props.typescale,
        titleConfig: props.titleConfig,
        tabIndex: props.tabIndex,
        uniqueId: uniqueId,
        analyticsTrack: analyticsTrack,
        track: track,
        clickStream: clickStream
      });
    } // Encapsulate <Tabs/> component API as props for <Tab/> children

  }, {
    key: "renderTabs",
    value: function renderTabs() {
      return _react["default"].Children.map(this.state.tabsChildren, this.extendTabChild.bind(this));
    }
  }, {
    key: "renderTabContent",
    value: function renderTabContent(child, contentIndex) {
      var _this$state2 = this.state,
          activeTabIndex = _this$state2.activeTabIndex,
          uniqueIds = _this$state2.uniqueIds;
      var uniqueId = uniqueIds[contentIndex];
      var label = child.props.label || uniqueId;
      var isActive = activeTabIndex === contentIndex;
      return /*#__PURE__*/_react["default"].createElement(_TabPanel["default"], {
        label: label,
        uniqueId: uniqueId,
        isHidden: !isActive
      }, child.props.children);
    } // Render current active tab content

  }, {
    key: "renderActiveTabContent",
    value: function renderActiveTabContent() {
      return _react["default"].Children.map(this.state.tabsChildren, this.renderTabContent.bind(this));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          id = _this$props.id,
          onTabChange = _this$props.onTabChange,
          className = _this$props.className,
          rest = (0, _objectWithoutProperties2["default"])(_this$props, ["id", "onTabChange", "className"]);
      return /*#__PURE__*/_react["default"].createElement(TabsWrapper, {
        className: className
      }, /*#__PURE__*/_react["default"].createElement(StyledTabList, (0, _extends2["default"])({}, rest, {
        id: id,
        role: "tablist"
      }), this.renderTabs()), this.props.children && /*#__PURE__*/_react["default"].createElement(TabsWrapper, null, this.renderActiveTabContent()));
    }
  }]);
  return CoreTabs;
}(_react.Component);

exports.CoreTabs = CoreTabs;
CoreTabs.defaultProps = defaultProps;
CoreTabs.propTypes = propTypes;

var _default = (0, _utilities.withVDSManager)(CoreTabs);

exports["default"] = _default;