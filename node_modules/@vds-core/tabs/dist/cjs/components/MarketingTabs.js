"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _cuid = _interopRequireDefault(require("cuid"));

var _CoreTabs = require("./CoreTabs");

var _theme = require("@vds/theme");

var _utilities = require("@vds/utilities");

var _MarketingTabItem = _interopRequireDefault(require("./MarketingTabItem"));

var _MarketingTab = _interopRequireDefault(require("./MarketingTab"));

var _buttons = require("@vds-core/buttons");

var _Animator = _interopRequireDefault(require("../util/Animator"));

var _setEnvRef = _interopRequireDefault(require("@uie/set-env-ref"));

var _PhantomLink = _interopRequireDefault(require("../util/PhantomLink"));

var _AccessabilityHelpers = require("../util/AccessabilityHelpers");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _templateObject7() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  display: ", ";\n"]);

  _templateObject7 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  margin-bottom: ", ";\n  margin-top: ", ";\n  margin-left: ", ";\n"]);

  _templateObject6 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  margin-bottom: ", ";\n  overflow: visible;\n  overflow-x: scroll;\n  overflow-y: hidden;\n  ::-webkit-scrollbar {\n    display: none;\n  }\n"]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  ", "\n"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  flex-direction: column;\n  margin-right: 20px;\n  margin-left: 20px;\n  margin-top: 0;\n  border-left: ", ";\n"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  flex: 1;\n  width: ", ";\n  height: fit-content;\n  margin: ", ";\n  ", ";\n\n  &:focus {\n    outline: ", ";\n  }\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  flex-direction: ", ";\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var propTypes = {
  /**
   * Viewport the Tabs will be rendered in.
    <br> PropTypes.oneOf([ "desktop", "desktopSmall", "tablet", "mobile", "mobileSmall" ])
   */
  viewport: _propTypes["default"].oneOf(["desktop", "desktopSmall", "tablet", "mobile", "mobileSmall"]),

  /**
   * Sets the active tab index.
   */
  selectedIndex: _propTypes["default"].number,

  /**
   * An optional callback that is called when the selectedIndex changes. Passes parameters (event, tabIndex).
   */
  onTabChange: _propTypes["default"].func,

  /**
   * Used to render specific margins for children components.
   */
  renderMargin: _propTypes["default"].bool,

  /**
   * Enable the animation styles on the inner component
   */
  animated: _propTypes["default"].bool,

  /**
   * Toggle the start of the animation
   */
  startAnimation: _propTypes["default"].bool,

  /**
   * The position where the bottom tab line border will appear
   */
  linePosition: _propTypes["default"].oneOf(["top", "bottom", "none"]),

  /**
   * The direction in which tabs will be displayed
   */
  orientation: _propTypes["default"].oneOf(["horizontal", "vertical"]),

  /**
   * String to match the Tabs with the Panels
   */
  uniqueId: _propTypes["default"].string,

  /**
   * Object containing data for the top CTA.
    <dl>{
    <dd>children: PropTypes.string
    <dd>onClick: PropTypes.func
    <dd>size: PropTypes.oneOf(["large", "small"])
    <dd>type: PropTypes.oneOf(['inline', 'standAlone'])
    </dl>}
   */
  ctaLink: _propTypes["default"].object,

  /**
   * Array of objects, each is a tab.
   */
  children: _propTypes["default"].array
};
var defaultProps = {
  selectedIndex: 0,
  onTabChange: undefined,
  renderMargin: false,
  animated: false,
  startAnimation: false,
  linePosition: "bottom",
  orientation: 'horizontal'
};

var TabsWrapper = /*#__PURE__*/_styledComponents["default"].div.withConfig({
  displayName: "TabsWrapper",
  componentId: "sc-1p6i31o-0"
})(_templateObject(), function (_ref) {
  var isDesktop = _ref.isDesktop,
      orientation = _ref.orientation;
  return isDesktop ? orientation === "horizontal" ? "column" : "row" : "column";
});

var ContentWrapper = /*#__PURE__*/_styledComponents["default"].div.withConfig({
  displayName: "ContentWrapper",
  componentId: "sc-1p6i31o-1"
})(_templateObject2(), function (_ref2) {
  var isDesktop = _ref2.isDesktop;
  return isDesktop ? "100%" : "auto";
}, function (_ref3) {
  var isDesktop = _ref3.isDesktop;
  return !isDesktop ? "0px 16px" : "0px 20px";
}, function (_ref4) {
  var renderMargin = _ref4.renderMargin;
  return !renderMargin && "margin: 0px";
}, "1px dashed ".concat(_theme.colors.black));

var TabsContainer = /*#__PURE__*/_styledComponents["default"].div.withConfig({
  displayName: "TabsContainer",
  componentId: "sc-1p6i31o-2"
})(_templateObject3(), function (_ref5) {
  var linePosition = _ref5.linePosition;
  return linePosition !== "none" ? "1px solid ".concat(_theme.colors.coolGray3) : null;
});

var SideNavigation = /*#__PURE__*/_styledComponents["default"].div.withConfig({
  displayName: "SideNavigation",
  componentId: "sc-1p6i31o-3"
})(_templateObject4(), function (_ref6) {
  var isDesktop = _ref6.isDesktop,
      orientation = _ref6.orientation;
  return isDesktop && orientation !== "horizontal" && "\n      min-width: 25%; \n      width: 25%;\n  ";
});

var StyledVDSTabs = /*#__PURE__*/(0, _styledComponents["default"])(_CoreTabs.Tabs).withConfig({
  displayName: "StyledVDSTabs",
  componentId: "sc-1p6i31o-4"
})(_templateObject5(), function (_ref7) {
  var isDesktop = _ref7.isDesktop;
  return isDesktop ? "48px" : "32px";
});

var LinkWrapper = /*#__PURE__*/_styledComponents["default"].div.withConfig({
  displayName: "LinkWrapper",
  componentId: "sc-1p6i31o-5"
})(_templateObject6(), function (_ref8) {
  var isDesktop = _ref8.isDesktop,
      orientation = _ref8.orientation;
  return !isDesktop || orientation === "horizontal" ? "24px" : 0;
}, function (_ref9) {
  var isDesktop = _ref9.isDesktop,
      orientation = _ref9.orientation;
  return isDesktop && orientation !== "horizontal" ? "32px" : 0;
}, function (_ref10) {
  var isDesktop = _ref10.isDesktop,
      viewport = _ref10.viewport;
  return !isDesktop && viewport !== "tablet" ? "16px" : "20px";
});

var ChildWrapper = /*#__PURE__*/_styledComponents["default"].div.withConfig({
  displayName: "ChildWrapper",
  componentId: "sc-1p6i31o-6"
})(_templateObject7(), function (_ref11) {
  var active = _ref11.active;
  return !active && "none";
});

var TextLink = function TextLink(_ref12) {
  var viewport = _ref12.viewport,
      isDesktop = _ref12.isDesktop,
      ctaLink = _ref12.ctaLink,
      orientation = _ref12.orientation;
  return /*#__PURE__*/_react["default"].createElement(LinkWrapper, {
    viewport: viewport,
    isDesktop: isDesktop,
    orientation: orientation
  }, /*#__PURE__*/_react["default"].createElement(_buttons.TextLinkCaret, ctaLink));
};

var ConditionalTabWrapper = function ConditionalTabWrapper(_ref13) {
  var ctaLink = _ref13.ctaLink,
      children = _ref13.children,
      viewport = _ref13.viewport,
      orientation = _ref13.orientation;

  if (ctaLink && ctaLink !== {}) {
    var isDesktop = /desktop/g.test(viewport);
    return /*#__PURE__*/_react["default"].createElement("div", null, (!isDesktop || orientation === "horizontal") && /*#__PURE__*/_react["default"].createElement(TextLink, {
      viewport: viewport,
      isDesktop: isDesktop,
      ctaLink: ctaLink,
      orientation: orientation
    }), children, isDesktop && orientation !== "horizontal" && /*#__PURE__*/_react["default"].createElement(TextLink, {
      isDesktop: isDesktop,
      ctaLink: ctaLink
    }));
  }

  return /*#__PURE__*/_react["default"].createElement("div", null, children);
};

var MarketingTabs = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2["default"])(MarketingTabs, _React$Component);

  var _super = _createSuper(MarketingTabs);

  function MarketingTabs(_props) {
    var _this;

    (0, _classCallCheck2["default"])(this, MarketingTabs);
    _this = _super.call(this, _props);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_isDesktopViewport", function () {
      var viewport = _this.props.viewport;
      return /desktop/g.test(viewport);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_getPhantomLinkPos", function () {
      var outerLink = _this.state.accessibilityItems.outerLink;
      var sideNav = _this.tabWrapperRef && _this.tabWrapperRef.firstElementChild.firstElementChild;
      return (0, _AccessabilityHelpers.calculatePhantomLinkPosition)(outerLink, sideNav);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_hasTabAFocusElement", function () {
      var navElements = _this.state.accessibilityItems.navElements;

      var _navElements = [].slice.call(navElements);

      return !!(_navElements.length && _navElements.filter(function (elem) {
        return document.activeElement === elem;
      }).length);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_shiftAndTabPressed", function (e, keypressed, callback, propagateEvent) {
      var _keyPressed = keypressed || (0, _AccessabilityHelpers.getKeyName)(e.keyCode) || e.keyCode;

      _this.keyPressed[_keyPressed] = e.type === "keydown";
      var shiftAndTab = false; // getModifierState for checking if shift was already pressed before the event occurrend.
      // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/getModifierState

      var shiftActive = _this.keyPressed["shift"] || e && e.getModifierState("Shift");

      if (_this.keyPressed["tab"] && shiftActive) {
        if (!propagateEvent) {
          e && e.preventDefault();
          e && e.stopPropagation();
        }

        if (callback) callback(e);
        shiftAndTab = true;
      }

      return shiftAndTab;
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_contentShiftAndTabCB", function (e) {
      var contentWrapper = _this.contentWrapperRef;

      var focusData = _this._getFocusData(true);

      var shiftActive = e && e.getModifierState("Shift");
      var contentFocus = contentWrapper === document.activeElement;

      if (contentFocus && shiftActive) {
        e && e.preventDefault();
        e && e.stopPropagation();
        (0, _AccessabilityHelpers.focusTabItem)(null, focusData);
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_horizontalShitAndTabCB", function (outerLink) {
      var hasTabAFocusItem = _this._hasTabAFocusElement();

      return function (e) {
        // if viewAll is focused, let browser handle shit+tab
        var isOuterLinkFocus = outerLink === document.activeElement;

        if (isOuterLinkFocus) {
          _this.keyPressed = {};
          return;
        }

        e && e.preventDefault();
        e && e.stopPropagation();
        if (hasTabAFocusItem) outerLink.focus();
      };
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_verticalShitAndTabCB", function (event) {
      var _this$state$accessibi = _this.state.accessibilityItems,
          outerLink = _this$state$accessibi.outerLink,
          navElements = _this$state$accessibi.navElements;

      var focusData = _this._getFocusData(true); // if activeTab item is focus, let browser handle shift+tab


      var isActiveTabFocused = navElements[_this.state.activeTabIndex] === document.activeElement;

      if (isActiveTabFocused) {
        _this.keyPressed = {};
        return;
      }

      event && event.preventDefault();
      event && event.stopPropagation();
      if (outerLink === document.activeElement) (0, _AccessabilityHelpers.focusTabItem)(null, focusData);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_onTabNavKeyDownHandler", function (e) {
      var isDesktop = _this._isDesktopViewport();

      var keyPressed = (0, _AccessabilityHelpers.getKeyName)(e.keyCode);
      var arrow = (0, _AccessabilityHelpers.getArrowPressed)(keyPressed);
      var outerLink = _this.state.accessibilityItems.outerLink;

      var focusData = _this._getFocusData(false);

      var shiftAndTabPressed = _this._shiftAndTabPressed(e, keyPressed, isDesktop ? _this._verticalShitAndTabCB : _this._horizontalShitAndTabCB(outerLink), true); // shift+tab needs to be pressed and released so that shift is not trapped.
      // for convinience find a way to tab back while shift key is kept pressed.


      if (shiftAndTabPressed) return;
      console.log(_this.props.orientation, 'orientation');

      if (isDesktop && _this.props.orientation === 'vertical') {
        _this._traverseVerticalTab(e, keyPressed);
      } else {
        _this._traverseHorizontalTab(e, keyPressed);
      }

      if (arrow && outerLink !== document.activeElement) {
        console.log('hey', arrow);
        e.preventDefault();
        _this.currentTabIndex = (0, _AccessabilityHelpers.focusTabItem)(arrow, focusData);
      }

      return;
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_onContentKeyDownUpHandler", function (e) {
      _this._shiftAndTabPressed(e, null, _this._contentShiftAndTabCB, true);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_ignoreFragments", function (childrenArray) {
      return childrenArray.map(function (child) {
        if (child.type === _react["default"].Fragment) {
          return child.props.children instanceof Array ? child.props.children[0] : child.props.children;
        } else {
          return child;
        }
      });
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_handleTabClick", function (activeTabIndex, childFunction, evt) {
      var onTabChange = _this.props.onTabChange;

      if (typeof onTabChange !== "undefined" && onTabChange) {
        onTabChange(evt, activeTabIndex);
      }

      if (childFunction) {
        childFunction(evt, activeTabIndex);
      }

      _this.setState({
        activeTabIndex: activeTabIndex
      });
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_handleChildVisibilityChange", function (childIndex, changeType) {
      var changeData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

      if (changeType === "isActive" && changeData === true) {
        _this.setState({
          activeTabIndex: childIndex
        });
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_mapChildrenForTabs", function (props, activeTabIndex) {
      var viewport = props.viewport,
          children = props.children,
          orientation = props.orientation;
      var isDesktop = /desktop/g.test(viewport);
      return children.map(function (child, index) {
        var _onClick = child.onClick;
        /*Spreading child props in order to allow for children to be passed*/

        return /*#__PURE__*/_react["default"].createElement(_MarketingTab["default"], (0, _extends2["default"])({}, child.props, {
          children: null,
          viewport: viewport,
          key: index + 1,
          orientation: orientation,
          index: index,
          active: index === activeTabIndex,
          onClick: function onClick(evt) {
            _this._handleTabClick(index, _onClick, evt);
          },
          handleVisibilityChange: _this._handleChildVisibilityChange,
          currentClicked: index === activeTabIndex
        }));
      });
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_checkChildren", function () {
      var children = _this.props.children;
      return children.map(function (child, index) {
        if (child && !child.type === 'TabItem') {
          console.warn("Child type should be TabItem but was ".concat(child.type.displayName));
        }

        return child;
      });
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "refProp", (0, _setEnvRef["default"])());
    _this.activeIndex = _this.props.selectedIndex; // We need a set of Unique Ids to match the Tabs with the Panels

    _this.uniqueIds = {};
    _this.childrenElements = _this._ignoreFragments(_this.props.children);
    _this.tabWrapperRef = null;
    _this.contentWrapperRef = null;
    _this.keyPressed = {};

    _this.childrenElements.forEach(function (child, tabIndex) {
      _this.uniqueIds[tabIndex] = (0, _cuid["default"])().substr(-6); // Check for explicit setting of isActive on a Tab

      if (child.props.isActive) {
        _this.activeIndex = tabIndex;
      }
    });

    _this.currentTabIndex = _this.activeIndex;

    if (_this.childrenElements && _react["default"].Children) {
      _react["default"].Children.map(_this.childrenElements, function (elem) {
        var activeState = elem.props.active;
        if (activeState) _this.overrideActive = true;
      });
    }

    _this.state = {
      activeTabIndex: _this.activeIndex,
      uniqueIds: _this.uniqueIds,
      accessibilityItems: {
        navElements: null,
        outerLink: null,
        // link used above or below tab nav items
        phantomLinkActive: false
      }
    };
    return _this;
  }

  (0, _createClass2["default"])(MarketingTabs, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this._setAccessibilityItems(this._isDesktopViewport());
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      if (this.props.selectedIndex !== prevProps.selectedIndex) {
        this.setState({
          activeTabIndex: this.props.selectedIndex
        });
      }

      if (prevProps.viewport !== this.props.viewport) {
        this._setAccessibilityItems(this._isDesktopViewport());
      }

      this.currentTabIndex = this.state.activeTabIndex;
    } //##################################################################
    //############### methods used for accessiblity ####################
    //##################################################################

  }, {
    key: "_setAccessibilityItems",
    // updates the State accessibility items object, needed whenever viewport is updated.
    value: function _setAccessibilityItems(isDesktop) {
      var sideNav = this.tabWrapperRef.firstElementChild;
      var children = sideNav.childNodes;
      var navElements = (0, _AccessabilityHelpers.getTabElements)(children, isDesktop);
      var outerLink = (0, _AccessabilityHelpers.getOuterLink)(children, isDesktop);
      this.setState(function (prevState) {
        return _objectSpread(_objectSpread({}, prevState), {}, {
          accessibilityItems: {
            navElements: navElements,
            outerLink: outerLink // link used above or below tab nav items

          }
        });
      });
    } // focus content element

  }, {
    key: "_focusContent",
    value: function _focusContent(e) {
      e && e.preventDefault();
      this.currentTabIndex = this.state.activeTabIndex;
      var contentWrapper = this.contentWrapperRef;
      contentWrapper.tabIndex = 0;
      contentWrapper.focus();
    }
  }, {
    key: "_updateActivePhantomLink",
    value: function _updateActivePhantomLink(active) {
      this.setState(function (prevState) {
        return _objectSpread(_objectSpread({}, prevState), {}, {
          accessibilityItems: _objectSpread(_objectSpread({}, prevState.accessibilityItems), {}, {
            phantomLinkActive: active
          })
        });
      });
    } // builds the data that is needed to focus a Tab item

  }, {
    key: "_getFocusData",
    value: function _getFocusData(focusActiveTab) {
      var _this$state = this.state,
          accessibilityItems = _this$state.accessibilityItems,
          activeTabIndex = _this$state.activeTabIndex;
      return {
        accessibilityItems: accessibilityItems,
        activeTabIndex: activeTabIndex,
        focusActiveTab: focusActiveTab,
        currentTabIndex: this.currentTabIndex
      };
    } // checks if a tab item is focused

  }, {
    key: "_traverseHorizontalTab",
    value: function _traverseHorizontalTab(event, keyPressed) {
      var _this$state2 = this.state,
          accessibilityItems = _this$state2.accessibilityItems,
          activeTabIndex = _this$state2.activeTabIndex;
      var outerLink = accessibilityItems.outerLink;

      var focusData = this._getFocusData(true);

      if (keyPressed === "tab") {
        event && event.preventDefault();

        if (document.activeElement === outerLink) {
          this.currentTabIndex = activeTabIndex;
          (0, _AccessabilityHelpers.focusTabItem)(null, focusData);
          return;
        }

        this._focusContent(event);
      }
    }
  }, {
    key: "_traverseVerticalTab",
    value: function _traverseVerticalTab(event, keyPressed) {
      var _this$state3 = this.state,
          accessibilityItems = _this$state3.accessibilityItems,
          activeTabIndex = _this$state3.activeTabIndex;
      var navElements = accessibilityItems.navElements,
          outerLink = accessibilityItems.outerLink;
      var activeTab = navElements[activeTabIndex];
      var activePhantomLink = document.activeElement === activeTab;
      var shouldFocusContent = [activeTab, outerLink].includes(document.activeElement);

      if (keyPressed === "tab") {
        event && event.preventDefault();

        if (shouldFocusContent) {
          this._focusContent(event);
        } else {
          outerLink.focus();
        }

        this._updateActivePhantomLink(activePhantomLink);
      }
    }
    /**
     * @desc checks arrows keys pressed to navigate the nav tab items, and also checks if tab key is pressed to focus on content.
     * @return undefined
     * @param {Object} e event object passed to function
     */

  }, {
    key: "render",
    // use it to set either ref or innerRef prop
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          viewport = _this$props.viewport,
          ctaLink = _this$props.ctaLink,
          children = _this$props.children,
          animated = _this$props.animated,
          startAnimation = _this$props.startAnimation,
          linePosition = _this$props.linePosition,
          orientation = _this$props.orientation,
          indicatorPosition = _this$props.indicatorPosition;
      var activeTabIndex = this.state.activeTabIndex;
      var renderMargin = (children[activeTabIndex] || {}).props.renderMargin;
      var isDesktop = /desktop/g.test(viewport);
      var TabsComponent = orientation === "horizontal" || !isDesktop ? StyledVDSTabs : TabsContainer;
      return /*#__PURE__*/_react["default"].createElement(TabsWrapper, {
        isDesktop: isDesktop,
        orientation: orientation,
        renderMargin: renderMargin
      }, this._checkChildren() ? /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(SideNavigation, (0, _extends2["default"])({}, (0, _defineProperty2["default"])({}, this.refProp, function (elem) {
        return _this2.tabWrapperRef = elem;
      }), {
        isDesktop: isDesktop,
        onKeyDown: this._onTabNavKeyDownHandler,
        onKeyUp: this._shiftAndTabPressed,
        orientation: orientation
      }), /*#__PURE__*/_react["default"].createElement(ConditionalTabWrapper, {
        viewport: viewport,
        ctaLink: ctaLink,
        orientation: orientation
      }, /*#__PURE__*/_react["default"].createElement(TabsComponent, {
        viewport: viewport,
        indicatorPosition: orientation === 'vertical' ? "bottom" : indicatorPosition,
        selectedIndex: activeTabIndex,
        activeTabIndex: activeTabIndex,
        renderMargin: renderMargin,
        linePosition: linePosition,
        isDesktop: isDesktop,
        role: "tablist"
      }, this._mapChildrenForTabs(this.props, this.state.activeTabIndex)))), /*#__PURE__*/_react["default"].createElement(ContentWrapper, (0, _extends2["default"])({}, (0, _defineProperty2["default"])({}, this.refProp, function (elem) {
        return _this2.contentWrapperRef = elem;
      }), {
        isDesktop: isDesktop,
        renderMargin: renderMargin,
        onKeyDown: this._onContentKeyDownUpHandler,
        onKeyUp: this._onContentKeyDownUpHandler,
        role: "tabpanel"
      }), children.map(function (child, index) {
        return /*#__PURE__*/_react["default"].createElement(ChildWrapper, {
          key: index,
          active: index === activeTabIndex
        }, /*#__PURE__*/_react["default"].createElement(_Animator["default"], {
          name: "fadeInUp",
          animated: animated,
          startAnimation: startAnimation
        }, child));
      }), /*#__PURE__*/_react["default"].createElement(_PhantomLink["default"], {
        ctaLink: ctaLink,
        isActive: this.state.accessibilityItems.phantomLinkActive,
        isDesktop: this._isDesktopViewport(),
        getPosition: this._getPhantomLinkPos
      }))) : "");
    }
  }]);
  return MarketingTabs;
}(_react["default"].Component);

MarketingTabs.propTypes = propTypes;
MarketingTabs.defaultProps = defaultProps;

var _default = (0, _utilities.withVDSManager)(MarketingTabs);

exports["default"] = _default;