"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _enquire = _interopRequireDefault(require("enquire.js"));

var _theme = require("@vds-core/theme");

var desktop = {
  min: _parsePxStringToInt(_theme.breakpoints.lg),
  max: null
};
var tablet = {
  max: _parsePxStringToInt(_theme.breakpoints.lg),
  min: _parsePxStringToInt(_theme.breakpoints.md)
};
var mobile = {
  max: _parsePxStringToInt(_theme.breakpoints.md),
  min: null
}; // let defaultDesktopQuery = `screen and (min-width:${breakpoints.md})`;
// let defaultTabletQuery = `screen and (max-width:${breakpoints.md})`;
// let defaultMobileQuery = `screen and (max-width:${breakpoints.sm})`;

var ViewportManager = /*#__PURE__*/function () {
  function ViewportManager(config) {
    (0, _classCallCheck2["default"])(this, ViewportManager);
    this.viewport = this._calculateInitialViewport();
    if (!global.callbacks) global.callbacks = {};
  }

  (0, _createClass2["default"])(ViewportManager, [{
    key: "register",
    value: function register(_ref) {
      var _ref$maxMobile = _ref.maxMobile,
          maxMobile = _ref$maxMobile === void 0 ? _theme.breakpoints.md : _ref$maxMobile,
          _ref$maxTablet = _ref.maxTablet,
          maxTablet = _ref$maxTablet === void 0 ? _theme.breakpoints.lg : _ref$maxTablet;
      var self = this;
      var desktopQuery = "screen and (min-width:".concat(maxTablet, ")");
      var tabletQuery = "screen and (max-width:".concat(maxTablet, ")");
      var mobileQuery = "screen and (max-width:".concat(maxMobile, ")");
      if (this.registered) return; //If it goes from Tablet to Desktop

      _enquire["default"].register(desktopQuery, {
        match: function match() {
          self._changeViewport('desktop');
        }
      }); //If it goes from Desktop to Tablet


      _enquire["default"].register(tabletQuery, {
        match: function match() {
          self._changeViewport('tablet');
        }
      }); //If it goes from Tablet to Mobile


      _enquire["default"].register(mobileQuery, {
        match: function match() {
          self._changeViewport('mobile');
        },
        unmatch: function unmatch() {
          self._changeViewport('tablet');
        }
      });

      this.registered = true;
    }
  }, {
    key: "unregister",
    value: function unregister(_ref2) {
      var _ref2$maxMobile = _ref2.maxMobile,
          maxMobile = _ref2$maxMobile === void 0 ? _theme.breakpoints.md : _ref2$maxMobile,
          _ref2$maxTablet = _ref2.maxTablet,
          maxTablet = _ref2$maxTablet === void 0 ? _theme.breakpoints.lg : _ref2$maxTablet;
      var desktopQuery = "screen and (min-width:".concat(maxTablet, ")");
      var tabletQuery = "screen and (max-width:".concat(maxTablet, ")");
      var mobileQuery = "screen and (max-width:".concat(maxMobile, ")");
      if (!this.registered) return;

      _enquire["default"].unregister(desktopQuery);

      _enquire["default"].unregister(tabletQuery);

      _enquire["default"].unregister(mobileQuery);
    }
  }, {
    key: "subscribe",
    value: function subscribe(id, cb) {
      global.callbacks[id] = {
        callbackFn: cb
      };
    }
  }, {
    key: "unsubscribe",
    value: function unsubscribe(id) {
      delete global.callbacks[id];
    }
  }, {
    key: "_calculateInitialViewport",
    value: function _calculateInitialViewport() {
      var width = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
      var viewport;

      if ((desktop.min === null || desktop.min && width >= desktop.min) && (desktop.max === null || desktop.max && width <= desktop.max) && (desktop.min !== null || desktop.max !== null)) {
        viewport = 'desktop';
      } else if ((tablet.min === null || tablet.min && width >= tablet.min) && (tablet.max === null || tablet.max && width <= tablet.max) && (tablet.min !== null || tablet.max !== null)) {
        viewport = 'tablet';
      } else if ((mobile.min === null || mobile.min && width >= mobile.min) && (mobile.max === null || mobile.max && width <= mobile.max) && (mobile.min !== null || mobile.max !== null)) {
        viewport = 'mobile';
      }

      return viewport;
    }
  }, {
    key: "_changeViewport",
    value: function _changeViewport(currentViewport) {
      this.viewport = currentViewport;
      var callbackKeys = Object.keys(global.callbacks);

      if (callbackKeys.length > 0) {
        callbackKeys.forEach(function (key) {
          if (global.callbacks && global.callbacks[key] && global.callbacks[key].callbackFn) {
            global.callbacks[key].callbackFn(currentViewport);
          }
        });
      }
    }
  }]);
  return ViewportManager;
}();

var _default = new ViewportManager(); //Helpers


exports["default"] = _default;

function _parsePxStringToInt(string) {
  if (typeof string == 'number') return string;
  if (!string.indexOf('px')) return parseInt(string);
  return parseInt(string.split('px')[0]);
}