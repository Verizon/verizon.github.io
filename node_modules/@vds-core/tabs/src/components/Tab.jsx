import React, { Component } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import StyledButton from './TabButton';
import { calculateRem } from '@uie/javascript-style-helpers';
import { colors } from '@vds-core/theme';
import { TitleConfig, TypographyConfig } from '@vds-core/typography';

const propTypes = {
  /**
   * The text label of the tab.
   */
  label: PropTypes.string.isRequired,
  /**
   * An optional callback that is called when this Tab is clicked. Passes parameters (event, tabIndex).
   */
  onClick: PropTypes.func,
  /**
   * If provided, it will set this Tab to the Active Tab on render.<br><br><strong>Note:</strong> <br>This will override whatever was set on the Tab <code>selectedIndex</code> Prop.<br>Also, it is "Last One Wins", ie: if this is set on multiple Tab elements, the last element with it set will be the Active Tab.
   */
  active: PropTypes.bool,
  /**
   * @ignore
   */
  hide: PropTypes.oneOf([true, false, 0, 1, 2]),
  /**
   * Minimum Width of this Tab.
   */
  minWidth: PropTypes.string,
  /**
   * Option to make Accent Border 100% width of this Tab.
   */
  indicatorFillTab: PropTypes.bool,
  /**
   * Sets the Position of the Active/Hover Border Accent on this Tab.
   */
  indicatorPosition: PropTypes.oneOf(['bottom', 'top', 'none']),
  /**
   * If provided, this will be used instead of the random uniqueId generated by the Tabs Component that is used to associate the Tab <code>li</code> and <code>button</code> with the TabPanel <code>div</code> components.
   */
  uniqueId: PropTypes.string,
  /**
   * @ignore
   */
  className: PropTypes.string,
  /**
   * @ignore
   */
  handleVisibilityChange: PropTypes.func,
  /**
   * @ignore
   */
  onVisibilityChange: PropTypes.func,
  /**
   * Supplies a set height on the tab component.
   */
  tabHeight: PropTypes.string,
  /**
   * @deprecated
   * Minimum Width of this Tab.
   */
  minTabWidth: PropTypes.string, //DEPRECATED
  /**
   * @deprecated
   * Option to make Accent Border 100% width of this Tab.
   */
  accentFill: PropTypes.bool, // DEPRECATED
  /**
   * @deprecated
   * Sets the Position of the Active/Hover Border Accent on this Tab.
   */
  accentPosition: PropTypes.oneOf(['bottom', 'top', 'none']), //DEPRECATED
  /**
   * @deprecated
   * If provided, it will set this Tab to the Active Tab on render.<br><br><strong>Note:</strong> <br>This will override whatever was set on the Tab <code>activeTabIndex</code> Prop.<br>Also, it is "Last One Wins", ie: if this is set on multiple Tab elements, the last element with it set will be the Active Tab.
   */
  isActive: PropTypes.bool, // DEPRECATED
  /**
   * @ignore
   */
  focusState: PropTypes.bool,
  /**
   * @ignore
   */
  minHeight: PropTypes.bool,
  /**
   * @ignore
   */
  typescale: PropTypes.string,
  /**
   * @ignore
   */
  titleConfig: PropTypes.object,
  /**
   * @ignore
   */
  tabSpacing: PropTypes.string,
  /**
   * @ignore
   */
  colorConfig: PropTypes.object,
  /**
   * Allows a string to be provided for analytics.
   */
  'data-analyticstrack': PropTypes.string,
  /**
   * Allows a string to be provided for analytics.
   */
  'data-track': PropTypes.string,
  /**
   * Allows a string to be provided for click stream.
   */
  'data-clickstream': PropTypes.string,
};

const defaultProps = {
  hide: false,
  minWidth: undefined,
  className: null,
  typescale: TypographyConfig.getTypescale(),
  titleConfig: TitleConfig,
  tabSpacing: calculateRem(0, 40, 0, 0),
  colorConfig: colors,
};

const StyledTab = styled.li`
  position: relative;
  display: inline-block;
  outline: none;
  margin: ${({ tabSpacing }) => tabSpacing};
  min-width: ${({ minWidth, minTabWidth }) =>
    minWidth ? minWidth : minTabWidth};
  :last-child {
    margin: 0;
  }
`;

export class Tab extends Component {
  constructor(props) {
    super(props);
    this.handleVisibilityChange =
      props.handleVisibilityChange || props.onVisibilityChange;
    this.state = { selected: props.isActive || props.active };
  }

  componentDidUpdate(oldProps) {
    if (!this.props.handleVisibilityChange) {
      return;
    }

    if (
      this.props.isActive !== oldProps.isActive ||
      this.props.selected !== oldProps.selected
    ) {
      let active = this.props.isActive || this.props.selected;
      this.setState({ selected: active });
      this.handleVisibilityChange('isActive', active);
    }

    if (this.props.hide !== oldProps.hide) {
      this.handleVisibilityChange('hide', this.props.hide);
    }
  }

  _onClick = e => {
    if (e.detail === 0) e.preventDefault();
    this.props.onClick(e);
  };

  render() {
    const {
      accentFill,
      indicatorFillTab,
      accentPosition,
      indicatorPosition,
      hide,
      label,
      uniqueId,
      minWidth,
      minTabWidth,
      onClick,
      className,
      tabHeight,
      focusState,
      minHeight,
      height,
      typescale,
      titleConfig,
      tabSpacing,
      colorConfig,
      analyticsTrack,
      track,
      clickStream,
    } = this.props;

    if (hide) {
      return null;
    }

    return (
      <StyledTab
        tabSpacing={tabSpacing}
        id={`tab_${uniqueId}`}
        minWidth={minWidth}
        minTabWidth={minTabWidth}
        onClick={this._onClick}
        role="presentation"
        className={className}
      >
        <StyledButton
          accentFill={accentFill}
          indicatorFillTab={indicatorFillTab}
          accentPosition={accentPosition}
          indicatorPosition={indicatorPosition}
          selected={this.state.selected}
          label={label}
          uniqueId={uniqueId}
          tabHeight={tabHeight}
          focusState={focusState}
          minHeight={minHeight}
          typescale={typescale}
          titleConfig={titleConfig}
          colorConfig={colorConfig}
          clickStream={clickStream}
          analyticsTrack={analyticsTrack}
          track={track}
        >
          {label}
        </StyledButton>
      </StyledTab>
    );
  }
}

Tab.propTypes = propTypes;
Tab.defaultProps = defaultProps;

export default Tab;
