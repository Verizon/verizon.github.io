import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { calculateRem } from '@uie/javascript-style-helpers';
import { TitleConfig, TypographyConfig } from '@vds-core/typography';
import { colors } from '@vds-core/theme';

const coreTypescale = TypographyConfig.getTypescale();

/*
fontWeightStrong represents the font weight found in 
typography used when the component is bolded. Font weight is
not exported by typography configs due to the fact that 
typography components may have multiple font weight options
*/
const fontWeightStrong = 750;
const fontWeightVDS = 700;

const propTypes = {
  /**
   * @ignore
   */
  label: PropTypes.string.isRequired,
  /**
   * @ignore
   */
  isActive: PropTypes.bool, // DEPRECATED
  /**
   * @ignore
   */
  selected: PropTypes.bool,
  /**
   * @ignore
   */
  accentFill: PropTypes.bool,
  /**
   * @ignore
   */
  indicatorFillTab: PropTypes.bool,
  /**
   * @ignore
   */
  accentPosition: PropTypes.oneOf(['bottom', 'top', 'none']), //DEPRECATED
  /**
   * @ignore
   */
  indicatorPosition: PropTypes.oneOf(['bottom', 'top', 'none']),
  /**
   * @ignore
   */
  uniqueId: PropTypes.string,
  /**
   * @ignore
   */

  tabHeight: PropTypes.string,
  /**
   * @ignore
   */
  focusState: PropTypes.bool,
  /**
   * @ignore
   */
  minHeight: PropTypes.bool,
  /**
   * @ignore
   */
  typescale: PropTypes.string,
  /**
   * @ignore
   */
  titleConfig: PropTypes.object,
  /**
   * @ignore
   */
  colorConfig: PropTypes.object,
};

const defaultProps = {
  selected: false,
  accentFill: false,
  indicatorFillTab: false,
  indicatorPosition: 'top',
  uniqueId: undefined,

  tabHeight: '44px',
  focusState: false,
  minHeight: false,
  typescale: coreTypescale,
  titleConfig: TitleConfig,
  colorConfig: colors,
};

const buildAccentStyles = props => {
  const {
    accentFill,
    indicatorFillTab,
    accentPosition,
    indicatorPosition,
    selected,
    colorConfig,
  } = props;

  let styles = '';
  let position = accentPosition || indicatorPosition;

  if (accentFill || indicatorFillTab) {
    styles += `
      width: ${calculateRem(80)};
      padding-right: 1rem;
      margin-right: 0;
    `;
  } else {
    styles += `
      padding-right: 0;
    `;
  }

  styles += `
    border-top: ${position === 'top' ? calculateRem(4) : 0} solid transparent;
    border-bottom: ${
      position === 'bottom' ? calculateRem(4) : 0
    } solid transparent;
    border-${position}-color: ${
    selected ? colorConfig.red : colorConfig.coolGray6
  };
    transition: width 0.2s ease, background-color 0.2s ease;
  `;

  if (!selected) {
    styles += `
      border-${position}-color: transparent;
      &:hover {
        border-${position}-color: ${colorConfig.coolGray6};
      }
    `;
  }

  return styles;
};

//padding: ${calculateRem(16, 0, 16, 0)};

const StyledTabButton = styled.button`
  position: relative;
  padding: 0px;
  border: 0;
  display: inline-block;
  margin: 0;
  text-decoration: none;
  text-align: left;
  cursor: pointer;
  background-color: transparent;
  appearance: none;
  border-radius: 0;
  height: ${({ tabHeight }) => tabHeight};
  min-height: ${({ minHeight }) => (minHeight ? '44px' : 'none')};
  line-height: ${({ titleConfig }) => calculateRem(titleConfig.lineHeight)};
  font-size: ${({ titleConfig }) => calculateRem(titleConfig.fontSize)};
  font-family: ${({ titleConfig }) => titleConfig.fontFamily};
  font-weight: ${({ typescale }) =>
    typescale === 'VDS' ? fontWeightVDS : fontWeightStrong};
  color: ${({ selected, colorConfig }) =>
    selected ? colorConfig.black : colorConfig.coolGray6};

  &:active,
  &:visited,
  &:hover {
    outline: none;
  }
  > * {
    outline: none;
  }

  > * {
    height: 100%;
    width: 100%;
  }

  ${({ focusState, titleConfig, colorConfig }) =>
    focusState &&
    `
  &:focus:not(:hover) {
    outline: none;
    span {
      position: relative;
      display: block;
      height: auto;
      width: auto;
      &::after {
        border: ${calculateRem(1)} dashed ${colorConfig.black};
        content: '';
        top: ${calculateRem(-2)};
        bottom: ${calculateRem(-3)};
        left: ${calculateRem(-3)};
        width: calc(100% + ${calculateRem(4)});
        position: absolute;
      }
    }
  }
  &::-moz-focus-inner, 
  ::-moz-focus-inner {
    border: 0;
  }
  &:focus:hover {
    outline:none;
  }
  `};

  ${props => buildAccentStyles(props)};
`;

const ButtonContent = styled.span`
  display: flex;
  justify-content: middle;
  width: 100%;
`;

const TabWrapper = styled.span``;

/**
 * @ignore
 */
const TabButton = ({
  accentFill,
  indicatorFillTab,
  indicatorPosition,
  accentPosition,
  isActive,
  selected,
  label,
  uniqueId,
  tabHeight,
  focusState,
  typescale,
  titleConfig,
  colorConfig,
  minHeight,
  analyticsTrack,
  track,
  clickStream,
}) => {
  function _blurElem(e) {
    if (e.type === 'click' && e.detail !== 0) {
      e.currentTarget.blur();
    }
  }
  let fontsize = typescale === 'VDS' ? 'XSmall' : 'extraSmall';

  const titleExtraSmall = titleConfig.getStyles(typescale, 'desktop', fontsize);

  return (
    <StyledTabButton
      id={`${uniqueId}`}
      aria-controls={`tabPanel_${uniqueId}`}
      role="tab"
      aria-selected={isActive || selected}
      tabIndex={0}
      accentFill={accentFill}
      indicatorFillTab={indicatorFillTab}
      accentPosition={accentPosition}
      indicatorPosition={indicatorPosition}
      selected={isActive || selected}
      tabHeight={tabHeight}
      onClick={_blurElem}
      focusState={focusState}
      titleConfig={titleExtraSmall}
      colorConfig={colorConfig}
      minHeight={minHeight}
      data-clickstream={clickStream}
      data-analyticstrack={analyticsTrack}
      data-track={track}
    >
      <TabWrapper>{label}</TabWrapper>
    </StyledTabButton>
  );
};

TabButton.propTypes = propTypes;
TabButton.defaultProps = defaultProps;

export default TabButton;
