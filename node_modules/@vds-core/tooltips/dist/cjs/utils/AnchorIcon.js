"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _icons = _interopRequireDefault(require("@vds-core/icons"));

/* eslint-disable react/prop-types */

/**
 * @ignore
 */
var renderSmallIcon = function renderSmallIcon(props) {
  var showDialog = props.showDialog,
      inverted = props.inverted,
      hovered = props.hovered,
      clicked = props.clicked,
      activeState = props.activeState,
      hoverState = props.hoverState,
      iconConfig = props.iconConfig,
      colorConfig = props.colorConfig,
      focused = props.focused,
      focusState = props.focusState,
      active = props.active,
      disabled = props.disabled,
      rest = (0, _objectWithoutProperties2["default"])(props, ["showDialog", "inverted", "hovered", "clicked", "activeState", "hoverState", "iconConfig", "colorConfig", "focused", "focusState", "active", "disabled"]);

  function _calculateWeight() {
    return (showDialog && hoverState || clicked && activeState) && !disabled;
  }

  function _calculateColor() {
    var iconColor = colorConfig.black;
    if (inverted) iconColor = colorConfig.white;
    if (active && activeState) iconColor = colorConfig.coolGray6;
    if (disabled && inverted) iconColor = colorConfig.coolGray10;
    if (disabled && !inverted) iconColor = colorConfig.coolGray3;
    return iconColor;
  }

  return /*#__PURE__*/_react["default"].createElement(_icons["default"], {
    hasStroke: true,
    data: iconConfig,
    medium: _calculateWeight(),
    tabIndex: -1,
    name: "info",
    size: "small",
    color: _calculateColor(),
    focused: focused && !clicked && !showDialog && !disabled,
    focusState: focusState,
    inverted: inverted
  });
};
/**
 * @ignore
 */


var renderLargeIcon = function renderLargeIcon(props) {
  var showDialog = props.showDialog,
      inverted = props.inverted,
      hovered = props.hovered,
      clicked = props.clicked,
      activeState = props.activeState,
      hoverState = props.hoverState,
      iconConfig = props.iconConfig,
      colorConfig = props.colorConfig,
      focused = props.focused,
      focusState = props.focusState,
      keyboardFocused = props.keyboardFocused,
      active = props.active,
      disabled = props.disabled,
      rest = (0, _objectWithoutProperties2["default"])(props, ["showDialog", "inverted", "hovered", "clicked", "activeState", "hoverState", "iconConfig", "colorConfig", "focused", "focusState", "keyboardFocused", "active", "disabled"]);

  function _calculateWeight() {
    return (showDialog && hoverState || clicked && activeState) && !disabled;
  }

  function _calculateColor() {
    var iconColor = colorConfig.black;
    if (inverted) iconColor = colorConfig.white;
    if (active && activeState) iconColor = colorConfig.coolGray6;
    if (disabled && inverted) iconColor = colorConfig.coolGray10;
    if (disabled && !inverted) iconColor = colorConfig.coolGray3;
    return iconColor;
  }

  return /*#__PURE__*/_react["default"].createElement(_icons["default"], {
    hasStroke: true,
    data: iconConfig,
    medium: _calculateWeight(),
    tabIndex: -1,
    name: "info",
    size: "medium",
    color: _calculateColor(),
    focused: focused && !clicked && !showDialog && !disabled,
    focusState: focusState,
    inverted: inverted
  });
}; // secondary is destructured here so we don't write a boolean to the DOM will cause PropTypes
// eslint-disable-next-line no-unused-vars

/**
 * @ignore
 */


var AnchorIcon = function AnchorIcon(props) {
  var secondary = props.secondary;
  return /*#__PURE__*/_react["default"].createElement(_react.Fragment, null, props.size === 'small' ? renderSmallIcon(props) : renderLargeIcon(props));
};

AnchorIcon.propTypes = {
  size: _propTypes["default"].string,
  inverted: _propTypes["default"].bool,
  focused: _propTypes["default"].bool,
  focusState: _propTypes["default"].bool
};
AnchorIcon.defaultProps = {
  size: 'large',
  inverted: false,
  focused: false,
  focusState: false
};
var _default = AnchorIcon;
exports["default"] = _default;