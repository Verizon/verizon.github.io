"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _setEnvRef = _interopRequireDefault(require("@uie/set-env-ref"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _ScrollView = _interopRequireDefault(require("./ScrollView"));

var _javascriptStyleHelpers = require("@uie/javascript-style-helpers");

var _positionUtil = require("../utils/position-util");

var _vendorStyles = _interopRequireDefault(require("../utils/vendorStyles"));

var _typography = require("@vds-core/typography");

var _theme = require("@vds-core/theme");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _templateObject8() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n&&& {\n  display: flex;\n  flex: 1;\n  width: 100%;\n  height: 100%;\n  font-family: ", ";\n  font-size: ", ";\n  line-height: ", ";\n  letter-spacing: ", ";\n  margin: 0;\n}\n"]);

  _templateObject8 = function _templateObject8() {
    return data;
  };

  return data;
}

function _templateObject7() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n&&& {\n  display: flex;\n  flex: 1;\n  width: 100%;\n  font-family: ", ";\n  font-size: ", ";\n  line-height: ", ";\n  letter-spacing: ", ";\n  margin: 0;\n  font-weight: ", ";\n  margin-bottom: ", ";\n}\n"]);

  _templateObject7 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n&&& {\n  ", ";\n  display: inline;\n  width: 100%;\n}\n"]);

  _templateObject6 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n&&& {\n  display: inline-block;\n  width: 100%;\n  outline: none;\n  padding-right: 12px;\n  box-sizing: border-box;\n}\n  &&&:focus {\n    outline: none;\n  }\n"]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n&&& {\n  display: inline-block;\n  width: ", ";\n}\n  &&&:focus,\n  &&&.js-focus-visible :focus:not(.focus-visible) {\n    outline: none;\n  }\n  &&&:focus::after, &&&.js-focus-visible :focus:not(.focus-visible)::after {\n      content: '';\n      border: ", ";\n      height: calc(100% - 28px);\n      left: ", ";\n      position: absolute;\n      width: ", ";\n      top: ", ";\n    }\n  &&& span {\n    -ms-overflow-style: none; /* Internet Explorer 10+ */\n    scrollbar-width: none; /* Firefox */\n  }\n  &&& span ::-webkit-scrollbar {\n    /* Safari and Chrome */\n    -webkit-appearance: none;\n    width: 0px;\n  }\n"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n&&& {\n  display: inline-block;\n  overflow: visible; /* necessary for ie11 support to show focus-state */\n  position: relative;\n}\n"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n&&& {\n  cursor: pointer;\n  position: absolute;\n  box-sizing: border-box;\n  left: -1px;\n  height: ", ";\n  width: ", ";\n  z-index: 1;\n  ", ";\n  ", ";\n}\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n&&& {\n  ", ";\n\n  box-sizing: border-box;\n  background-color: ", ";\n  border: ", ";\n  color: ", ";\n  left: ", ";\n  position: absolute;\n  overflow: visible;\n  padding: ", ";\n  min-height: ", ";\n  max-height: ", ";\n  max-width: ", ";\n  -ms-overflow-style: none; /* disable scroll bar ie11*/\n  text-align: left;\n  transform: translateX(-50%);\n  visibility: ", ";\n  width: ", ";\n  will-change: transform, left;\n  z-index: ", ";\n  outline: none;\n\n  ", ";\n}\n  &&&::before {\n    content: '';\n    position: absolute;\n    box-sizing: border-box;\n    border-right: ", " solid\n      ", ";\n    border-bottom: ", " solid\n      ", ";\n    width: ", ";\n    height: ", ";\n    bottom: ", ";\n    background: white;\n    left: ", ";\n\n    transform: translate(-50%) rotate(45deg);\n    will-change: transform, left;\n    z-index: -1;\n  }\n  &&& * ::-webkit-scrollbar {\n    display: none;\n  }\n  &&& * {\n    -ms-overflow-style: none;\n    scrollbar-width: none;\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var propTypes = {
  /** String or function value for inner tooltip content . */
  content: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].array, _propTypes["default"].node]),

  /** Boolean value to know if anchor has been clicked open . */
  clicked: _propTypes["default"].bool,

  /** React Ref of tooltip anchor when custom anchor prop has been used */
  customAnchorElement: _propTypes["default"].instanceOf(Element),

  /** Boolean to adjust dialog spacing based on if a custom anchor element has been passed */
  customAnchorPresent: _propTypes["default"].bool,

  /** Method closes dialog active on mouseLeave. */
  deactivateDialogState: _propTypes["default"].func,

  /** String value for inner tooltip heading. */
  header: _propTypes["default"].string,

  /** id is a unique string for aria-labelledby */
  ariaId: _propTypes["default"].string,

  /** Method keeps dialog active on mouseEnter. */
  keepDialogActiveOnMouseEnter: _propTypes["default"].func,

  /** Boolean to track if keyboard has created focus. */
  keyboardFocused: _propTypes["default"].bool,

  /** Number to create space between custom element and tooltip dialog element */
  offset: _propTypes["default"].number,

  /** React Ref of tooltip anchor */
  toolTipAnchorRef: _propTypes["default"].instanceOf(Element),

  /** String to check what size anchor element is being used */
  size: _propTypes["default"].string,

  /** Boolean when true shows tooltip. */
  showDialog: _propTypes["default"].bool,
  //added after renaming
  title: _propTypes["default"].string,

  /**
   *
   *@ignore// inverted to change the border colors
   */
  inverted: _propTypes["default"].bool,

  /**
   * Allows a unique component ID to be passed to the component as a reference for positioning other than the window object.
   */
  containerId: _propTypes["default"].string
};
var defaultProps = {
  content: null,
  showDialog: false,
  clicked: false,
  // customAnchorElement: () => {},
  customAnchorPresent: false,
  deactivateDialogState: false,
  header: null,
  ariaId: null,
  keepDialogActiveOnMouseEnter: false,
  keyboardFocused: false,
  offset: 0,
  toolTipAnchorRef: null,
  size: null,
  //added after rename
  title: null,
  inverted: false
};
/*
fontWeightBold represents the font weight found in 
typography used when the component is bolded. Font weight is
not exported by typography configs due to the fact that 
typography components may have multiple font weight options
*/

var DialogWrapper = /*#__PURE__*/_styledComponents["default"].span.withConfig({
  componentId: "VDS__sc-1j52l2j-0"
})(_templateObject(), _vendorStyles["default"], function (_ref) {
  var colorConfig = _ref.colorConfig;
  return colorConfig.white;
}, function (_ref2) {
  var colorConfig = _ref2.colorConfig;
  return "solid ".concat((0, _javascriptStyleHelpers.calculateRem)(1), " ").concat(colorConfig.black);
}, function (_ref3) {
  var colorConfig = _ref3.colorConfig;
  return colorConfig.black;
}, function (_ref4) {
  var positionDialog = _ref4.positionDialog;
  return positionDialog();
}, function (_ref5) {
  var dialogPadding = _ref5.dialogPadding;
  return dialogPadding;
}, (0, _javascriptStyleHelpers.calculateRem)(40), (0, _javascriptStyleHelpers.calculateRem)(214), (0, _javascriptStyleHelpers.calculateRem)(224), function (_ref6) {
  var showDialog = _ref6.showDialog;
  return showDialog ? 'visible' : 'hidden';
}, (0, _javascriptStyleHelpers.calculateRem)(224), function (_ref7) {
  var clicked = _ref7.clicked;
  return clicked ? 998 : 999;
}, function (props) {
  return (0, _positionUtil.updateDialogPosition)(props);
}, (0, _javascriptStyleHelpers.calculateRem)(1), function (_ref8) {
  var inverted = _ref8.inverted,
      colorConfig = _ref8.colorConfig;
  return inverted ? colorConfig.white : colorConfig.black;
}, (0, _javascriptStyleHelpers.calculateRem)(1), function (_ref9) {
  var inverted = _ref9.inverted,
      colorConfig = _ref9.colorConfig;
  return inverted ? colorConfig.white : colorConfig.black;
}, (0, _javascriptStyleHelpers.calculateRem)(8.5), (0, _javascriptStyleHelpers.calculateRem)(8.5), function (_ref10) {
  var inverted = _ref10.inverted;
  return inverted ? (0, _javascriptStyleHelpers.calculateRem)(-3) : (0, _javascriptStyleHelpers.calculateRem)(-4.5);
}, function (_ref11) {
  var positionCaret = _ref11.positionCaret;
  return positionCaret();
});

var HoverZone = /*#__PURE__*/_styledComponents["default"].span.withConfig({
  componentId: "VDS__sc-1j52l2j-1"
})(_templateObject2(), (0, _javascriptStyleHelpers.calculateRem)(44), (0, _javascriptStyleHelpers.calculateRem)(224), function (_ref12) {
  var isDialogOnTop = _ref12.isDialogOnTop;
  return isDialogOnTop && "\n    bottom: ".concat((0, _javascriptStyleHelpers.calculateRem)(-44), ";\n    ");
}, function (_ref13) {
  var isDialogOnTop = _ref13.isDialogOnTop;
  return !isDialogOnTop && "\n    top: ".concat((0, _javascriptStyleHelpers.calculateRem)(-44), ";\n    ");
});

var sizeMap = {
  medium: 13,
  large: 13,
  small: 12
};

var InnerDialogWithScroll = /*#__PURE__*/_styledComponents["default"].span.withConfig({
  componentId: "VDS__sc-1j52l2j-2"
})(_templateObject3()); // focus state for inner dialog content


var InnerDialogWithScrollContentWrapper = /*#__PURE__*/_styledComponents["default"].span.withConfig({
  componentId: "VDS__sc-1j52l2j-3"
})(_templateObject4(), (0, _javascriptStyleHelpers.calculateRem)(200), function (_ref14) {
  var keyboardFocused = _ref14.keyboardFocused,
      colorConfig = _ref14.colorConfig;
  return keyboardFocused ? "".concat((0, _javascriptStyleHelpers.calculateRem)(1), " dotted ").concat(colorConfig.black) : '';
}, (0, _javascriptStyleHelpers.calculateRem)(12), (0, _javascriptStyleHelpers.calculateRem)(198), (0, _javascriptStyleHelpers.calculateRem)(12));

var InnerDialogWithoutScroll = /*#__PURE__*/_styledComponents["default"].span.withConfig({
  componentId: "VDS__sc-1j52l2j-4"
})(_templateObject5());

var TextWrapper = /*#__PURE__*/_styledComponents["default"].span.withConfig({
  componentId: "VDS__sc-1j52l2j-5"
})(_templateObject6(), function (_ref15) {
  var isIe = _ref15.isIe;
  return !isIe && "\n    flex-direction: column;\n  ";
});

var StyledHeading = /*#__PURE__*/_styledComponents["default"].span.withConfig({
  componentId: "VDS__sc-1j52l2j-6"
})(_templateObject7(), function (_ref16) {
  var bodyConfig = _ref16.bodyConfig;
  return bodyConfig.fontFamily;
}, function (_ref17) {
  var bodyConfig = _ref17.bodyConfig;
  return (0, _javascriptStyleHelpers.calculateRem)(bodyConfig.fontSize);
}, function (_ref18) {
  var bodyConfig = _ref18.bodyConfig;
  return (0, _javascriptStyleHelpers.calculateRem)(bodyConfig.lineHeight);
}, function (_ref19) {
  var bodyConfig = _ref19.bodyConfig;
  return bodyConfig.letterSpacing && (0, _javascriptStyleHelpers.calculateRem)(bodyConfig.letterSpacing);
}, function (_ref20) {
  var typescale = _ref20.typescale;
  return typescale === 'VDS' ? 700 : 'bold';
}, (0, _theme.calculateSpacing)('1X'));

var StyledContent = /*#__PURE__*/_styledComponents["default"].span.withConfig({
  componentId: "VDS__sc-1j52l2j-7"
})(_templateObject8(), function (_ref21) {
  var bodyConfig = _ref21.bodyConfig;
  return bodyConfig.fontFamily;
}, function (_ref22) {
  var bodyConfig = _ref22.bodyConfig;
  return (0, _javascriptStyleHelpers.calculateRem)(bodyConfig.fontSize);
}, function (_ref23) {
  var bodyConfig = _ref23.bodyConfig;
  return (0, _javascriptStyleHelpers.calculateRem)(bodyConfig.lineHeight);
}, function (_ref24) {
  var bodyConfig = _ref24.bodyConfig;
  return bodyConfig.letterSpacing && (0, _javascriptStyleHelpers.calculateRem)(bodyConfig.letterSpacing);
});
/**
 * @ignore
 */


var TooltipDialog = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(TooltipDialog, _Component);

  var _super = _createSuper(TooltipDialog);

  function TooltipDialog() {
    var _this;

    (0, _classCallCheck2["default"])(this, TooltipDialog);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "state", {
      isDialogOnTop: true,
      dialogHorizontalPosition: 0,
      tooltipDialogContentHeight: 0,
      dialogElementCoordinates: {},
      size: _this.props.size
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "componentDidMount", function () {
      _this.doUpdatedCoordinates = true;
      window.addEventListener('scroll', _this.setElementsProperties);
      window.addEventListener('resize', _this.setElementsProperties);

      _this.setElementsProperties();

      _this.tooltipDialogContentHeight();

      _this.positionDialogContentVertical();
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "componentDidUpdate", function () {
      if (_this.doUpdatedCoordinates) {
        _this.setElementsProperties();

        _this.positionDialogContentHorizontal(); // toggle doUpdateCoordinates flag to protect against infinite re-renders


        _this.doUpdatedCoordinates = false;
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "refKey", (0, _setEnvRef["default"])());
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "componentWillUnmount", function () {
      window.removeEventListener('scroll', _this.setElementsProperties);
      window.removeEventListener('resize', _this.setElementsProperties);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "setElementsProperties", function () {
      _this.setDialogElementPositionProperties();
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "setDialogElementPositionProperties", function () {
      /**
       * getBoundingRect of the tooltip dialog if coords have been updated
       * if no update take from state
       */
      var dialogElementRef = _this.tooltipContentRef;
      var dialogElementCoordinates = dialogElementRef.getBoundingClientRect();

      _this.setState({
        dialogElementCoordinates: dialogElementCoordinates
      });
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "positionDialogContentVertical", function () {
      var currentAnchorCoordinates = _this.props.tooltipAnchorCoordinates;
      var tooltipContentWithGutter = _this.tooltipContentRef.offsetHeight;
      var containerNode = _this.props.containerId && document.getElementById(_this.props.containerId);
      var contentOverflowsTop = false;

      if (containerNode) {
        var parentDistanceFromTop = containerNode.getBoundingClientRect().top;

        var dialogDistanceFromTop = _this.tooltipContentRef && _this.tooltipContentRef.getBoundingClientRect().top;

        contentOverflowsTop = dialogDistanceFromTop < parentDistanceFromTop;
      }

      var roomForDialogAboveAnchor = currentAnchorCoordinates.top && currentAnchorCoordinates.top > tooltipContentWithGutter;

      if (!roomForDialogAboveAnchor || contentOverflowsTop) {
        _this.setState({
          isDialogOnTop: false
        });
      } else {
        _this.setState({
          isDialogOnTop: true
        });
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "positionDialogContentHorizontal", function () {
      var gutter = 20;
      var anchorDistanceFromLeft = _this.props.tooltipAnchorCoordinates.left;
      var _this$state$dialogEle = _this.state.dialogElementCoordinates,
          dialogElementWidth = _this$state$dialogEle.width,
          dialogDistaceFromLeft = _this$state$dialogEle.left,
          dialogDistanceFromRight = _this$state$dialogEle.right;
      var halfDialogWidth = dialogElementWidth / 2;
      var dialogNearRight = window.innerWidth - gutter - dialogDistaceFromLeft - halfDialogWidth;
      var maxPos = halfDialogWidth - gutter + 4;
      var offset = _this.state.size ? sizeMap[_this.state.size] : 0;
      var containerNode = _this.props.containerId && document.getElementById(_this.props.containerId);

      if (containerNode) {
        var containerRect = containerNode.getBoundingClientRect();
        var moveLeft = dialogDistanceFromRight + gutter > containerRect.right ? true : false;
        var moveRight = dialogDistaceFromLeft - gutter < containerRect.left ? true : false;
        var dialogHorizontalPosition = 0;

        if (moveRight) {
          dialogHorizontalPosition = containerRect.left - dialogDistaceFromLeft + gutter;
        }

        if (moveLeft) {
          dialogHorizontalPosition = containerRect.right - dialogDistanceFromRight - gutter;
        }

        _this.setState({
          dialogHorizontalPosition: dialogHorizontalPosition
        });

        return;
      }

      if (halfDialogWidth > anchorDistanceFromLeft) {
        // if the anchorElement is <= 20px from left set both the arrow and
        // dialog to current position
        var _dialogHorizontalPosition = anchorDistanceFromLeft <= gutter ? halfDialogWidth - gutter + offset : halfDialogWidth - anchorDistanceFromLeft + offset;

        _this.setState({
          dialogHorizontalPosition: _dialogHorizontalPosition
        });
      } else if (halfDialogWidth > dialogNearRight) {
        //  flip negative to positive to check against maxPos
        var _dialogHorizontalPosition2 = Math.abs(dialogNearRight - halfDialogWidth) > maxPos ? -1 * maxPos + offset : dialogNearRight - halfDialogWidth + offset;

        _this.setState({
          dialogHorizontalPosition: _dialogHorizontalPosition2
        });
      } else {
        _this.setState({
          dialogHorizontalPosition: 0
        });
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "tooltipDialogContentHeight", function () {
      // get the height of dialog content, allows scroll bar to render if height is > 212px
      var tooltipDialogContentHeight = _this.tooltipContentRef.offsetHeight - 1;

      _this.setState({
        tooltipDialogContentHeight: tooltipDialogContentHeight
      });
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "handleDialogUnFocus", function (e) {
      // if keyDown === enter || tab deactivate dialog
      if (e.keyCode === 13 || e.keyCode === 9) {
        _this.props.deactivateDialogState();
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_positionCaret", function () {
      var position = _this.state.dialogHorizontalPosition;
      var leftOffset = position;
      if (position > 93) leftOffset = 94;
      if (position < -93) leftOffset = -94;
      return "calc(50% - ".concat(leftOffset, "px);"); //106 is each edge - include this a scrollable div
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_positionDialog", function () {
      var position = _this.state.dialogHorizontalPosition;
      var leftOffset = position;
      if (position > 93) leftOffset = 94;
      if (position < -93) leftOffset = -94;
      return "calc(50% + ".concat(leftOffset, "px);"); //106 is each edge - include this a scrollable div
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_onScroll", function (event) {
      _this.props.setScrollPosition(event.currentTarget.scrollTop);
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "doUpdatedCoordinates", true);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "renderTooltipDialogWithScroll", function (e) {
      var bodyConfig = _this.props.bodyConfig.getStyles(_this.props.typescale, 'desktop', 'small');

      return /*#__PURE__*/_react["default"].createElement(InnerDialogWithScroll, null, /*#__PURE__*/_react["default"].createElement(InnerDialogWithScrollContentWrapper, {
        colorConfig: _this.props.colorConfig,
        id: _this.props.ariaId // unset focus state so user can close dialog with keyboard
        // user can can scroll || leave with keyboard
        ,
        onKeyDown: _this.handleDialogUnFocus,
        keyboardFocused: _this.props.keyboardFocused
      }, /*#__PURE__*/_react["default"].createElement(_ScrollView["default"], null, (_this.props.header || _this.props.title) && /*#__PURE__*/_react["default"].createElement(StyledHeading, {
        bodyConfig: bodyConfig
      }, _this.props.header ? _this.props.header : _this.props.title && _this.props.title), _this.props.content && /*#__PURE__*/_react["default"].createElement(StyledContent, {
        bodyConfig: bodyConfig
      }, _this.props.content))));
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "renderDialogWithoutScroll", function () {
      var bodyConfig = _this.props.bodyConfig.getStyles(_this.props.typescale, 'desktop', 'small');

      var isIe = _this.props.isIe;
      return /*#__PURE__*/_react["default"].createElement(InnerDialogWithoutScroll, {
        role: "tooltip",
        dialogPadding: _this.props.dialogPadding,
        onKeyDown: _this.handleDialogUnFocus,
        tabIndex: -1,
        id: _this.props.ariaId
      }, /*#__PURE__*/_react["default"].createElement(TextWrapper, {
        isIe: isIe
      }, (_this.props.header || _this.props.title) && /*#__PURE__*/_react["default"].createElement(StyledHeading, {
        bodyConfig: bodyConfig,
        typescale: _this.props.typescale
      }, _this.props.header ? _this.props.header : _this.props.title && _this.props.title), _this.props.content && /*#__PURE__*/_react["default"].createElement(StyledContent, {
        bodyConfig: bodyConfig
      }, _this.props.content)));
    });
    return _this;
  }

  (0, _createClass2["default"])(TooltipDialog, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var dialogElementCoordinates = this.state.dialogElementCoordinates;
      var tooltipAnchorCoordinates = this.props.tooltipAnchorCoordinates;
      return /*#__PURE__*/_react["default"].createElement(DialogWrapper, (0, _extends2["default"])({
        dialogPadding: this.props.dialogPadding,
        positionCaret: this._positionCaret,
        positionDialog: this._positionDialog,
        anchorElemTop: tooltipAnchorCoordinates.top,
        anchorElemWidth: tooltipAnchorCoordinates.width,
        className: "persistentScrollbar",
        customAnchorElement: this.props.customAnchorElement,
        customAnchorPresent: this.props.customAnchorPresent,
        clicked: this.props.clicked,
        "data-testid": "dialog",
        dialogElementBottom: dialogElementCoordinates.bottom,
        dialogElementTop: dialogElementCoordinates.top,
        dialogElementWidth: dialogElementCoordinates.width,
        dialogHorizontalPosition: this.state.dialogHorizontalPosition,
        isDialogOnTop: this.state.isDialogOnTop,
        onClick: this.props.onClick,
        onMouseEnter: this.props.keepDialogActiveOnMouseEnter,
        "aria-hidden": !this.props.showDialog // dialog has been clicked don't close dialog on mouse out
        ,
        onMouseLeave: this.props.clicked ? null : this.props.deactivateDialogState // eslint-disable-next-line no-return-assign

      }, (0, _defineProperty2["default"])({}, this.refKey, function (elem) {
        return _this2.tooltipContentRef = elem;
      }), {
        role: "none",
        size: this.props.size,
        offset: this.props.offset,
        showDialog: this.props.showDialog,
        colorConfig: this.props.colorConfig,
        inverted: this.props.inverted
      }), this.state.tooltipDialogContentHeight > 212 ? this.renderTooltipDialogWithScroll() : this.renderDialogWithoutScroll(), /*#__PURE__*/_react["default"].createElement(HoverZone, {
        isDialogOnTop: this.state.isDialogOnTop,
        importantForAccessibility: "no",
        "data-testid": "hover-zone"
      }));
    }
  }]);
  return TooltipDialog;
}(_react.Component);

TooltipDialog.defaultProps = defaultProps;
TooltipDialog.propTypes = propTypes;
var _default = TooltipDialog;
exports["default"] = _default;