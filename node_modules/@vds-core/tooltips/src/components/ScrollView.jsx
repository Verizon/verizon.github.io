import React, { Component } from 'react';
import Scrollbars from '@uie/react-custom-scrollbar';
import { calculateRem } from '@uie/javascript-style-helpers';
import styled from 'styled-components';
import { colors } from '@vds-core/theme';

class ScrollView extends Component {
  constructor(props) {
    super(props);
    this.state = {
      clientHeight: null,
      scrollHeight: null,
      hover: false,
      top: null,
      scroll: false,
    };
    this.scrollRef = null;
  }

  componentDidMount() {
    this.scrollRef.view.focus();
  }

  _handleUpdate = values => {
    const { top, scrollHeight, clientHeight } = values;
    this.setState({ top, scrollHeight, clientHeight });
  };

  // MARK - Render Function Components

  View = ({ style, ...props }) => {
    const viewStyle = {
      marginRight: -15,
      paddingRight: 25,
      overflowX: 'hidden',
      height: '100%',
      outline: 'none',
    };
    return (
      <span
        id="tolltip-scrollbarview"
        className="VDS__"
        tabIndex={1}
        style={{ ...style, ...viewStyle }}
        {...props}
      />
    );
  };

  Track = ({ style, ...props }) => {
    const { clientHeight, scrollHeight } = this.state;
    const hideScroll = scrollHeight <= clientHeight;

    const trackStyle = {
      display: hideScroll ? 'none' : 'block',
      backgroundColor: colors.coolGray3,
      top: 0,
      right: 0,
      bottom: 0,
      width: 4,
      cursor: 'pointer',
    };
    return (
      <span
        id="tooltip-scrollbar-track"
        className="VDS__"
        style={{ ...style, ...trackStyle }}
        // onMouseOver={this._changeBackground}
        // onMouseOut={this._changeBackground}
        {...props}
      />
    );
  };

  Thumb = ({ style, ...props }) => {
    const thumbStyle = {
      backgroundColor: colors.coolGray6,
      height: '100%',
      width: 4,
    };

    return (
      <span
        id="tooltip-scrollbarthumb"
        className="VDS__"
        style={{ ...style, ...thumbStyle }}
        {...props}
      />
    );
  };

  render() {
    const scrollStyle = {
      height: 210 - 24,
      width: `${calculateRem(206)}`,
    };
    return (
      <Scrollbars
        id="Tooltip-scrollview"
        className="VDS__"
        ref={el => (this.scrollRef = el)}
        renderView={this.View}
        renderTrackVertical={this.Track}
        renderThumbVertical={this.Thumb}
        renderTrackHorizontal={({ style, ...props }) => (
          <span className="VDS__" />
        )}
        renderThumbHorizontal={({ style, ...props }) => (
          <span className="VDS__" />
        )}
        onUpdate={this._handleUpdate}
        style={scrollStyle}
        {...this.props}
      >
        {this.props.children}
      </Scrollbars>
    );
  }
}

export default ScrollView;
