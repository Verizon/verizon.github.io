import styled from 'styled-components';
import PropTypes from 'prop-types';
import { calculateRem } from '@uie/javascript-style-helpers';
import { colors } from '@vds-core/theme';

const propTypes = {
  /**
   * @ignore
   */
  size: PropTypes.string,
  /**
   * @ignore
   */
  secondary: PropTypes.bool,
  /**
   * @ignore
   */
  showDialog: PropTypes.bool,
  /**
   * @ignore
   */
  hovered: PropTypes.bool,
  /**
   * @ignore
   */
  activeStyleState: PropTypes.bool,
  /**
   * @ignore
   */
  type: PropTypes.string,
};

const defaultProps = {
  secondary: false,
  showDialog: false,
  hovered: false,
  activeStyleState: false,
  type: null,
};

/**
 * @ignore
 */
const AnchorIconBase = styled.span`
  display: inline-flex;
  justify-content: center;
  background: none;
  color: inherit;
  cursor: ${({ disabled }) => (disabled ? 'default' : 'pointer')};
  transition-delay: 0.2s;
  overflow: visible;
  left: ${calculateRem(4)};
  position: relative;
  border: none;
  outline: none;
  &:focus,
  &.js-focus-visible :focus:not(.focus-visible) {
    outline: none;
  }

  ${({ keyboardFocused }) =>
    !keyboardFocused &&
    `
    outline: none;

  `};

  ${({
    showDialog,
    secondary,
    size,
    type,
    inverted,
    keyboardFocused,
    focusState,
  }) =>
    !showDialog &&
    !inverted &&
    keyboardFocused &&
    !focusState &&
    `

    &:focus {
        border: 1px solid transparent;
        outline: -webkit-focus-ring-color auto 5px;
    }

  `};
  ${({ keyboardFocused, focusState, inverted, colorConfig }) =>
    focusState &&
    keyboardFocused &&
    `
    &:focus {
      outline: none;
        &::before {
          border: ${calculateRem(1)} dashed ${
      inverted ? colorConfig.white : colorConfig.black
    };
          border-radius: 50%;
          content: '';
          height: calc(100% + ${calculateRem(2)});
          left: 50%; 
          position: absolute;
          top: 50%;
          transform: translate(-50%, -50%);
          width: calc(100% + ${calculateRem(2)});
        }
    }
  `};

  ${({ secondary, type, colorConfig }) =>
    (secondary || type === 'secondary') &&
    `
    fill: ${colorConfig.white};
  `};

  ${({ hovered, secondary, size, type, inverted }) =>
    hovered &&
    !inverted &&
    ` 
       &:focus,
       &.focus-visible {
        &::after {
          border: none;
        }
      }
    `};
`;

AnchorIconBase.propTypes = propTypes;
AnchorIconBase.defaultProps = defaultProps;

export default AnchorIconBase;
