/* eslint-disable react/prop-types */
import React, { Fragment } from 'react';
import PropTypes from 'prop-types';
import Icon from '@vds-core/icons';

/**
 * @ignore
 */

const renderSmallIcon = props => {
  const {
    showDialog,
    inverted,
    hovered,
    clicked,
    activeState,
    hoverState,
    iconConfig,
    colorConfig,
    focused,
    focusState,
    active,
    disabled,
    ...rest
  } = props;

  function _calculateWeight() {
    return (
      ((showDialog && hoverState) || (clicked && activeState)) && !disabled
    );
  }

  function _calculateColor() {
    let iconColor = colorConfig.black;
    if (inverted) iconColor = colorConfig.white;
    if (active && activeState) iconColor = colorConfig.coolGray6;
    if (disabled && inverted) iconColor = colorConfig.coolGray10;
    if (disabled && !inverted) iconColor = colorConfig.coolGray3;
    return iconColor;
  }
  return (
    <Icon
      hasStroke
      data={iconConfig}
      medium={_calculateWeight()}
      tabIndex={-1}
      name="info"
      size="small"
      color={_calculateColor()}
      focused={focused && !clicked && !showDialog && !disabled}
      focusState={focusState}
      inverted={inverted}
    />
  );
};

/**
 * @ignore
 */
const renderLargeIcon = props => {
  const {
    showDialog,
    inverted,
    hovered,
    clicked,
    activeState,
    hoverState,
    iconConfig,
    colorConfig,
    focused,
    focusState,
    keyboardFocused,
    active,
    disabled,
    ...rest
  } = props;

  function _calculateWeight() {
    return (
      ((showDialog && hoverState) || (clicked && activeState)) && !disabled
    );
  }

  function _calculateColor() {
    let iconColor = colorConfig.black;
    if (inverted) iconColor = colorConfig.white;
    if (active && activeState) iconColor = colorConfig.coolGray6;
    if (disabled && inverted) iconColor = colorConfig.coolGray10;
    if (disabled && !inverted) iconColor = colorConfig.coolGray3;
    return iconColor;
  }
  return (
    <Icon
      hasStroke
      data={iconConfig}
      medium={_calculateWeight()}
      tabIndex={-1}
      name="info"
      size="medium"
      color={_calculateColor()}
      focused={focused && !clicked && !showDialog && !disabled}
      focusState={focusState}
      inverted={inverted}
    />
  );
};

// secondary is destructured here so we don't write a boolean to the DOM will cause PropTypes
// eslint-disable-next-line no-unused-vars
/**
 * @ignore
 */
const AnchorIcon = props => {
  const { secondary } = props;
  return (
    <Fragment>
      {props.size === 'small' ? renderSmallIcon(props) : renderLargeIcon(props)}
    </Fragment>
  );
};

AnchorIcon.propTypes = {
  size: PropTypes.string,
  inverted: PropTypes.bool,
  focused: PropTypes.bool,
  focusState: PropTypes.bool,
};

AnchorIcon.defaultProps = {
  size: 'large',
  inverted: false,
  focused: false,
  focusState: false,
};

export default AnchorIcon;
