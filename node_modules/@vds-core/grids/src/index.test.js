import React from 'react';
import { render } from '@testing-library/react';
import { Grid, Row, Col } from '.';
import { withKnobs, boolean, select, number } from '@storybook/addon-knobs';
import { VDSManager } from '@vds-core/utilities';
import styled from 'styled-components';
import { breakpoints, colors } from '@vds-core/theme';

const gutterTests = [undefined, 10, '{ "xs": 7, "md": 15 }'];

// const maxWidthTests = [
//   undefined,
//   'xs',
//   'sm',
//   'md',
//   'lg',
//   'xl',
//   1024,
//   '768px',
//   '38rem',
//   '100%',
//   '50%',
//   null,
// ];

const StyledContainer = styled.div`
  width: 100%;
  max-width: 1272px;
  background-color: white;
  border: 1px solid ${colors.coolGray6};
`;

const StyledCol = styled(Col)`
  color: white;
`;

const BoxContent = styled.div`
  position: relative;
  box-sizing: border-box;
  min-height: 1rem;
  background: lightGray;
  overflow: hidden;
  text-align: center;
  color: gray;
  padding: 2rem 0;
  white-space: nowrap;
`;

describe('<Grid>', () => {
  test('Grid', () => {
    const colOptions = {
      range: true,
      min: 1,
      max: 12,
      step: 1,
    };
    const colSizesKnobs = {
      mobile: number('mobile col span', 2, colOptions),
      tablet: number('tablet col span', 2, colOptions),
      desktop: number('desktop col span', 2, colOptions),
    };

    //const verticalKnob = boolean('vertical', false);

    const label = 'number of children';
    const defaultValue = 4;
    const options = {
      range: true,
      min: 1,
      max: 12,
      step: 1,
    };

    const gutterOpts = ['0px', '10px', '10%'];

    const numberOfOptions = number(label, defaultValue, options);
    function _renderOptions(row) {
      let options = Array.from({ length: numberOfOptions }).map(
        (item, index) => {
          return (
            <StyledCol colSizes={colSizesKnobs}>
              <BoxContent>{'Row-' + row}</BoxContent>
            </StyledCol>
          );
        }
      );
      return options;
    }

    let viewportShow = boolean('custom viewport', false);

    const { container } = render(
      <VDSManager>
        <StyledContainer>
          <Grid
            rowGutter={select('row gutter', gutterOpts, '10px')}
            viewport={
              !viewportShow
                ? undefined
                : select('viewport', ['desktop', 'tablet', 'mobile'], 'desktop')
            }
          >
            <Row>{_renderOptions(1)}</Row>
            <Row>{_renderOptions(2)}</Row>
          </Grid>
        </StyledContainer>
      </VDSManager>
    );
  });
});

test(`<Grid> test vertical missing height`, () => {
  expect(true).toBe(true);
});
