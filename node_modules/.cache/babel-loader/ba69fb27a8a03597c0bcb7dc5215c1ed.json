{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { calculateRem } from '@uie/javascript-style-helpers';\nimport { colors, calculateSpacing } from '@vds/theme';\nimport { IconData } from '@vds/icons';\nimport { DropdownSelect as CoreDropdownSelect } from '@vds-core/selects';\nimport { BodyConfig, Body, Micro, TypographyConfig } from '@vds/typography';\nimport { Tooltip } from '@vds/tooltips';\nvar propTypes = {\n  required: PropTypes.bool,\n\n  /**\n   * Boolean determining if label is inline or outside container\n   */\n  inlineLabel: PropTypes.bool,\n\n  /**\n   * String containing the header of the TooltipDialog\n   */\n  tooltipTitle: PropTypes.string,\n\n  /**\n   * String containing the body content of the TooltipDialog\n   */\n  tooltipContent: PropTypes.string,\n\n  /**\n   * If provided, will contain the string for the helper text\n   */\n  helperText: PropTypes.string,\n\n  /**\n   * Determines the placement of the helper text (right or bottom)\n   */\n  helperTextPlacement: PropTypes.oneOf(['right', 'bottom'])\n};\nvar defaultProps = {\n  required: true,\n  helperTextPlacement: 'bottom',\n  inlineLabel: false\n};\n\nvar DropdownSelect = function DropdownSelect(props) {\n  var required = props.required,\n      inlineLabel = props.inlineLabel,\n      helperText = props.helperText,\n      helperTextPlacement = props.helperTextPlacement,\n      tooltipTitle = props.tooltipTitle,\n      tooltipContent = props.tooltipContent;\n\n  function determinePadding(error) {\n    if (error) {\n      return calculateRem(12, 44, 9, 12);\n    } else {\n      return calculateRem(12, 44, 12, 12);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(CoreDropdownSelect, _extends({}, props, {\n    readOnlyBorders: true,\n    hoverState: true,\n    focusState: true,\n    inputFontSize: true,\n    overflowEllipsis: true,\n    typescale: TypographyConfig.getTypescale(),\n    minWidth: inlineLabel ? '103px' : '66px',\n    maxWidth: \"596px\",\n    height: calculateRem(44),\n    selectPadding: determinePadding(props.error),\n    labelMarginBottom: calculateSpacing('1X'),\n    errorLabelSpacing: calculateSpacing('2X'),\n    iconConfig: IconData,\n    color: colors,\n    required: required,\n    bodyConfig: BodyConfig,\n    helperText: helperText,\n    helperTextPlacement: helperTextPlacement,\n    Tooltip: Tooltip,\n    tooltipTitle: tooltipTitle,\n    tooltipContent: tooltipContent,\n    Body: Body,\n    Micro: Micro\n  }));\n};\n\nDropdownSelect.propTypes = propTypes;\nDropdownSelect.defaultProps = defaultProps;\nexport default DropdownSelect;","map":{"version":3,"sources":["/Users/vamsi/verizon.github.io/node_modules/@vds/selects/dist/esm/components/DropdownSelect.js"],"names":["_extends","React","PropTypes","styled","calculateRem","colors","calculateSpacing","IconData","DropdownSelect","CoreDropdownSelect","BodyConfig","Body","Micro","TypographyConfig","Tooltip","propTypes","required","bool","inlineLabel","tooltipTitle","string","tooltipContent","helperText","helperTextPlacement","oneOf","defaultProps","props","determinePadding","error","createElement","readOnlyBorders","hoverState","focusState","inputFontSize","overflowEllipsis","typescale","getTypescale","minWidth","maxWidth","height","selectPadding","labelMarginBottom","errorLabelSpacing","iconConfig","color","bodyConfig"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { calculateRem } from '@uie/javascript-style-helpers';\nimport { colors, calculateSpacing } from '@vds/theme';\nimport { IconData } from '@vds/icons';\nimport { DropdownSelect as CoreDropdownSelect } from '@vds-core/selects';\nimport { BodyConfig, Body, Micro, TypographyConfig } from '@vds/typography';\nimport { Tooltip } from '@vds/tooltips';\nvar propTypes = {\n  required: PropTypes.bool,\n\n  /**\n   * Boolean determining if label is inline or outside container\n   */\n  inlineLabel: PropTypes.bool,\n\n  /**\n   * String containing the header of the TooltipDialog\n   */\n  tooltipTitle: PropTypes.string,\n\n  /**\n   * String containing the body content of the TooltipDialog\n   */\n  tooltipContent: PropTypes.string,\n\n  /**\n   * If provided, will contain the string for the helper text\n   */\n  helperText: PropTypes.string,\n\n  /**\n   * Determines the placement of the helper text (right or bottom)\n   */\n  helperTextPlacement: PropTypes.oneOf(['right', 'bottom'])\n};\nvar defaultProps = {\n  required: true,\n  helperTextPlacement: 'bottom',\n  inlineLabel: false\n};\n\nvar DropdownSelect = function DropdownSelect(props) {\n  var required = props.required,\n      inlineLabel = props.inlineLabel,\n      helperText = props.helperText,\n      helperTextPlacement = props.helperTextPlacement,\n      tooltipTitle = props.tooltipTitle,\n      tooltipContent = props.tooltipContent;\n\n  function determinePadding(error) {\n    if (error) {\n      return calculateRem(12, 44, 9, 12);\n    } else {\n      return calculateRem(12, 44, 12, 12);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(CoreDropdownSelect, _extends({}, props, {\n    readOnlyBorders: true,\n    hoverState: true,\n    focusState: true,\n    inputFontSize: true,\n    overflowEllipsis: true,\n    typescale: TypographyConfig.getTypescale(),\n    minWidth: inlineLabel ? '103px' : '66px',\n    maxWidth: \"596px\",\n    height: calculateRem(44),\n    selectPadding: determinePadding(props.error),\n    labelMarginBottom: calculateSpacing('1X'),\n    errorLabelSpacing: calculateSpacing('2X'),\n    iconConfig: IconData,\n    color: colors,\n    required: required,\n    bodyConfig: BodyConfig,\n    helperText: helperText,\n    helperTextPlacement: helperTextPlacement,\n    Tooltip: Tooltip,\n    tooltipTitle: tooltipTitle,\n    tooltipContent: tooltipContent,\n    Body: Body,\n    Micro: Micro\n  }));\n};\n\nDropdownSelect.propTypes = propTypes;\nDropdownSelect.defaultProps = defaultProps;\nexport default DropdownSelect;"]},"metadata":{},"sourceType":"module"}