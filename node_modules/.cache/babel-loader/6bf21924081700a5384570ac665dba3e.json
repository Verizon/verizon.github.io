{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  &:active,\\n  &:focus,\\n  &:hover {\\n    outline: none;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { colors } from '@vds-core/theme';\nimport TypographyConfig from '../../typographyConfig';\nimport defaultConfig from './config';\nimport fontColorPropType from '../../util/fontColorPropType';\nimport { Typography } from '../Typography';\nimport { withVDSManager } from '@vds-core/utilities';\nvar propTypes = {\n  /**\n   * Primitive used for the component.\n   */\n  primitive: PropTypes.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'span', 'p']),\n\n  /**\n   * Viewport the font styling is based on. Desktop and tablet are the same size\n   */\n  viewport: PropTypes.oneOf(['desktop', 'mobile', 'tablet']),\n\n  /**\n   * Content that will be passed to the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Color of the text.\n   */\n  color: fontColorPropType,\n\n  /**\n   * Allows for specific typescale to be passed to override global config.\n   */\n  typescale: PropTypes.oneOf(['VDS', 'MVP']),\n\n  /**\n   * If the theme object contains the `typescale` key and no typescale prop was passed global typescale is overriden by theme.\n   */\n  theme: PropTypes.object,\n\n  /**\n   * The tabIndex of the text.\n   */\n  tabIndex: PropTypes.number,\n\n  /**\n   * @ignore\n   */\n  config: PropTypes.object,\n\n  /**\n   * Assigns an Id to the component\n   */\n  id: PropTypes.string,\n\n  /**\n   * Adds an aria-labelledby attribute to the component\n   */\n  ariaLabelledBy: PropTypes.string\n};\nvar defaultProps = {\n  primitive: 'p',\n  viewport: 'desktop',\n  children: null,\n  color: colors.black,\n  config: defaultConfig\n};\nvar StyledMicro = /*#__PURE__*/styled(Typography).withConfig({\n  displayName: \"StyledMicro\",\n  componentId: \"sc-13h2lsp-0\"\n})(_templateObject());\n\nvar Micro = function Micro(props) {\n  var children = props.children,\n      primitive = props.primitive,\n      viewport = props.viewport,\n      color = props.color,\n      typescale = props.typescale,\n      theme = props.theme,\n      tabIndex = props.tabIndex,\n      config = props.config,\n      fontsConfigProp = props.fontsConfig,\n      ariaLabel = props.ariaLabel,\n      id = props.id,\n      ariaLabelledBy = props.ariaLabelledBy;\n  var // What typescale is being used for configuration\n  typescaleToUse = typescale ? typescale : theme && theme.typescale ? theme.typescale : TypographyConfig.getTypescale(),\n      viewportToUse = viewport === 'mobile' ? 'mobile' : 'desktop',\n      // What is the specific font configuration we are using\n  fontConfig = config[typescaleToUse][viewportToUse];\n  return /*#__PURE__*/React.createElement(StyledMicro, {\n    fontSize: fontConfig.fontSize,\n    fontWeight: fontConfig.fontWeight,\n    fontFamily: fontConfig.fontFamily,\n    lineheight: fontConfig.lineHeight,\n    primitive: primitive,\n    color: color,\n    tabIndex: tabIndex,\n    \"aria-hidden\": tabIndex < 0,\n    fontsconfig: fontsConfigProp,\n    \"aria-label\": ariaLabel,\n    id: id,\n    \"aria-labelledby\": ariaLabelledBy\n  }, children);\n};\n\nMicro.propTypes = propTypes;\nMicro.defaultProps = defaultProps;\nexport default withVDSManager(Micro);","map":{"version":3,"sources":["/Users/vamsi/verizon-os-react/node_modules/@vds-core/typography/dist/esm/components/Micro/Micro.js"],"names":["_taggedTemplateLiteral","_templateObject","data","React","PropTypes","styled","colors","TypographyConfig","defaultConfig","fontColorPropType","Typography","withVDSManager","propTypes","primitive","oneOf","viewport","children","node","color","typescale","theme","object","tabIndex","number","config","id","string","ariaLabelledBy","defaultProps","black","StyledMicro","withConfig","displayName","componentId","Micro","props","fontsConfigProp","fontsConfig","ariaLabel","typescaleToUse","getTypescale","viewportToUse","fontConfig","createElement","fontSize","fontWeight","fontFamily","lineheight","lineHeight","fontsconfig"],"mappings":"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","sourcesContent":["import _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  &:active,\\n  &:focus,\\n  &:hover {\\n    outline: none;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { colors } from '@vds-core/theme';\nimport TypographyConfig from '../../typographyConfig';\nimport defaultConfig from './config';\nimport fontColorPropType from '../../util/fontColorPropType';\nimport { Typography } from '../Typography';\nimport { withVDSManager } from '@vds-core/utilities';\nvar propTypes = {\n  /**\n   * Primitive used for the component.\n   */\n  primitive: PropTypes.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'span', 'p']),\n\n  /**\n   * Viewport the font styling is based on. Desktop and tablet are the same size\n   */\n  viewport: PropTypes.oneOf(['desktop', 'mobile', 'tablet']),\n\n  /**\n   * Content that will be passed to the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Color of the text.\n   */\n  color: fontColorPropType,\n\n  /**\n   * Allows for specific typescale to be passed to override global config.\n   */\n  typescale: PropTypes.oneOf(['VDS', 'MVP']),\n\n  /**\n   * If the theme object contains the `typescale` key and no typescale prop was passed global typescale is overriden by theme.\n   */\n  theme: PropTypes.object,\n\n  /**\n   * The tabIndex of the text.\n   */\n  tabIndex: PropTypes.number,\n\n  /**\n   * @ignore\n   */\n  config: PropTypes.object,\n\n  /**\n   * Assigns an Id to the component\n   */\n  id: PropTypes.string,\n\n  /**\n   * Adds an aria-labelledby attribute to the component\n   */\n  ariaLabelledBy: PropTypes.string\n};\nvar defaultProps = {\n  primitive: 'p',\n  viewport: 'desktop',\n  children: null,\n  color: colors.black,\n  config: defaultConfig\n};\nvar StyledMicro = /*#__PURE__*/styled(Typography).withConfig({\n  displayName: \"StyledMicro\",\n  componentId: \"sc-13h2lsp-0\"\n})(_templateObject());\n\nvar Micro = function Micro(props) {\n  var children = props.children,\n      primitive = props.primitive,\n      viewport = props.viewport,\n      color = props.color,\n      typescale = props.typescale,\n      theme = props.theme,\n      tabIndex = props.tabIndex,\n      config = props.config,\n      fontsConfigProp = props.fontsConfig,\n      ariaLabel = props.ariaLabel,\n      id = props.id,\n      ariaLabelledBy = props.ariaLabelledBy;\n  var // What typescale is being used for configuration\n  typescaleToUse = typescale ? typescale : theme && theme.typescale ? theme.typescale : TypographyConfig.getTypescale(),\n      viewportToUse = viewport === 'mobile' ? 'mobile' : 'desktop',\n      // What is the specific font configuration we are using\n  fontConfig = config[typescaleToUse][viewportToUse];\n  return /*#__PURE__*/React.createElement(StyledMicro, {\n    fontSize: fontConfig.fontSize,\n    fontWeight: fontConfig.fontWeight,\n    fontFamily: fontConfig.fontFamily,\n    lineheight: fontConfig.lineHeight,\n    primitive: primitive,\n    color: color,\n    tabIndex: tabIndex,\n    \"aria-hidden\": tabIndex < 0,\n    fontsconfig: fontsConfigProp,\n    \"aria-label\": ariaLabel,\n    id: id,\n    \"aria-labelledby\": ariaLabelledBy\n  }, children);\n};\n\nMicro.propTypes = propTypes;\nMicro.defaultProps = defaultProps;\nexport default withVDSManager(Micro);"]},"metadata":{},"sourceType":"module"}