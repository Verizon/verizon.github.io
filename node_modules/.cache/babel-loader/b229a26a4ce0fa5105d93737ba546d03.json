{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  &:active,\\n  &:focus,\\n  &:hover {\\n    outline: none;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { colors } from '@vds-core/theme';\nimport TypographyConfig from '../../typographyConfig';\nimport fontColorPropType from '../../util/fontColorPropType';\nimport { Typography } from '../Typography';\nimport { withVDSManager } from '@vds-core/utilities';\nimport defaultConfig from './config';\n\nfunction getBodyFontWeight(typescale, bold) {\n  switch (typescale) {\n    case 'MVP':\n    case 'VDS':\n      return bold ? '750' : '400';\n    // 400 is mapped to match 55 Roman\n\n    default:\n      return bold ? 'bold' : 'normal';\n  }\n}\n\nvar propTypes = {\n  /**\n   * Primitive used for the component.\n   */\n  primitive: PropTypes.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'span', 'p']),\n\n  /**\n   * Viewport the font styling is based on. Desktop and tablet are the same size.\n   */\n  viewport: PropTypes.oneOf(['desktop', 'tablet', 'mobile']),\n\n  /**\n   * Size of the typescale that will be used.\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n\n  /**\n   * Content that will be passed to the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * The color of the text.\n   */\n  color: fontColorPropType,\n\n  /**\n   * Adds a fontWeight of bold.\n   */\n  bold: PropTypes.bool,\n\n  /**\n   * Allows for specific typescale to be passed to override global config.\n   */\n  typescale: PropTypes.oneOf(['VDS', 'MVP']),\n\n  /**\n   * If the theme object contains the `typescale` key and no typescale prop was passed global typescale is overriden by theme.\n   */\n  theme: PropTypes.object,\n\n  /**\n   * The tabIndex of the text.\n   */\n  tabIndex: PropTypes.number,\n\n  /**\n   * @ignore\n   */\n  config: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  getfontWeight: PropTypes.func,\n\n  /**\n   * Assigns an Id to the component\n   */\n  id: PropTypes.string,\n\n  /**\n   * Adds an aria-labelledby attribute to the component\n   */\n  ariaLabelledBy: PropTypes.string\n};\nvar defaultProps = {\n  primitive: 'p',\n  viewport: 'desktop',\n  size: 'small',\n  children: null,\n  color: colors.black,\n  bold: false,\n  config: defaultConfig,\n  getFontWeight: getBodyFontWeight\n};\nvar StyledBody = /*#__PURE__*/styled(Typography).withConfig({\n  displayName: \"StyledBody\",\n  componentId: \"sc-1s1yqd8-0\"\n})(_templateObject());\n\nvar Body = function Body(props) {\n  var config = props.config,\n      children = props.children,\n      primitive = props.primitive,\n      viewport = props.viewport,\n      size = props.size,\n      color = props.color,\n      bold = props.bold,\n      typescale = props.typescale,\n      theme = props.theme,\n      tabIndex = props.tabIndex,\n      getFontWeight = props.getFontWeight,\n      fontsConfigProp = props.fontsConfig,\n      ariaLabel = props.ariaLabel,\n      id = props.id,\n      ariaLabelledBy = props.ariaLabelledBy;\n  var // What typescale is being used for configuration\n  typescaleToUse = typescale ? typescale : theme && theme.typescale ? theme.typescale : TypographyConfig.getTypescale(),\n      viewportToUse = viewport === 'mobile' ? 'mobile' : 'desktop',\n      // What is the specific font configuration we are using\n  fontConfig = config[typescaleToUse][viewportToUse][size],\n      fontWeight = getFontWeight(typescaleToUse, bold);\n  return /*#__PURE__*/React.createElement(StyledBody, {\n    fontSize: fontConfig.fontSize,\n    fontWeight: fontWeight,\n    fontFamily: fontConfig.fontFamily,\n    lineheight: fontConfig.lineHeight,\n    letterSpacing: fontConfig.letterSpacing && fontConfig.letterSpacing,\n    primitive: primitive,\n    color: color,\n    tabIndex: tabIndex,\n    \"aria-hidden\": tabIndex < 0,\n    fontsconfig: fontsConfigProp,\n    \"aria-label\": ariaLabel,\n    id: id,\n    \"aria-labelledby\": ariaLabelledBy\n  }, children);\n};\n\nBody.propTypes = propTypes;\nBody.defaultProps = defaultProps;\nexport default withVDSManager(Body);","map":{"version":3,"sources":["/Users/vamsi/verizon-os-react/node_modules/@vds-core/typography/dist/esm/components/Body/Body.js"],"names":["_taggedTemplateLiteral","_templateObject","data","React","PropTypes","styled","colors","TypographyConfig","fontColorPropType","Typography","withVDSManager","defaultConfig","getBodyFontWeight","typescale","bold","propTypes","primitive","oneOf","viewport","size","children","node","color","bool","theme","object","tabIndex","number","config","getfontWeight","func","id","string","ariaLabelledBy","defaultProps","black","getFontWeight","StyledBody","withConfig","displayName","componentId","Body","props","fontsConfigProp","fontsConfig","ariaLabel","typescaleToUse","getTypescale","viewportToUse","fontConfig","fontWeight","createElement","fontSize","fontFamily","lineheight","lineHeight","letterSpacing","fontsconfig"],"mappings":"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","sourcesContent":["import _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  &:active,\\n  &:focus,\\n  &:hover {\\n    outline: none;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { colors } from '@vds-core/theme';\nimport TypographyConfig from '../../typographyConfig';\nimport fontColorPropType from '../../util/fontColorPropType';\nimport { Typography } from '../Typography';\nimport { withVDSManager } from '@vds-core/utilities';\nimport defaultConfig from './config';\n\nfunction getBodyFontWeight(typescale, bold) {\n  switch (typescale) {\n    case 'MVP':\n    case 'VDS':\n      return bold ? '750' : '400';\n    // 400 is mapped to match 55 Roman\n\n    default:\n      return bold ? 'bold' : 'normal';\n  }\n}\n\nvar propTypes = {\n  /**\n   * Primitive used for the component.\n   */\n  primitive: PropTypes.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'span', 'p']),\n\n  /**\n   * Viewport the font styling is based on. Desktop and tablet are the same size.\n   */\n  viewport: PropTypes.oneOf(['desktop', 'tablet', 'mobile']),\n\n  /**\n   * Size of the typescale that will be used.\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n\n  /**\n   * Content that will be passed to the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * The color of the text.\n   */\n  color: fontColorPropType,\n\n  /**\n   * Adds a fontWeight of bold.\n   */\n  bold: PropTypes.bool,\n\n  /**\n   * Allows for specific typescale to be passed to override global config.\n   */\n  typescale: PropTypes.oneOf(['VDS', 'MVP']),\n\n  /**\n   * If the theme object contains the `typescale` key and no typescale prop was passed global typescale is overriden by theme.\n   */\n  theme: PropTypes.object,\n\n  /**\n   * The tabIndex of the text.\n   */\n  tabIndex: PropTypes.number,\n\n  /**\n   * @ignore\n   */\n  config: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  getfontWeight: PropTypes.func,\n\n  /**\n   * Assigns an Id to the component\n   */\n  id: PropTypes.string,\n\n  /**\n   * Adds an aria-labelledby attribute to the component\n   */\n  ariaLabelledBy: PropTypes.string\n};\nvar defaultProps = {\n  primitive: 'p',\n  viewport: 'desktop',\n  size: 'small',\n  children: null,\n  color: colors.black,\n  bold: false,\n  config: defaultConfig,\n  getFontWeight: getBodyFontWeight\n};\nvar StyledBody = /*#__PURE__*/styled(Typography).withConfig({\n  displayName: \"StyledBody\",\n  componentId: \"sc-1s1yqd8-0\"\n})(_templateObject());\n\nvar Body = function Body(props) {\n  var config = props.config,\n      children = props.children,\n      primitive = props.primitive,\n      viewport = props.viewport,\n      size = props.size,\n      color = props.color,\n      bold = props.bold,\n      typescale = props.typescale,\n      theme = props.theme,\n      tabIndex = props.tabIndex,\n      getFontWeight = props.getFontWeight,\n      fontsConfigProp = props.fontsConfig,\n      ariaLabel = props.ariaLabel,\n      id = props.id,\n      ariaLabelledBy = props.ariaLabelledBy;\n  var // What typescale is being used for configuration\n  typescaleToUse = typescale ? typescale : theme && theme.typescale ? theme.typescale : TypographyConfig.getTypescale(),\n      viewportToUse = viewport === 'mobile' ? 'mobile' : 'desktop',\n      // What is the specific font configuration we are using\n  fontConfig = config[typescaleToUse][viewportToUse][size],\n      fontWeight = getFontWeight(typescaleToUse, bold);\n  return /*#__PURE__*/React.createElement(StyledBody, {\n    fontSize: fontConfig.fontSize,\n    fontWeight: fontWeight,\n    fontFamily: fontConfig.fontFamily,\n    lineheight: fontConfig.lineHeight,\n    letterSpacing: fontConfig.letterSpacing && fontConfig.letterSpacing,\n    primitive: primitive,\n    color: color,\n    tabIndex: tabIndex,\n    \"aria-hidden\": tabIndex < 0,\n    fontsconfig: fontsConfigProp,\n    \"aria-label\": ariaLabel,\n    id: id,\n    \"aria-labelledby\": ariaLabelledBy\n  }, children);\n};\n\nBody.propTypes = propTypes;\nBody.defaultProps = defaultProps;\nexport default withVDSManager(Body);"]},"metadata":{},"sourceType":"module"}