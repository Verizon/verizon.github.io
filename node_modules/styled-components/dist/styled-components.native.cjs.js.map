{"version":3,"file":"styled-components.native.cjs.js","sources":["../src/models/InlineStyle.js","../src/models/ThemeProvider.js","../src/models/StyledNativeComponent.js"],"sourcesContent":["// @flow\n/* eslint-disable import/no-unresolved */\nimport transformDeclPairs from 'css-to-react-native'\n\nimport hashStr from '../vendor/glamor/hash'\nimport type { RuleSet, StyleSheet } from '../types'\nimport flatten from '../utils/flatten'\nimport parse from '../vendor/postcss-safe-parser/parse'\n\nlet generated = {}\n\nexport const resetStyleCache = () => {\n  generated = {}\n}\n\n/*\n InlineStyle takes arbitrary CSS and generates a flat object\n */\nexport default (styleSheet: StyleSheet) => {\n  class InlineStyle {\n    rules: RuleSet\n\n    constructor(rules: RuleSet) {\n      this.rules = rules\n    }\n\n    generateStyleObject(executionContext: Object) {\n      const flatCSS = flatten(this.rules, executionContext).join('')\n      const hash = hashStr(flatCSS)\n      if (!generated[hash]) {\n        const root = parse(flatCSS)\n        const declPairs = []\n        root.each(node => {\n          if (node.type === 'decl') {\n            declPairs.push([node.prop, node.value])\n          } else if (\n            node.type !== 'comment' &&\n            process.env.NODE_ENV !== 'production'\n          ) {\n            /* eslint-disable no-console */\n            console.warn(\n              `Node of type ${node.type} not supported as an inline style`\n            )\n          }\n        })\n        // RN currently does not support differing values for the corner radii of Image\n        // components (but does for View). It is almost impossible to tell whether we'll have\n        // support, so we'll just disable multiple values here.\n        // https://github.com/styled-components/css-to-react-native/issues/11\n        const styleObject = transformDeclPairs(declPairs, [\n          'borderRadius',\n          'borderWidth',\n          'borderColor',\n          'borderStyle',\n        ])\n        const styles = styleSheet.create({\n          generated: styleObject,\n        })\n        generated[hash] = styles.generated\n      }\n      return generated[hash]\n    }\n  }\n\n  return InlineStyle\n}\n","// @flow\nimport React, { Component, type Element } from 'react'\nimport PropTypes from 'prop-types'\nimport createBroadcast from '../utils/create-broadcast'\nimport type { Broadcast } from '../utils/create-broadcast'\nimport StyledError from '../utils/error'\nimport once from '../utils/once'\n\n// NOTE: DO NOT CHANGE, changing this is a semver major change!\nexport const CHANNEL = '__styled-components__'\nexport const CHANNEL_NEXT = `${CHANNEL}next__`\n\nexport const CONTEXT_CHANNEL_SHAPE = PropTypes.shape({\n  getTheme: PropTypes.func,\n  subscribe: PropTypes.func,\n  unsubscribe: PropTypes.func,\n})\n\nexport const contextShape = {\n  [CHANNEL]: PropTypes.func, // legacy\n  [CHANNEL_NEXT]: CONTEXT_CHANNEL_SHAPE,\n}\n\nexport type Theme = { [key: string]: mixed }\ntype ThemeProviderProps = {|\n  children?: Element<any>,\n  theme: Theme | ((outerTheme: Theme) => void),\n|}\n\nlet warnChannelDeprecated\nif (process.env.NODE_ENV !== 'production') {\n  warnChannelDeprecated = once(() => {\n    // eslint-disable-next-line no-console\n    console.warn(\n      `Warning: Usage of \\`context.${CHANNEL}\\` as a function is deprecated. It will be replaced with the object on \\`.context.${CHANNEL_NEXT}\\` in a future version.`\n    )\n  })\n}\n\nconst isFunction = test => typeof test === 'function'\n\n/**\n * Provide a theme to an entire react component tree via context and event listeners (have to do\n * both context and event emitter as pure components block context updates)\n */\nexport default class ThemeProvider extends Component<ThemeProviderProps, void> {\n  broadcast: Broadcast\n  getTheme: (theme?: Theme | ((outerTheme: Theme) => void)) => Theme\n  outerTheme: Theme\n  props: ThemeProviderProps\n  unsubscribeToOuterId: number = -1\n  unsubscribeToOuterId: string\n\n  static childContextTypes = contextShape\n  static contextTypes = {\n    [CHANNEL_NEXT]: CONTEXT_CHANNEL_SHAPE,\n  }\n\n  constructor() {\n    super()\n    this.getTheme = this.getTheme.bind(this)\n  }\n\n  componentWillMount() {\n    // If there is a ThemeProvider wrapper anywhere around this theme provider, merge this theme\n    // with the outer theme\n    const outerContext = this.context[CHANNEL_NEXT]\n    if (outerContext !== undefined) {\n      this.unsubscribeToOuterId = outerContext.subscribe(theme => {\n        this.outerTheme = theme\n\n        if (this.broadcast !== undefined) {\n          this.publish(this.props.theme)\n        }\n      })\n    }\n\n    this.broadcast = createBroadcast(this.getTheme())\n  }\n\n  getChildContext() {\n    return {\n      ...this.context,\n      [CHANNEL_NEXT]: {\n        getTheme: this.getTheme,\n        subscribe: this.broadcast.subscribe,\n        unsubscribe: this.broadcast.unsubscribe,\n      },\n      [CHANNEL]: subscriber => {\n        if (process.env.NODE_ENV !== 'production') {\n          warnChannelDeprecated()\n        }\n\n        // Patch the old `subscribe` provide via `CHANNEL` for older clients.\n        const unsubscribeId = this.broadcast.subscribe(subscriber)\n        return () => this.broadcast.unsubscribe(unsubscribeId)\n      },\n    }\n  }\n\n  componentWillReceiveProps(nextProps: ThemeProviderProps) {\n    if (this.props.theme !== nextProps.theme) {\n      this.publish(nextProps.theme)\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.unsubscribeToOuterId !== -1) {\n      this.context[CHANNEL_NEXT].unsubscribe(this.unsubscribeToOuterId)\n    }\n  }\n\n  // Get the theme from the props, supporting both (outerTheme) => {} as well as object notation\n  getTheme(passedTheme: (outerTheme: Theme) => void | Theme) {\n    const theme = passedTheme || this.props.theme\n\n    if (isFunction(theme)) {\n      const mergedTheme = theme(this.outerTheme)\n\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        (mergedTheme === null ||\n          Array.isArray(mergedTheme) ||\n          typeof mergedTheme !== 'object')\n      ) {\n        throw new StyledError(7)\n      }\n\n      return mergedTheme\n    }\n\n    if (theme === null || Array.isArray(theme) || typeof theme !== 'object') {\n      throw new StyledError(8)\n    }\n\n    return { ...this.outerTheme, ...(theme: Object) }\n  }\n\n  publish(theme: Theme | ((outerTheme: Theme) => void)) {\n    this.broadcast.publish(this.getTheme(theme))\n  }\n\n  render() {\n    if (!this.props.children) {\n      return null\n    }\n\n    return React.Children.only(this.props.children)\n  }\n}\n","// @flow\nimport hoist from 'hoist-non-react-statics'\nimport { Component, createElement } from 'react'\nimport determineTheme from '../utils/determineTheme'\nimport { EMPTY_OBJECT } from '../utils/empties'\nimport generateDisplayName from '../utils/generateDisplayName'\nimport isStyledComponent from '../utils/isStyledComponent'\nimport isTag from '../utils/isTag'\nimport hasInInheritanceChain from '../utils/hasInInheritanceChain'\nimport once from '../utils/once'\nimport { CHANNEL_NEXT, contextShape } from './ThemeProvider'\n\nimport type { Theme } from './ThemeProvider'\nimport type { RuleSet, Target } from '../types'\n\ntype State = {\n  theme?: ?Theme,\n  generatedStyles: any,\n}\n\nlet warnExtendDeprecated = () => {}\nif (process.env.NODE_ENV !== 'production') {\n  warnExtendDeprecated = once(() => {\n    // eslint-disable-next-line no-console\n    console.warn(\n      'Warning: The \"extend\" API will be removed in the upcoming v4.0 release. Use styled(StyledComponent) instead. You can find more information here: https://github.com/styled-components/styled-components/issues/1546'\n    )\n  })\n}\n\n// $FlowFixMe\nclass BaseStyledNativeComponent extends Component<*, State> {\n  static target: Target\n  static styledComponentId: string\n  static attrs: Object\n  static defaultProps: Object\n  static inlineStyle: Object\n  root: ?Object\n\n  attrs = {}\n  state = {\n    theme: null,\n    generatedStyles: undefined,\n  }\n\n  unsubscribeId: number = -1\n\n  unsubscribeFromContext() {\n    if (this.unsubscribeId !== -1) {\n      this.context[CHANNEL_NEXT].unsubscribe(this.unsubscribeId)\n    }\n  }\n\n  buildExecutionContext(theme: any, props: any) {\n    const { attrs } = this.constructor\n    const context = { ...props, theme }\n    if (attrs === undefined) {\n      return context\n    }\n\n    this.attrs = Object.keys(attrs).reduce((acc, key) => {\n      const attr = attrs[key]\n      // eslint-disable-next-line no-param-reassign\n      acc[key] =\n        typeof attr === 'function' && !hasInInheritanceChain(attr, Component)\n          ? attr(context)\n          : attr\n      return acc\n    }, {})\n\n    return { ...context, ...this.attrs }\n  }\n\n  generateAndInjectStyles(theme: any, props: any) {\n    const { inlineStyle } = this.constructor\n    const executionContext = this.buildExecutionContext(theme, props)\n\n    return inlineStyle.generateStyleObject(executionContext)\n  }\n\n  componentWillMount() {\n    // If there is a theme in the context, subscribe to the event emitter. This\n    // is necessary due to pure components blocking context updates, this circumvents\n    // that by updating when an event is emitted\n    const styledContext = this.context[CHANNEL_NEXT]\n    if (styledContext !== undefined) {\n      const { subscribe } = styledContext\n      this.unsubscribeId = subscribe(nextTheme => {\n        // This will be called once immediately\n        const theme = determineTheme(\n          this.props,\n          nextTheme,\n          this.constructor.defaultProps\n        )\n        const generatedStyles = this.generateAndInjectStyles(theme, this.props)\n\n        this.setState({ theme, generatedStyles })\n      })\n    } else {\n      // eslint-disable-next-line react/prop-types\n      const theme = this.props.theme || EMPTY_OBJECT\n      const generatedStyles = this.generateAndInjectStyles(theme, this.props)\n      this.setState({ theme, generatedStyles })\n    }\n  }\n\n  componentWillReceiveProps(nextProps: { theme?: Theme, [key: string]: any }) {\n    this.setState(prevState => {\n      const theme = determineTheme(\n        nextProps,\n        prevState.theme,\n        this.constructor.defaultProps\n      )\n      const generatedStyles = this.generateAndInjectStyles(theme, nextProps)\n\n      return { theme, generatedStyles }\n    })\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeFromContext()\n  }\n\n  setNativeProps(nativeProps: Object) {\n    if (this.root !== undefined) {\n      // $FlowFixMe\n      this.root.setNativeProps(nativeProps)\n    } else if (process.env.NODE_ENV !== 'production') {\n      const { displayName } = this.constructor\n\n      // eslint-disable-next-line no-console\n      console.warn(\n        'setNativeProps was called on a Styled Component wrapping a stateless functional component. ' +\n          'In this case no ref will be stored, and instead an innerRef prop will be passed on.\\n' +\n          `Check whether the stateless functional component is passing on innerRef as a ref in ${displayName ||\n            'UnknownStyledNativeComponent'}.`\n      )\n    }\n  }\n\n  onRef = (node: any) => {\n    // eslint-disable-next-line react/prop-types\n    const { innerRef } = this.props\n    this.root = node\n\n    if (typeof innerRef === 'function') {\n      innerRef(node)\n    } else if (\n      typeof innerRef === 'object' &&\n      innerRef &&\n      innerRef.hasOwnProperty('current')\n    ) {\n      innerRef.current = node\n    }\n  }\n\n  render() {\n    // eslint-disable-next-line react/prop-types\n    const { children, style } = this.props\n    const { generatedStyles } = this.state\n    const { target } = this.constructor\n\n    const propsForElement = {\n      ...this.attrs,\n      ...this.props,\n      style: [generatedStyles, style],\n    }\n\n    if (\n      !isStyledComponent(target) &&\n      // NOTE: We can't pass a ref to a stateless functional component\n      (typeof target !== 'function' ||\n        // $FlowFixMe TODO: flow for prototype\n        (target.prototype && 'isReactComponent' in target.prototype))\n    ) {\n      propsForElement.ref = this.onRef\n      delete propsForElement.innerRef\n    } else {\n      propsForElement.innerRef = this.onRef\n    }\n\n    return createElement(target, propsForElement, children)\n  }\n}\n\nexport default (constructWithOptions: Function, InlineStyle: Function) => {\n  const createStyledNativeComponent = (\n    target: Target,\n    options: Object,\n    rules: RuleSet\n  ) => {\n    const {\n      isClass = !isTag(target),\n      displayName = generateDisplayName(target),\n      ParentComponent = BaseStyledNativeComponent,\n      rules: extendingRules,\n      attrs,\n    } = options\n\n    const inlineStyle = new InlineStyle(\n      extendingRules === undefined ? rules : extendingRules.concat(rules)\n    )\n\n    class StyledNativeComponent extends ParentComponent {\n      static attrs = attrs\n      static contextTypes = contextShape\n      static displayName = displayName\n      static inlineStyle = inlineStyle\n      static styledComponentId = 'StyledNativeComponent'\n      static target = target\n\n      static withComponent(tag: Target) {\n        const { displayName: _, componentId: __, ...optionsToCopy } = options\n        const newOptions = {\n          ...optionsToCopy,\n          ParentComponent: StyledNativeComponent,\n        }\n        return createStyledNativeComponent(tag, newOptions, rules)\n      }\n\n      static get extend() {\n        const {\n          displayName: _,\n          componentId: __,\n          rules: rulesFromOptions,\n          ...optionsToCopy\n        } = options\n\n        const newRules =\n          rulesFromOptions === undefined\n            ? rules\n            : rulesFromOptions.concat(rules)\n\n        const newOptions = {\n          ...optionsToCopy,\n          rules: newRules,\n          ParentComponent: StyledNativeComponent,\n        }\n\n        warnExtendDeprecated()\n\n        return constructWithOptions(\n          createStyledNativeComponent,\n          target,\n          newOptions\n        )\n      }\n    }\n\n    if (isClass) {\n      hoist(StyledNativeComponent, target, {\n        // all SC-specific things should not be hoisted\n        attrs: true,\n        displayName: true,\n        extend: true,\n        inlineStyle: true,\n        styledComponentId: true,\n        target: true,\n        withComponent: true,\n      })\n    }\n\n    return StyledNativeComponent\n  }\n\n  return createStyledNativeComponent\n}\n"],"names":["unsubscribeId"],"mappingsoBI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACGwC,kCAAA;AAI1C,yCAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTD,yCAAA;;;;;;;;;;;;;;;;;;;;;;;;aAkBCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}