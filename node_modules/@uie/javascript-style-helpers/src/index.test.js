import { calculateRem, UtilityConfig } from '.';

describe('calculateRem', () => {
  it('should return size divided by default base', () => {
    expect(calculateRem(48)).toBe('3rem');
  });

  it('should return size divided by default base with many parameters', () => {
    expect(calculateRem(48, 48, 48, 48)).toBe('3rem 3rem 3rem 3rem');
  });

  it('should return size divided by default base with unique parameters', () => {
    expect(calculateRem(48, 20, 18, 10)).toBe('3rem 1.25rem 1.125rem 0.625rem');
  });

  it('using strings should return size divided by default base with unique parameters', () => {
    expect(calculateRem('48', '20', '18', '10')).toBe(
      '3rem 1.25rem 1.125rem 0.625rem'
    );
  });

  it('using pixels should return size divided by default base with unique parameters', () => {
    expect(calculateRem('48px', '20px', '18px', '10px')).toBe(
      '3rem 1.25rem 1.125rem 0.625rem'
    );
  });

  it('using rems should return size in rem for any input type', () => {
    expect(calculateRem('3rem', '1.25rem', '1.125rem', '0.625rem')).toBe(
      '3rem 1.25rem 1.125rem 0.625rem'
    );
  });

  it('passing in 0 as any form should create output of zero only, no rem', () => {
    expect(calculateRem(0, 0.0, '0px', '0.0rem')).toBe('0 0 0 0');
  });

  it('passing in 0 as one or more of parameters', () => {
    expect(calculateRem(0, '16px', 0.0, '1.5rem')).toBe('0 1rem 0 1.5rem');
  });

  it('should return size divided by provided base', () => {
    UtilityConfig.remBase = 10;
    expect(calculateRem(20)).toBe('2rem');
  });

  it('should return size divided by provided base with unique parameters', () => {
    UtilityConfig.remBase = 10;
    expect(calculateRem(48, 20, 18, 10)).toBe('4.8rem 2rem 1.8rem 1rem');
  });
});
